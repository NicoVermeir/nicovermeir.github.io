<?xml version="1.0" encoding="utf-8"?>
<blog root-url="/blog/" date-created="2017-06-04T09:44:00" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.blogml.com/2006/09/BlogML">
  <title type="text"><![CDATA[Nico's digital footprint]]></title>
  <sub-title type="text"><![CDATA[I grew up in the nineties, that makes me awesome by default]]></sub-title>
  <authors>
    <author id="Admin" date-created="2017-06-04T04:07:13" date-modified="2017-06-04T04:07:13" approved="true" email="nico@spikie.be">
      <title type="text"><![CDATA[Admin]]></title>
    </author>
  </authors>
  <extended-properties>
    <property name="CommentModeration" value="Anonymous" />
    <property name="SendTrackback" value="Yes" />
  </extended-properties>
  <categories>
    <category id="6561d219-11f8-4d48-bb0e-8a9078c991af" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[.Net]]></title>
    </category>
    <category id="117f9e29-93c6-43a3-9b9a-4e662bfdaa62" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Augmented Reality]]></title>
    </category>
    <category id="dcadc47c-d872-4eff-b325-87e1a4b16ec6" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Azure]]></title>
    </category>
    <category id="540177e8-fd15-4be6-b0ba-6f2c19913278" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Binding]]></title>
    </category>
    <category id="01edea20-8a5a-4bf8-9679-db7d54f6b438" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Bluetooth]]></title>
    </category>
    <category id="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Community]]></title>
    </category>
    <category id="7b5710ca-3236-4d90-9370-2279a87385f0" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[continuous delivery]]></title>
    </category>
    <category id="56a95f57-a603-47f2-bc72-9a2453688a61" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Data]]></title>
    </category>
    <category id="4a94883b-c6b8-4030-85a1-dcd11467c5d3" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Devices]]></title>
    </category>
    <category id="e5987bad-8814-49a7-bbe1-9b92e3224014" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Fluent]]></title>
    </category>
    <category id="a821ad2d-92f6-4bd5-b5ec-b3a894bb2329" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Game development]]></title>
    </category>
    <category id="a1f78b79-1ecd-4e89-8a7a-92a6ea0d4b1b" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[geofencing]]></title>
    </category>
    <category id="975aa66f-26b2-4287-9e19-a9ba510dd433" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[github]]></title>
    </category>
    <category id="012247e8-ef19-43d9-8d02-410ea61bd68a" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[httpclient]]></title>
    </category>
    <category id="68f0e7bf-def2-4217-9ad6-03e88ac6e32b" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[IIS]]></title>
    </category>
    <category id="e42bd5bb-a440-4306-9671-1010ade4e827" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[LeapMotion]]></title>
    </category>
    <category id="9a75a960-77ed-4ce5-a80e-35cfbe7898da" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[lifecycle]]></title>
    </category>
    <category id="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Metro]]></title>
    </category>
    <category id="b43ad80c-ad86-4ef7-a1f5-10be62951aad" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[MonoGame]]></title>
    </category>
    <category id="41bcc586-adb9-4e16-9b8a-c527d090a7bc" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[msbuild]]></title>
    </category>
    <category id="a32f3d48-8cb6-4bb0-81e3-59bd37a2678b" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[MSDN]]></title>
    </category>
    <category id="ddbeed5f-f4f7-4d1b-88ac-e8d21ed2b37d" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[MVP]]></title>
    </category>
    <category id="9f5a45ae-6001-46fe-b47b-88bb85087e4a" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[MVVM Light]]></title>
    </category>
    <category id="6b55a22a-f640-46ef-a0da-0445c61d953c" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[myget]]></title>
    </category>
    <category id="ef33a728-f509-4228-8b4c-06aca8964391" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[NFC]]></title>
    </category>
    <category id="58dfe641-4139-4473-8a52-4fa9a46841bc" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[NuGet]]></title>
    </category>
    <category id="d2074c7b-2f4d-40b0-a4d4-f0f825db2c3d" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[NUI]]></title>
    </category>
    <category id="31651f7a-c460-4a72-84bd-dd65a1eb33cc" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[OSS]]></title>
    </category>
    <category id="cd0e8753-7f49-46cc-b4ed-293f72eb73c7" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Patterns]]></title>
    </category>
    <category id="81e4515f-9482-48d4-83be-9800e6f3e100" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[PCL]]></title>
    </category>
    <category id="f016512c-1ad9-4a28-ab23-13e5ef3086b7" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Presenting]]></title>
    </category>
    <category id="a0974773-323a-4a5f-a5be-a22b5f8a64b9" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[REST]]></title>
    </category>
    <category id="3ea3cc57-12ac-4425-90cc-635093df9f95" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[signalr]]></title>
    </category>
    <category id="b02131cb-4742-4c07-bfaa-b905c8088508" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[sqlite]]></title>
    </category>
    <category id="e96ada6a-e768-4392-a18e-c2f0d6f81016" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Talk]]></title>
    </category>
    <category id="8f8df723-2b90-4e6b-a4af-3642d4b8412a" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[tombstoning]]></title>
    </category>
    <category id="11fd3df1-1b88-411d-b266-b8c815c8892e" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Validation]]></title>
    </category>
    <category id="d6eca6eb-4ef0-4dfa-88f2-d19cc1c92f8b" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[WCF]]></title>
    </category>
    <category id="d7d81894-24cc-4de8-a635-0fa0642a97e9" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Web development]]></title>
    </category>
    <category id="79f974f3-46fe-4e57-ad9a-6d9158c113a6" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="d7d81894-24cc-4de8-a635-0fa0642a97e9">
      <title type="text"><![CDATA[HTML]]></title>
    </category>
    <category id="22302a23-f019-4a09-80a2-91b58db4d241" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="d7d81894-24cc-4de8-a635-0fa0642a97e9">
      <title type="text"><![CDATA[Silverlight]]></title>
    </category>
    <category id="b9997019-6c8a-474c-a47c-6a1d34db9d4e" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Windows 8]]></title>
    </category>
    <category id="08fb4670-7d89-4feb-bc58-6efb5ec22118" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Windows programming]]></title>
    </category>
    <category id="1f6c99a6-b56d-47cc-92a5-1b3eb298dd06" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="08fb4670-7d89-4feb-bc58-6efb5ec22118">
      <title type="text"><![CDATA[WinForms]]></title>
    </category>
    <category id="5027c9cd-499a-422b-8493-a112467f378e" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="08fb4670-7d89-4feb-bc58-6efb5ec22118">
      <title type="text"><![CDATA[WPF]]></title>
    </category>
    <category id="a3f18305-7737-4491-be20-f4faa970daff" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[WinRT]]></title>
    </category>
    <category id="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[WP7]]></title>
    </category>
    <category id="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[WP8]]></title>
    </category>
    <category id="a85e1e41-6bed-4b92-91d0-1ffe0af5986f" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[Xamarin]]></title>
    </category>
    <category id="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[XAML]]></title>
    </category>
    <category id="08f61bac-ead0-496a-964a-094ab5da5f9d" date-created="0001-01-01T00:00:00" date-modified="0001-01-01T00:00:00" approved="true" parentref="">
      <title type="text"><![CDATA[XNA]]></title>
    </category>
  </categories>
  <posts>
    <post id="9d4186fd-f852-4738-913a-ba9a4b20564a" date-created="2016-11-10T23:02:13" date-modified="2016-11-10T23:46:54" approved="true" post-url="/blog/post/2016/11/10/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Using the Surface Dial as a debug tool]]></title>
      <content type="text"><![CDATA[<p>Update: here’s a small video of the extension in action</p>  <p><iframe height="315" src="https://www.youtube.com/embed/FxdQ5XwYBFI" frameborder="0" width="560" allowfullscreen="allowfullscreen"></iframe></p>  <p>&#160;</p>  <p>The Surface Dial is a nifty little device, it feels great and can add some nice capabilities to your apps. However, the very best thing about it is that is has an API. I had a go with it and decided to try and turn the dial into a debugging device.</p>  <h2>The goal</h2>  <p>The Dial has a few gestures. It’s a button that you can press, and it rotates clockwise and counter-clockwise. My goal was to start a debugging session by clicking the Dial, Step-Over (F10) by rotating clockwise and Step-Into (F11) by rotating counter-clockwise.</p>  <h2>Pre-requisites</h2>  <p>We’ll need some stuff to get going:</p>  <ul>   <li><a href="https://www.microsoftstore.com/store/msusa/en_US/pdp/Surface-Dial/productID.5074013900" target="_blank">Surface Dial</a> </li>    <li><a href="https://www.visualstudio.com/post-download-vs/?sku=community&amp;clcid=0x409&amp;telem=ga" target="_blank">Visual Studio 2015 (any edition is fine)</a> </li>    <li>Visual Studio 2015 SDK (included in the Visual Studio Installer) </li>    <li>Windows 10 Anniversary Update or later </li> </ul>  <h2>Setting up a Visual Studio Extension</h2>  <p>To start creating a Visual Studio Extension, launch Visual Studio 2015 and start a new project. If the SDK is installed correctly there should be an Extensibility option with a VSIX Project template.</p>  <p><img src="http://i67.tinypic.com/250tlyf.jpg" width="646" height="449" /></p>  <p>The project it creates is basically an empty box, just some boilerplate code to have a VSIX installer and have it install your extension in VS. To start adding some functionality to the extension we need to add an extra item, in this case it will be a package, these are added as a new item into the project.</p>  <p><img src="http://i64.tinypic.com/mqbd0.jpg" width="644" height="447" /></p>  <p>Almost ready, all we need to add next is when our extension should load. We’re going to choose for load on solution load in this sample. This is done by adding an attribute on the package class.</p>  <p><script src="https://gist.github.com/NicoVermeir/a8eae0005bdb86acae0ab9b50abb40fe.js"></script></p>  <p>Thrown together, we get:</p>  <p><script src="https://gist.github.com/NicoVermeir/f38a5f2d8ef54c9d6ad7fb760ea0b825.js"></script></p>  <pre> </pre>

<p>If you press F5 now, an experimental instance of Visual Studio should launch, with the extension installed.</p>

<h2>Connecting to the Dial</h2>

<p>This was the hardest part of the project, the Dial API is done in UWP. This is how we can grab the Dial instance in UWP (currently only one dial is supported per system)</p>

<pre><em>var controller = RadialController.CreateForCurrentView();</em></pre>

<p>The problem here is not the fact that it’s a UWP API, </font><a href="https://mtaulty.com/2016/10/11/calling-uwp-apis-from-a-desktop-application/" target="_blank">we can use those from win32</a>. The problem is that the CreateForCurrentView() method requires a handle to the current window, a UWP window, which we obviously don’t have. I found the solution for this in one of the official Microsoft samples. They have a sample in the windows-classic-samples repository that shows <a href="https://github.com/Microsoft/Windows-classic-samples/tree/master/Samples/RadialController/cs/winforms" target="_blank">how to access the Dial from a WinForms application</a>.</p>

<p>I took the RadialControllerInterop class from that sample and added it to the extension. however, as it turned out, it was only part of the solution.</p>

<p><script src="https://gist.github.com/NicoVermeir/51aa2e836ea7b20887439459e5406b81.js"></script></p>

<p>The interop interfaces actually reference the RadialController class that lives in Windows.UI.Input, a UWP namespace that we currently have no reference to. That’s where the <a href="https://github.com/ljw1004/uwp-desktop/blob/master/README.md" target="_blank">UwpDesktop</a> NuGet package comes in. This package makes it easy to reference UWP classes from win32 style applications. Once added through NuGet we can add the Windows.UI.Input namespace to the interop class.</p>

<p><script src="https://gist.github.com/NicoVermeir/88bc47f259e052a193fb9d1fe10f4e8b.js"></script></p>

<p>We’ve got everything in place to connect to the Dial from Visual Studio.</p>

<h2>Glueing it together</h2>

<p>Back to the package class, there should be an Initialize method, overridden from the base class. This is where we’ll hook everything up.</p>

<p><script src="https://gist.github.com/NicoVermeir/fa5ff8ba6e8fbecec15e48c9ca36a65a.js"></script></p>

<p>First thing we’ll do is grab hold of the current Visual Studio instance, which is a DTE object. We keep a reference to this object in a field because we’ll need it later.</p>

<p>Next up is connecting to the Dial</p>

<p><script src="https://gist.github.com/NicoVermeir/fcb75a1e93fcd0eac131f46fabddcac1.js"></script></p>

<p>In this method we’re using interop to get access to the UWP RadialController class via the interface we took from the classic windows samples. As a handle for the windows we pass in the handle for our current Visual Studio instance which we can get to from the DTE object. At this point we got a reference to the Dial that is connected to our system.</p>

<p>The Dial has a radial menu that we can hook into and add or remove items from it. We’ll add a Debug item to it.</p>

<p><script src="https://gist.github.com/NicoVermeir/f5235fbec2a58f6ac005008d805ac3d0.js"></script></p>

<p>I’m doing this through a list just in case I ever want to add more items, but at the moment I’m only adding one. A RadialControllerMenuItem is created via the CreateFromKnownIcon method. First parameter is the text that will be displayed in the menu, the second one is an enum value from an enum that contains some known menu icons. A RadialController has a menu property that has a collection of items, all we need to do is add our items to that collection and it will show up in the radial menu.</p>

<p><img src="http://i67.tinypic.com/2ng9afo.jpg" /></p>

<p>Final step is adding the event handlers and calling the debugger methods to let the Dial step through the code.</p>

<p><script src="https://gist.github.com/NicoVermeir/433632420bb4c347ede919c8a6e51065.js"></script></p>

<p>As you can see, the events coming from the dial are very straightforward, there’s a ButtonClicked and a RotationChanged event.</p>

<p>Here’s what we need to do to start debugging on button click:</p>

<p><script src="https://gist.github.com/NicoVermeir/00409ee73e8c96238be1618832758fb9.js"></script></p>

<p>The Visual Studio SDK provides an easy to use API surface. We can use the DTE.Application.Debugger class to control the debugger. The Go() method launches a debug session, the Stop() method, well, stops a debugging session.</p>

<p>Next, we’ll handle the rotation events</p>

<p><script src="https://gist.github.com/NicoVermeir/9db3bc0a8c27934dda28a29b4e6a6e3a.js"></script></p>

<p>From the args we get the rotation delta, one step on the rotator is a delta of 10, +10 clockwise and –10 counter-clockwise.</p>

<p>And that’s it, build it in release mode and the bin/release folder will contain a .vsix installer file. Close VS, install the extension, reopen VS, open a solution, select Debug from the radial menu and debug away!</p>

<p>The source code is on <a href="https://github.com/NicoVermeir/DialDebug" target="_blank">GitHub</a>. Here’s a link to the <a href="https://github.com/NicoVermeir/DialDebug/blob/master/DialDebug/DialDebug.zip" target="_blank">compiled VSIX file.</a></p>

<p>Disclaimer: the code is provided as-is. I do not plan to publish this on the gallery or maintain the project. Do feel free to pick this up and create an open-source project from it (would be nice to include a reference to this post in the description <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_34.png" />)</p>

<p>happy coding!</p>]]></content>
      <post-name type="text"><![CDATA[Using the Surface Dial as a debug tool]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="c6ea578e-0d64-40be-bdb4-bf0f40c322d8" date-created="2016-05-04T18:53:36" date-modified="2016-05-04T20:12:24" approved="true" post-url="/blog/post/2016/05/04/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[The future of XAML Styler]]></title>
      <content type="text"><![CDATA[<p>A while ago I forked the popular Visual Studio plugin XAML Styler. The original author had abandoned the project before Visual Studio 2013 came out. I forked the project, added VS2013 support and starting improving / extending the extension. Over time I had a lot of help from different people. Popularity grew very fast.</p>  <p>But as things tend to go with hobby projects, life got in the way and I started neglecting the plugin. Pull Request stood open for over a year, reported issues weren’t responded to and the project seemed abandoned. My apologies for this. One of the things that came out of this was a new fork called XAML Magic. Dave, the maintainer of XAML Magic, took XAML Styler and did some cool things with it, like adding command line support.</p>  <p>About two weeks ago I felt it was about time to dive back into XAML Styler, clean up all outstanding issues and dedicate a set amount of time to the extension, and this time make sure that it remains alive. Version 2.0 was released, I got in touch with one of my best contributors, Philip, and together we started discussing the future of XAML Styler.</p>  <p>A few days later, Dave, the creator of XAML Magic, reached out to me. He had no plans to be a competitor to XAML Styler and wanted to work together to create one amazing plugin instead of two competing products (that’s open source spirit right there!). We added Philip into the mix and decided to switch XAML Styler over to a Github Organization.</p>  <h2>Introducing Xavalon</h2>  <p>The three of us created Xavalon. Xavalon is the organization that will house XAML Styler from now on (and who knows what more great products will sprout here). Moving to an organization mainly means that the product will no longer be abandoned if one of us gets other priorities. We will always have someone available to work on the extension, and obviously we will still accept Pull Requests.</p>  <p>So where do we go from here? We just pushed XAML Styler 2.1 out to the Visual Studio Gallery. This should fix a bug where the extension was no longer useable in VS2013 and adds Blend 2015 support! (thanks Microsoft for the help on this one!). From now on we would like to ask you to report all issues to the <a href="https://github.com/Xavalon/XamlStyler" target="_blank">Xavalon repository</a> and no longer use the repository on my github. Next steps: we’ll create a backlog of features we want to implement (starting with back-porting XAML Magic), feel free to add to our backlog as well, we’re open to all suggestions!</p>  <p>Thank you all for your continued support, I’m sure that Dave, Philip and myself can keep this extension in active development and we can build something amazing out of it.</p>  <p><a title="https://github.com/Xavalon/XamlStyler" href="https://github.com/Xavalon/XamlStyler">https://github.com/Xavalon/XamlStyler</a></p>]]></content>
      <post-name type="text"><![CDATA[The future of XAML Styler]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="f3db0cab-2fec-498f-bba8-702b4e34f0f0" date-created="2016-02-29T15:23:00" date-modified="2016-02-29T16:39:35" approved="true" post-url="/blog/post/2016/02/29/HttpClient-in-mobile-apps.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[HttpClient in mobile apps]]></title>
      <content type="text"><![CDATA[<p>I’ve been seeing a lot of discussions lately on how to correctly use HttpClient in mobile apps, both UWP and / or Xamarin apps. In this post I’d like to share how I currently use HttpClient in my apps.</p>  <p>Read this first -&gt; Disclaimer</p>  <p>This article discusses how I use the HttpClient class. If you use it in a different way or don’t agree with what I write here, feel free to start a constructive discussion in the comments. I’ll be happy to discuss your way of thinking vs mine and adjust the article where necessary.</p>  <p>To single-instance or to multi-instance</p>  <p>Back when I was getting into writing mobile apps (in the WP7 era) I started learning about REST services and how to call them from .NET code. I learned about HttpClient and quickly found out that it implemented IDisposable, so the logical step was the using keyword.</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/ceb1f54a4f8ff0377b79.js"></script>  <p>Turns out, not the best way to go at it. When you dispose an HttpClient instance, the connection to the server is closed.    <br />When you do the next call to the server, with a new HttpClient instance, that connection is reopened. This causes delay in getting a response from the webservice. If a server really doesn’t want you to keep your connection open, it will inform us of that via a header and the HttpClient instance will quietly close the connection and reopen it the next time.</p>  <p>So, how do we create an easy to (re)use instance?</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/7084272960ca5eb8520a.js"></script>  <p>And to use this instance:</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/cc409670c94599a1708d.js"></script>  <h2>Use a base URL (and don’t even dare making it a magic string)</h2>  <p>The HttpClient class has a base url property. As you might have figured out, that property is meant to contain the root url of your API. So if we modify our HttpClient a bit we get this</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/8a01597d074fed66a107.js"></script>  <p>As for the magic strings remark, put all your&#160; string values into a constants class (or whatever you want to name it, as long as they’re all together). If you don’t understand the reasoning behind this, just try writing applications with string values in the code, you’ll find out soon enough <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_33.png" /></p>  <h2>Use compression where possible</h2>  <p>Since we’re mostly writing mobile applications we need to keep data usage in mind. We have no idea if our users will have an expensive data plan or unlimited data or if they’re on WIFI. This means that it’s our job as developers to keep the data usage as low as possible. The quickest win here is to compress the data from the server and decompress it on the device, this of course means that the server needs to support compression. If you yourself maintain the server, make sure that it is enabled (it’s enabled by default in Web API). Once that is enabled, we need to tell the HttpClient to enable decompression from either Deflate or Gzip formats. Enable decompression is done through an HttpClientHandler object that we can pass into the HttpClient constructor.</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/a9bfd00d1fc70423f5cf.js"></script>  <h2>Caching</h2>  <p>Another often overlooked way of limiting data usage is caching. You’d be surprised of the times users request the same data, if we cache the API result we can just fetch it from that cache again. Extra usability feature here is that we can actually show results when the device is offline. You can write your own caching framework if you want, or use one of the existing ones. I tend to switch between <a href="https://github.com/Q42/Q42.WinRT" target="_blank">Q42</a> (they save cached data in JSON files) and <a href="https://github.com/akavache/Akavache" target="_blank">Akavache</a> (they save cached data in SQLite).</p>  <h2>Security Tokens</h2>  <p>We often need to make API calls to secured services. To do this we need to go through some form of authorization / authentication flow where we get an access token from (a bearer token for example). That token needs to be passed in with every API call we make. Since we’re now using a single instance for our HttpClient, it would be nice to specify the token once and be done with it. This an easily be done by using the default headers. HttpClient contains a collection of headers that it will use with every call it makes. This is how you add a Bearer token for example:</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/2eead7b195262eab1e3a.js"></script>  <h2>Use ConfigureAwait(false)</h2>  <p>HttpClient is an async library. This means that we usually use this in a method that returns either Task or Task&lt;T&gt;. This also means that if you don’t use ConfigureAwait(false) that you’ll create quite a lot of context switching. When you await an async method, and don’t specify ConfigureAwait(false), the method will do it’s thing on the thread pool and switch back to the caller’s context when finished. This is exactly the behavior that you want when you request a webresult and immediately put the data into a property that is bound against, since binding happens on the UI thread. But this is not what we want when we’re executing code in a library or in a service class, so that’s where we’ll use ConfigureAwait(false).</p>  <p>Let’s say, for example, that we have a method to fetch all resources as a JSON string. The correct way of using ConfigureAwait(false) would be:</p> <script type="text/javascript" src="https://gist.github.com/NicoVermeir/5e899755969f678b5b5e.js"></script>  <p>The FetchData method doesn’t use ConfigureAwait(false) because it needs to return to the caller context. The caller context here is the UI thread. The property that the returned value is being set to will trigger a change notification, so we need to be on the UI thread.</p>  <p>The FetchAllResources method has two calls that are awaited, by not returning to caller context in that method we prevent two context switches to occur.</p>  <h2>(Xamarin only) use ModernHttpClient</h2>  <p>Xamarin allows us to write iOS and Android applications in C#. We can use the HttpClient for that but we'd be using an abstraction of the lowest common denominator of both platforms. If you use <a href="https://github.com/paulcbetts/ModernHttpClient" target="_blank">ModernHttpClient </a>on those platforms instead, you will get the full networking stack of the respective platforms. (thanks for reminding me @Depechie)</p>  <h2>Conclusion</h2>  <p>In this post I discussed some techniques with using HttpClient to fetch data in mobile applications that I’ve picked up over the years. As I’ve mentioned in the disclaimer, this is what I’m doing today and what feels right to me. Feel free to let me know if you do things another way, if you can convince me that your way is better, I will have learned something and will update the post accordingly <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_33.png" />.</p>]]></content>
      <post-name type="text"><![CDATA[HttpClient in mobile apps]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="a85e1e41-6bed-4b92-91d0-1ffe0af5986f" />
      </categories>
    </post>
    <post id="ee776ab0-d5ad-4ef6-870f-728dc86706f3" date-created="2015-04-02T20:44:32" date-modified="2015-04-02T20:44:32" approved="true" post-url="/blog/post/2015/04/02/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Xamarin Forms Bindable Wrappanel]]></title>
      <content type="text"><![CDATA[<p>A wrappanel is something XAML developers are very familiar with. It’s a panel that orders its children either horizontally or vertically but when the children reach the border, the panel wraps to the next row or column. </p>  <p>Xamarin Forms currently does not have a default implementation for something similar so I set out to find one online. To my surprise it took quite some time to find something (guess I’m spoiled by the awesome toolkits we have as Windows app devs), eventually I found the <a href="https://github.com/conceptdev/xamarin-forms-samples/blob/145a43fb6153fc069eeb99d86f0e219ad6d8fcac/Evolve13/Evolve13/Controls/WrapLayout.cs" target="_blank">WrapLayout.</a></p>  <p>The WrapLayout works but had a disadvantage, it didn’t have an ItemsSource or DataTemplate property but I did have a solid foundation, so I went to expand the implementation.</p>  <p>I started by creating a bindable property for itemssource and one for item template. In MS XAML we would use Dependency properties, in Xamarin XAML it’s called BindableProperty.</p>  <div id="codeSnippetWrapper" style="font-size: 8pt; overflow: auto; cursor: text; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; width: 97.5%; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; border-left: silver 1px solid; margin: 20px 0px 10px; line-height: 12pt; padding-right: 4px; max-height: 200px; background-color: #f4f4f4">   <div id="codeSnippet" style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4">     <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #008000">/// &lt;summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> <span style="color: #008000">/// Backing Storage for the Spacing property</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum3" style="color: #606060">   3:</span> <span style="color: #008000">/// &lt;/summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span> <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> BindableProperty ItemTemplateProperty =</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     BindableProperty.Create&lt;AwesomeWrappanel, DataTemplate&gt;(w =&gt; w.ItemTemplate, <span style="color: #0000ff">null</span>,</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>         propertyChanged: (bindable, oldvalue, newvalue) =&gt; ((AwesomeWrappanel)bindable).OnSizeChanged());</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span> <span style="color: #008000">/// &lt;summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum9" style="color: #606060">   9:</span> <span style="color: #008000">/// Spacing added between elements (both directions)</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span> <span style="color: #008000">/// &lt;/summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum11" style="color: #606060">  11:</span> <span style="color: #008000">/// &lt;value&gt;The spacing.&lt;/value&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span> <span style="color: #0000ff">public</span> DataTemplate ItemTemplate</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum13" style="color: #606060">  13:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum14" style="color: #606060">  14:</span>     get { <span style="color: #0000ff">return</span> (DataTemplate)GetValue(ItemTemplateProperty); }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum15" style="color: #606060">  15:</span>     set { SetValue(ItemTemplateProperty, <span style="color: #0000ff">value</span>); }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum16" style="color: #606060">  16:</span> }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum17" style="color: #606060">  17:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum18" style="color: #606060">  18:</span> <span style="color: #008000">/// &lt;summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum19" style="color: #606060">  19:</span> <span style="color: #008000">/// Backing Storage for the Spacing property</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum20" style="color: #606060">  20:</span> <span style="color: #008000">/// &lt;/summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum21" style="color: #606060">  21:</span> <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> BindableProperty ItemsSourceProperty =</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum22" style="color: #606060">  22:</span>     BindableProperty.Create&lt;AwesomeWrappanel, IEnumerable&gt;(w =&gt; w.ItemsSource, <span style="color: #0000ff">null</span>,</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum23" style="color: #606060">  23:</span>         propertyChanged: ItemsSource_OnPropertyChanged);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum24" style="color: #606060">  24:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum25" style="color: #606060">  25:</span> <span style="color: #008000">/// &lt;summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum26" style="color: #606060">  26:</span> <span style="color: #008000">/// Spacing added between elements (both directions)</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum27" style="color: #606060">  27:</span> <span style="color: #008000">/// &lt;/summary&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum28" style="color: #606060">  28:</span> <span style="color: #008000">/// &lt;value&gt;The spacing.&lt;/value&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum29" style="color: #606060">  29:</span> <span style="color: #0000ff">public</span> IEnumerable ItemsSource</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum30" style="color: #606060">  30:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum31" style="color: #606060">  31:</span>     get { <span style="color: #0000ff">return</span> (IEnumerable)GetValue(ItemsSourceProperty); }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum32" style="color: #606060">  32:</span>     set { SetValue(ItemsSourceProperty, <span style="color: #0000ff">value</span>); }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum33" style="color: #606060">  33:</span> }</pre>
<!--CRLF--></div>
</div>

<p>ItemTemplate is a property of type DataTemplate, ItemSource is an IEnumerable (the non-generic version). So far so good, next up is adding some logic to add the itemsource items as children of the Layout. Since the wrappanel has Layout&lt;T&gt; as a base there is no itemsource from the underlying control.</p>

<div id="codeSnippetWrapper" style="font-size: 8pt; overflow: auto; cursor: text; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; width: 97.5%; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; border-left: silver 1px solid; margin: 20px 0px 10px; line-height: 12pt; padding-right: 4px; max-height: 200px; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4">
    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> <span style="color: #0000ff">void</span> OnCollectionChanged(<span style="color: #0000ff">object</span> sender, NotifyCollectionChangedEventArgs args)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     <span style="color: #0000ff">foreach</span> (<span style="color: #0000ff">object</span> item <span style="color: #0000ff">in</span> args.NewItems)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>     {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>         var child = ItemTemplate.CreateContent() <span style="color: #0000ff">as</span> View;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>         <span style="color: #0000ff">if</span> (child == <span style="color: #0000ff">null</span>)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>             <span style="color: #0000ff">return</span>;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>         child.BindingContext = item;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>         Children.Add(child);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>     }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span> }</pre>
<!--CRLF--></div>
</div>

<p>We’re going to respond to collection changed events, hoping that whoever uses the control binds to a collection that implements INotifyCollectionChanged, like the infamous ObservableCollection&lt;T&gt;. We’re creating a View from the DataTemplate for every newly added item, set the BindingContext to the item itself and add it to the Children collection. The binding framework will take care of all the rest.</p>

<p>One step left, we need to add an event handler for the CollectionChanged event. We do this in the property changed callback of the ItemSource bindable property</p>

<div id="codeSnippetWrapper" style="font-size: 8pt; overflow: auto; cursor: text; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; width: 97.5%; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; border-left: silver 1px solid; margin: 20px 0px 10px; line-height: 12pt; padding-right: 4px; max-height: 200px; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4">
    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> ItemsSource_OnPropertyChanged(BindableObject bindable, IEnumerable oldvalue, IEnumerable newvalue)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     <span style="color: #0000ff">if</span> (oldvalue != <span style="color: #0000ff">null</span>)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>     {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>         var coll = (INotifyCollectionChanged)oldvalue;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>         <span style="color: #008000">// Unsubscribe from CollectionChanged on the old collection</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>         coll.CollectionChanged -= ItemsSource_OnItemChanged;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>     }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>     <span style="color: #0000ff">if</span> (newvalue != <span style="color: #0000ff">null</span>)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>     {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span>         var coll = (INotifyCollectionChanged)newvalue;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum13" style="color: #606060">  13:</span>         <span style="color: #008000">// Subscribe to CollectionChanged on the new collection</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum14" style="color: #606060">  14:</span>         coll.CollectionChanged += ItemsSource_OnItemChanged;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum15" style="color: #606060">  15:</span>     }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum16" style="color: #606060">  16:</span> }</pre>
<!--CRLF--></div>
</div>

<p>If there’s a previous instance we disconnect from its event, afterwards we try to cast the itemsource to INotifyCollectionChanged, if that succeeds we know there’s a collection changed event we can hook into. One problem here, this is all static but the properties we need to use in the event handler are not so we need to find a way to get from static to non-static code, events to the rescue!</p>

<p>I added a static event, cool thing about those is that the event handlers can be non-static.</p>

<div id="codeSnippetWrapper" style="font-size: 8pt; overflow: auto; cursor: text; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; width: 97.5%; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; border-left: silver 1px solid; margin: 20px 0px 10px; line-height: 12pt; padding-right: 4px; max-height: 200px; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4">
    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">event</span> EventHandler&lt;NotifyCollectionChangedEventArgs&gt; _collectionChanged;</pre>
<!--CRLF--></div>
</div>

<p>Used the constructor to hook up the handler</p>

<div id="codeSnippetWrapper" style="font-size: 8pt; overflow: auto; cursor: text; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; width: 97.5%; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; border-left: silver 1px solid; margin: 20px 0px 10px; line-height: 12pt; padding-right: 4px; max-height: 200px; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4">
    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">public</span> AwesomeWrappanel()</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     _collectionChanged += OnCollectionChanged;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span> }</pre>
<!--CRLF--></div>
</div>



<p>And that’s it! The handler method is the one we discussed a bit earlier, where the items in the itemsource are converted into Children elements.</p>

<p>Here’s how to use it in XAML</p>

<div id="codeSnippetWrapper" style="font-size: 8pt; overflow: auto; cursor: text; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; width: 97.5%; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; border-left: silver 1px solid; margin: 20px 0px 10px; line-height: 12pt; padding-right: 4px; max-height: 200px; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4">
    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">&lt;</span><span style="color: #800000">controls:AwesomeWrappanel</span> <span style="color: #ff0000">ItemsSource</span><span style="color: #0000ff">=&quot;{Binding Persons}&quot;</span> <span style="color: #ff0000">Orientation</span><span style="color: #0000ff">=&quot;Horizontal&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">controls:AwesomeWrappanel.ItemTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">StackLayout</span> <span style="color: #ff0000">BackgroundColor</span><span style="color: #0000ff">=&quot;Red&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>                 <span style="color: #0000ff">&lt;</span><span style="color: #800000">Label</span> <span style="color: #ff0000">Text</span><span style="color: #0000ff">=&quot;{Binding Name}&quot;</span> <span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>                 <span style="color: #0000ff">&lt;</span><span style="color: #800000">Label</span> <span style="color: #ff0000">Text</span><span style="color: #0000ff">=&quot;{Binding Age}&quot;</span> <span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>             <span style="color: #0000ff">&lt;/</span><span style="color: #800000">StackLayout</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>         <span style="color: #0000ff">&lt;/</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">controls:AwesomeWrappanel.ItemTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; font-size: 8pt; overflow: visible; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span> <span style="color: #0000ff">&lt;/</span><span style="color: #800000">controls:AwesomeWrappanel</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF--></div>
</div>

<p>A quick screenshot of the result:</p>

<p><a href="http://i58.tinypic.com/2coiy5h.jpg" target="_blank"><img src="http://i58.tinypic.com/2coiy5h.jpg" width="77" height="128" /></a></p>

<p>A demo project can be found on my <a href="http://1drv.ms/19NfmAJ" target="_blank">OneDrive</a> or see this <a href="https://gist.github.com/NicoVermeir/7ffb34ebd639ed958382" target="_blank">GitHub Gist</a> for the Wrappanel class.</p>

<p>Happy coding!</p>]]></content>
      <post-name type="text"><![CDATA[Xamarin Forms Bindable Wrappanel]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="a85e1e41-6bed-4b92-91d0-1ffe0af5986f" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
      </categories>
    </post>
    <post id="2aa9aa7e-a2bf-4b05-a32d-442ae4e2a8b2" date-created="2014-11-12T11:51:53" date-modified="2014-11-12T11:51:53" approved="true" post-url="/blog/post/2014/11/12/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Grid column behavior–Xamarin XAML vs MS XAML]]></title>
      <content type="text"><![CDATA[<p>There’s a small detail difference in how rows and columns in a Grid behave in Xamarin Forms vs Microsoft XAML. A small difference but with quite a big impact. Look at the following XAML snippet (Microsoft XAML)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:26940fa3-9d52-4202-bea3-f05c7f957601" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> Background</span><span style="background:#ffffff;color:#0000ff">=&quot;Red&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;50&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;*&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span><span style="background:#ffffff;color:#ff0000"> Background</span><span style="background:#ffffff;color:#0000ff">=&quot;Blue&quot;&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;Auto&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;300&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>At runtime this looks like:</p>  <p><a href="http://i59.tinypic.com/117uuu1.jpg" target="_blank"><img src="http://i59.tinypic.com/117uuu1.jpg" width="173" height="288" /></a></p>  <p>Exactly what we as seasoned XAML developers would expect.</p>  <p>Converted to Xamarin Forms XAML this turns into:</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c27ad6d1-5a72-4030-9449-13da70d81666" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">BackgroundColor</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Red</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">50</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">*</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff"></span></li> <li>  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Grid.Row</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">1</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">BackgroundColor</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Blue</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>      <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Auto</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">      <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">300</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Only difference is the property name to set the background color. However, if we look at this at runtime we see a completely different story.</p>  <p><a href="http://i61.tinypic.com/2503va1.jpg" target="_blank"><img src="http://i61.tinypic.com/2503va1.jpg" width="225" height="339" /></a></p>  <p>It looks like the inner Grid isn’t rendered at all. But let’s try to add a Label to the inner Grid.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5a1786d5-720c-45e3-9f35-55bb318ce59c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">BackgroundColor</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Red</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">50</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">*</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff"></span></li> <li>  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Grid.Row</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">1</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">BackgroundColor</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Blue</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>      <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Auto</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">      <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">300</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Label</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Text</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Hello Xamarin!</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p><a href="http://i57.tinypic.com/sctcsp.jpg" target="_blank"><img src="http://i57.tinypic.com/sctcsp.jpg" width="241" height="364" /></a></p>  <p>So what exactly is going on here? The inner Grid (the blue one) doesn’t specify any columns, that means that by default there’s only one column available. In Microsoft XAML the width of that default column is set to “*” so it takes up all available space. In Xamarin Forms that width is set to “Auto” so it only takes up the space it needs. A subtle difference with a big impact.</p>  <p>To fix this, add a column with “*” as width</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c3f370c0-3163-47c6-8ef8-a5541dcf7e97" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">BackgroundColor</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Red</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">50</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">*</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.ColumnDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ColumnDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Width</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">*</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.ColumnDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>  <span style="background:#ffffff;color:#0000ff"></span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Grid.Row</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">1</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">BackgroundColor</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Blue</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">      <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Auto</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>      <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">Height</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">300</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>result:</p>  <p><a href="http://i57.tinypic.com/rc9d1g.jpg" target="_blank"><img src="http://i57.tinypic.com/rc9d1g.jpg" width="285" height="430" /></a></p>  <h2>Conclusion</h2>  <p>In this post I’ve shown a difference in implementation between Xamarin Forms XAML and Microsoft XAML and how to fix it.</p>  <p>Note that this sample is based on Xamarin Forms 1.2. Xamarin has stated that they will change the implementation in Forms 1.3 to reflect the Microsoft implementation.</p>]]></content>
      <post-name type="text"><![CDATA[Grid column behavior–Xamarin XAML vs MS XAML]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="a85e1e41-6bed-4b92-91d0-1ffe0af5986f" />
      </categories>
    </post>
    <post id="5b0accc7-0b27-407f-b885-20bcd1e4142e" date-created="2014-10-21T08:06:06" date-modified="2014-10-21T08:06:06" approved="true" post-url="/blog/post/2014/10/21/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[LowlandsWPDev 2014 slides & demos]]></title>
      <content type="text"><![CDATA[<p>Last weekend I had the distinct honor and pleasure of co-organizing and speaking at an international Windows Platform developer event. Lowlands WP dev 2014 was a joint venture between the Dutch and the Belgian WP communities and it was awesome!</p>  <p>The slides and demos for my session on Background tasks can be found here:</p>  <p><a href="http://1drv.ms/ZMfdIQ" target="_blank">Demos</a></p> <iframe style="margin-bottom: 5px; max-width: 100%; border-top: #ccc 1px solid; border-right: #ccc 1px solid; border-bottom: #ccc 1px solid; border-left: #ccc 1px solid" height="355" marginheight="0" src="//www.slideshare.net/slideshow/embed_code/40524896" frameborder="0" width="425" marginwidth="0" scrolling="no" allowfullscreen="allowfullscreen"> </iframe>  <div style="margin-bottom: 5px"><strong><a title="LowlandsWPDev 2014 - Background tasks in universal apps" href="//www.slideshare.net/nicovermeir/presentatie-40524896" target="_blank">LowlandsWPDev 2014 - Background tasks in universal apps</a> </strong>from <strong><a href="//www.slideshare.net/nicovermeir" target="_blank">Nico Vermeir</a></strong> </div>  <div style="margin-bottom: 5px">&#160;</div>  <div style="margin-bottom: 5px">PIctures of the event itself can be found <a href="http://1drv.ms/1rVFxGN" target="_blank">here</a></div>]]></content>
      <post-name type="text"><![CDATA[LowlandsWPDev 2014 slides & demos]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="f016512c-1ad9-4a28-ab23-13e5ef3086b7" />
        <category ref="e96ada6a-e768-4392-a18e-c2f0d6f81016" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="a1f78b79-1ecd-4e89-8a7a-92a6ea0d4b1b" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="b33bdf3d-f14a-4fb6-8e0f-b6d4346d0e5f" date-created="2014-10-21T10:49:59" date-modified="2014-10-21T10:49:59" approved="true" url="http://www.silverlightshow.net/news/LowlandsWPDev-2014-slides-demos.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="aa61b425-c9a7-46ca-8650-3005139330a3" date-created="2014-07-10T14:34:24" date-modified="2014-07-10T14:34:24" approved="true" post-url="/blog/post/2014/07/10/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[A practical guide to MVVM (Light)–Part 2]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.spikie.be/blog/post/2014/06/30/.aspx" target="_blank">A practical guide to MVVM (Light) – Part 1</a></p>  <p>In part 1 I’ve shown you how to setup a new Windows Phone project with MVVM Light, how to hookup everything and we’ve seen what databinding is and how it works. In this part we’re going to build on that same project, delving a bit deeper into MVVM in a practical way.</p>  <h2>Intro</h2>  <p>In part 2 we’ll have a look at how to navigate from a list page, like the one we’ve created in part 1, to a detail page. We’ll need to inform the viewmodel on what item was clicked so that it can fetch more detailed information from the datastore. We’ll also have a look at value converters, a feature not really MVVM related but one that’s really important so I’m including it here anyway.</p>  <h2>Navigation</h2>  <p>There are a few ways to get navigation done in a Windows Phone app. You can use a NavigationService class for example. A class that can get injected via SimpleIoc and that has a .Navigate function, the <a href="http://cimbalino.org/" target="_blank">Cimbalino Toolkit</a> has one build-in for example. One other way to do navigation without delving into code-behind code in the view is by using Behaviors and Actions in XAML. Don’t worry, you don’t need to remember the exact syntax as long as you have Blend. </p>  <p>Open up the MainPage.xaml of our Part 1 project in Blend and have a look at the Assets Tab. (Quick tip: if you want to open a certain page in Blend, right-click it in Visual Studio and select “Open in Blend”, this also works for opening a page from Blend in Visual Studio).</p>  <p><a href="http://i60.tinypic.com/107nyfs.jpg" target="_blank"><img src="http://i60.tinypic.com/107nyfs.jpg" width="226" height="232" /></a></p>  <p>In the Behaviors section you’ll find a bunch of Actions and Behaviors. An interesting one here is the NavigateToPageAction, drag and drop that one onto the ListBox. You’ll notice that the Action has attached itself to the ListBox if you have a look at the Objects &amp; Timeline pane.</p>  <p><a href="http://i62.tinypic.com/15wl4xf.jpg" target="_blank"><img src="http://i62.tinypic.com/15wl4xf.jpg" width="256" height="53" /></a></p>  <p>Before we can navigate we need to create a new page, add a page called DetailPage.xaml to the View folder of the project. Creating the page can be done from either Blend or Visual Studio. After creating the DetailPage, go back to MainPage in Blend and select the NavigateToPageAction that’s attached to the Listbox in the Objects &amp; Timeline pane. Go to the properties.</p>  <p><a href="http://i59.tinypic.com/166ix50.jpg" target="_blank"><img src="http://i59.tinypic.com/166ix50.jpg" width="170" height="266" /></a></p>  <p>You’ll see here that the action contains a trigger. There we can select what event from the Listbox will trigger the action, set this to SelectionChanged. In the dropdown for TargetPage you should see MainPage and DetailPage (and any other pages you might have created), set it to DetailPage and run the app. Click on an item and you’ll see that the app navigates to the detailpage. This is what the action looks like in XAML.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8191f465-e10c-4e52-aefd-a333eb653a76" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PersonTemplate}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#ff0000"> EventName</span><span style="background:#ffffff;color:#0000ff">=&quot;SelectionChanged&quot;&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ec</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">NavigateToPageAction</span><span style="background:#ffffff;color:#ff0000"> TargetPage</span><span style="background:#ffffff;color:#0000ff">=&quot;/View/DetailPage.xaml&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <h2>Loading detailed data for clicked item</h2>  <p>When we select an item we navigate to a detail page. It would be nice to effectively show all the details. When using a ListBox this is pretty easy. We can just define a property on the viewmodel and bind the ListBox’s SelectedItem property to the property on the viewmodel. The property could look something like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d9c25d1c-c936-4e74-b1df-e5c5a7a8dfb7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPerson; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPerson == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">_selectedPerson = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">; </span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedPerson);</span></li> <li>        <span style="background:#ffffff;color:#000000">LoadDetails();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>The binding on the ListBox would look like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b30ed17a-0bb7-4939-81de-0b136f75670f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PersonTemplate}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPerson</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li style="background: #f3f3f3">                               <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;&gt;</span></li> </ol> </div> </div> </div>  <p>Notice that we have to specify that this is a two-way binding. If we don’t, the property will not get updated from the view. Databinding by default is OneWay, from the viewmodel to the view.</p>  <p>While this is a valid way of working, it has some issues.</p>  <ul>   <li> LongListSelector doesn’t support binding to SelectedItem (I described workarounds for this <a href="http://www.spikie.be/blog/post/2013/08/30/.aspx" target="_blank">here</a> and <a href="http://www.spikie.be/blog/post/2014/01/10/.aspx" target="_blank">here</a>)</li>    <li> The DetailPage needs to have MainViewModel as datacontext, which is possible and allowed but often this means that a viewmodel turns into a superclass that handles the datacontext for every view.</li> </ul>  <p>On to the next possibility we go!</p>  <h2>EventToCommand</h2>  <p>The way of passing the selecteditem from the view to the viewmodel and to the next viewmodel I’m about to describe takes a bit more setup than the previous part. However, while it is a bit more work, it’s my preferred way of working. To me this feels like the “MVVM way” but use whatever feels most comfortable for you.</p>  <p>Go into Blend and delete the NavigateToPageAction that is still attached to the ListBox. Go back to the Assets pane, to the list of Behaviors. You’ll find that in the list is an EventToCommand behavior. This allows us to hook up events fired by controls in the view to trigger certain actions on the viewmodel. Drag &amp; drop the EventToCommand onto the ListBox.</p>  <p>Before specifying the target command for the behavior, we’ll have to add one to the viewmodel first. Windows Phone has an interface called ICommand that we can use for binding. MVVM Light comes with two implementations of ICommand called RelayCommand and RelayCommand&lt;T&gt;. We’re going to use the generic version RelayCommand&lt;T&gt; because this way we can get the event arguments into our viewmodel.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d6b78795-2a8a-481f-b19d-bb9ef2a4cca7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; _selectionChangedCommand;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; SelectionChangedCommand</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectionChangedCommand ??</span></li> <li style="background: #f3f3f3">               <span style="background:#ffffff;color:#000000">(_selectionChangedCommand = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt;(OnSelectionChanged));</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>When using the generic version of RelayCommand we specify the type of T as the type of eventargs we’re expecting. Note that this can also be a string that’s passed in as commandparameter for example when binding to a button’s command property.</p>  <p>SIDENOTE – the ?? operator: If you’ve never seen the ?? operator before, it checks if whatever’s on its leftside is not null, if it is it executes whatever’s on its rightside. In this case the rightside will only get executed the very first time the command is called, that’s when the private field is instantiated.</p>  <p>the parameter passed into the RelayCommand&lt;T&gt; constructor is the action that we’ll be executing when the command is called.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:54f93d22-0f05-49ba-a049-251755e60fb7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">throw</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> System.</span><span style="background:#ffffff;color:#00008b">NotImplementedException</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>We’ll complete this in a minute, just leave it like this to make the application compile.</p>  <p>Bind the EventToCommand Command property to the RelayCommand either through Blend or in XAML. Make sure to check the PassEventArgsToCommand checkbox when going via Blend. This is what the XAML should look like.</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:36e77443-4ea3-4504-997a-bbb6dea6dbd4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PersonTemplate}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#ff0000">ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#ff0000"> EventName</span><span style="background:#ffffff;color:#0000ff">=&quot;SelectionChanged&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Command</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventToCommand</span><span style="background:#ffffff;color:#ff0000"> PassEventArgsToCommand</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectionChangedCommand</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=OneWay}&quot;/&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>No more SelectedItem binding. If we place a breakpoint in the OnSelectionChanged method and check the parameter you should see the selected item in there.</p>  <p><a href="http://i58.tinypic.com/21a05fc.jpg" target="_blank"><img src="http://i58.tinypic.com/21a05fc.jpg" width="609" height="117" /></a></p>  <p>So far, we’re using the controls their events, using a behavior to pass the eventhandler to a command on our ViewModel. No code behind required, clean MVVM setup. The next step is to navigate to another page and pass the selected item to another viewmodel. Let’s start by navigating.</p>  <h2>Navigating via the ViewModel</h2>  <p>I’ve mentioned before that navigating from within the viewmodel can be done by using a NavigationService. It’s time to do just that. A NavigationService is not included in Windows Phone so we’ll either need to write one or use an existing one. I’m going to do the latter and use an existing one.</p>  <p>Use either NuGet or the Package manager console to add the Cimbalino Windows Phone toolkit to the project</p>  <p><strong><font size="2">Install-Package Cimbalino.Phone.Toolkit </font></strong></p>  <p>Now it’s time to revisit the ViewModelLocator. Remember SimpleIoc? We used the ViewModelLocator to register services and use constructor injection to inject those services into our viewmodels. First add a using statement to the ViewModelLocator</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e19cf7d0-1167-477b-ad14-f08a5c93b2a0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> Cimbalino.Phone.Toolkit.Services;</span></li> </ol> </div> </div> </div>  <p>Next, register the NavigationService in SimpleIoc. (line 14)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e9a72927-5b9d-405c-acfd-b85c4f395190" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DesignDataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Back to the MainViewModel, we add a new parameter to its constructor.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fbe57458-5455-4552-86a5-258620a38e55" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService, </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService)</span></li> <li><span style="background:#ffffff;color:#000000"> {</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> </ol> </div> </div> </div>  <p>Using the NavigationService is pretty easy.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:50aadc50-9cec-48a5-9be1-108e60d6bc4b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#a31515">&quot;/View/DetailPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Do be careful with the path to the page, it’s a string so no intellisense. If the page is in a folder make sure to start with “/”. Run the app, click an item. The app should navigate to the DetailPage, just like we had before. Time to add the PersonViewModel. Add a class named PersonViewModel and make it inherit ViewModelBase, that’s enough for now.</p>  <p>Every new viewmodel in an MVVM Light application needs to be added to the ViewModelLocator. We need to register the viewmodel in SimpleIoc and create a property to allow databinding. First register the viewmodel in the ViewModelLocator’s constructor</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e1b6c83d-75f3-44fa-8158-cb3d3f17d868" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> </ol> </div> </div> </div>  <p>Next is the property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aa25ae06-c874-419a-a9ae-d4592ba8a985" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000"> Person</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.Current.GetInstance&lt;</span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Now we can set the DetailPage’s datacontext to the PersonViewModel by adding this to the opening tag of the page.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7726923c-efd0-47c2-bb33-a7fe612ad472" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Person</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li style="background: #f3f3f3">                     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> </ol> </div> </div> </div>  <p>For your reference, here’s the complete tag</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fcd2b402-05c4-408b-979f-ef0960c20621" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;MvvmDemo.View.DetailPage&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">d</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">phone</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Person</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li>                     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">FontFamily</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontFamilyNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">FontSize</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontSizeNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneForegroundBrush}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">Orientation</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">SupportedOrientations</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">SystemTray.IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Ignorable</span><span style="background:#ffffff;color:#0000ff">=&quot;d&quot;&gt;</span></li> </ol> </div> </div> </div>  <h2>Messaging</h2>  <p>Now that we have two viewmodels, we need to setup a form of communication between them. Luckily for us, MVVM Light has something in place for this called the Messenger. The Messenger is a class that receives and delivers messages. One viewmodel subscribes for a certain message, the other viewmodel sends a message and the messenger makes sure it gets delivered nicely. The messenger can take any type and send it as a message, we could for example send an entire person, or the ID of a person and send it as an integer. But in a bigger app this could get complicated, imagine if 5 viewmodels start listening for integers but one is expecting the id of a product, another one expects the id of a person while a third one expects a result of some sorts. It would be a lot of work to get the subscribe / unsubscribe just right. That’s why I advice you to make it a habit to encapsulate the data in a special message class. Like for example to send our selected person over to the PersonViewModel.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4fa49ccd-61ca-4c26-a431-157177c5d4b7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PersonSelectedMessage</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">MessageBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> PersonSelectedMessage(</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> selectedPerson)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">SelectedPerson = selectedPerson;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As you can see, this is a really simple class with only one purpose: encapsulate a Person instance. The MessageBase baseclass is an MVVM Light class that contains some info about the sender and the target but I use this mainly to make the classes easier to recognize as MVVM Light messages. I also place all those message classes in a Messages folder in my project.</p>  <p>Let’s subscribe to this type of message from the PersonViewModel. First add a Person property to the PersonViewModel that we can bind to.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:dbef3bf0-af25-44b7-a3a6-591aafdd137c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> _selectedPerson;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPerson; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPerson == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_selectedPerson = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedPerson);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Then add this in the PersonViewModel constructor.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:04c9e306-bda1-4307-881b-e50b291e728f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> PersonViewModel()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonSelectedMessage</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, msg =&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">SelectedPerson = msg.SelectedPerson;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">});</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>This registers our current instance of PersonViewModel to receive messages of the PersonSelectedMessage type. We will send this message from the MainViewModel in the OnSelectionChanged method that fires when selecting a person in the ListBox.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d1845304-213b-4a8b-b08e-8933ab29a8d0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#a31515">&quot;/View/DetailPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Send(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PersonSelectedMessage</span><span style="background:#ffffff;color:#000000">(args.AddedItems[0] </span><span style="background:#ffffff;color:#0000ff">as</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">));</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>If you set a breakpoint in the action that fires when a message arrives and try to select a person the first time it will probably fail. This is because the message departs before the PersonViewModel has had a chance to initialize and register for the message, it will be sent but it will never arrive. If you hit the back key back to the MainPage and select another person it will arrive because the PersonViewModel instance already exists and is listening to the message. The quickest (and easiest) way to fix this is to make sure that PersonViewModel is initialized when the app launches. We can use an overload of SimpleIoc’s register method for this. </p>  <p>In the ViewModelLocator, add true as a parameter to the registration</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:70983159-37fd-430b-8633-e3eabe341dbc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>This will initialize the class at the moment of registration and it will register itself as a subscriber for the PersonSelectedMessage. After binding the page title to SelectedPerson.Name and running the app this is the result:</p>  <p><a href="http://i59.tinypic.com/23rpg0w.jpg" target="_blank"><img src="http://i59.tinypic.com/23rpg0w.jpg" width="181" height="302" /></a></p>  <p>If this was a real application you would use the action of the messenger to fetch the detailed information of the selected item. DataBinding takes care of displaying the data on screen.</p>  <h2>Conclusion</h2>  <p>In this second part of my practical guide to MVVM Light I’ve discusses the way I usually work to select an item from a list, navigate to a detail page and fetch / show detailed information.</p>  <p>Some more MVVM related articles:</p>  <ul>   <li>&#160;<a href="http://www.spikie.be/blog/post/2013/04/12/10-things-you-might-have-missed-about-MVVM-Light.aspx">10 things you might have missed about MVVM Light</a></li>    <li>&#160;<a href="http://www.spikie.be/blog/post/2013/10/17/.aspx">ViewModelBackstack for when you navigate to the same page</a></li>    <li>&#160;<a href="http://www.galasoft.ch/mvvm/" target="_blank">MVVM Light Toolkit</a></li>    <li>&#160;<a href="http://pluralsight.com/training/Courses/TableOfContents/mvvm-light-toolkit-fundamentals" target="_blank">MVVM Light Toolkit fundamentals (Pluralsight)</a></li> </ul>  <p>Some more in depth IOC/DI articles:</p>  <ul>   <li>&#160;<a href="http://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver" target="_blank">An Absolute Beginner's Tutorial on Dependency Inversion Principle, Inversion of Control and Dependency Injection</a></li>    <li>&#160;<a href="http://www.kenneth-truyers.net/2013/05/12/the-n-layer-myth-and-basic-dependency-injection/" target="_blank">The N-layer myth and basic Dependency Injection</a></li>    <li>&#160;<a href="http://www.codeproject.com/Articles/29271/Design-pattern-Inversion-of-control-and-Dependency" target="_blank">Design pattern – Inversion of control and Dependency injection</a></li>    <li>&#160;<a href="http://martinfowler.com/articles/injection.html" target="_blank">Inversion of Control Containers and the Dependency Injection pattern</a></li>    <li>&#160;<a href="http://devlicio.us/blogs/billy_mccafferty/archive/2009/11/09/dependency-injection-101.aspx" target="_blank">Dependency Injection 101</a> </li> </ul>  <p>Feel free to ping me on Twitter (@NicoVermeir) should you have any questions.</p>  <p>The code for this second part can be found on <a href="http://1drv.ms/1oJKvsa" target="_blank">OneDrive</a>.</p>]]></content>
      <post-name type="text"><![CDATA[A practical guide to MVVM (Light)–Part 2]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="540177e8-fd15-4be6-b0ba-6f2c19913278" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="22302a23-f019-4a09-80a2-91b58db4d241" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="0963471c-34f3-4c22-8665-2a02ffa167ff" date-created="2014-07-11T11:54:16" date-modified="2014-07-11T11:54:16" approved="true" url="http://www.silverlightshow.net/news/A-practical-guide-to-MVVM-Light-Part-2.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="e31a2352-c43a-4805-9d27-e2dcaea9701f" date-created="2014-06-30T15:35:13" date-modified="2014-06-30T15:35:13" approved="true" post-url="/blog/post/2014/06/30/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[A practical guide to MVVM (Light)]]></title>
      <content type="text"><![CDATA[<p>You don’t have to look very far into the pits of the internet to find that there are still a lot of devs with questions on how to build a Windows / Windows Phone app with the MVVM pattern. In this article I’m going to explain my way of working. The libraries I use, how and why I use them. I hope this will clear some of the doubts others are having and helps you get on the right MVVM track.</p>  <h2>What is MVVM?</h2>  <p>Let’s start with walking through what MVVM is exactly. Feel free to skip this part if you already know because this has been discussed on almost every tech related website <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_32.png" /></p>  <p>Let’s start with a diagram.</p>  <p><a href="http://www.c-sharpcorner.com/UploadFile/yusufkaratoprak/Asp-Net-mvc-with-knockout-js/Images/MVVM_Relation.jpg" target="_blank"><img src="http://www.c-sharpcorner.com/UploadFile/yusufkaratoprak/Asp-Net-mvc-with-knockout-js/Images/MVVM_Relation.jpg" width="321" height="234" /></a>     <br /><a href="http://www.c-sharpcorner.com/UploadFile/yusufkaratoprak/Asp-Net-mvc-with-knockout-js/Images/MVVM_Relation.jpg" target="_blank">Source: c-sharpcorner.com</a></p>  <p>In MVVM there are three main parts, the Views, the Model and the ViewModels. The Model are just your basic POCO classes, nothing to fancy in there. The Views are your XAML files, the visual aspect of the application. The ViewModels are classes that get data from your data service classes and shape it into something the view is expecting.</p>  <p>Why these three parts? it’s a matter of seperation of concerns, the View doesn’t need to know where the data is coming from or in what format it’s delivered by the service. The only thing the View cares about is where it can get its data and it assumes that the data will be in the correct format. It gets that data from the ViewModel (or VM in short) through databinding. The View can make the VM do stuff by sending Commands its way, so View and ViewModel can interact with each other. The ViewModel reacts on those commands and requests data from the services, where that data comes from (in-memory, API, whatever, …) doesn’t matter for the VM, as long as it gets what it’s expecting.</p>  <p>Now, why would you use this? As mentioned before, it makes your code much cleaner by seperating the logic out of the View into the VM. It also makes the entire application much easier to unit test. You can just write tests against the ViewModels, since they are just normal .NET classes.</p>  <h2>The endless discussion of code behind</h2>  <p>There’s a small war among developers going on about MVVM. MVVM states that no code should exist in the code-behind of a view (for example MainPage.xaml.cs). Some people cling onto this statement, others take it as a “if you can”. </p>  <p>Here’s my opinion on the subject: MVVM is a design pattern, meaning that it’s a set of guidelines. Guidelines, as in “not set in stone”. Sometimes you need to jump through a lot of hoops to get something done in the VM while it’s much easier in the View. If you run into such a situation: decide if it’s worth spending time and research into the subject (and blog about it after you find the solution <img class="wlEmoticon wlEmoticon-winkingsmile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Knipogende emoticon" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-winkingsmile_1.png" />). Another situation is things that have to do with the view. Things like changing a state in the Visual State Manager when switching from landscape to portrait, this is something that you can take to the ViewModel but in my opinion the VSM is pure View business, it has nothing to do with the ViewModel so that’s something I typically put into code behind.</p>  <p>As you can tell, the discussion isn’t really worth it. Just do whatever feels right for you (if you’re working in a team, make sure everyone is on the same page about this).</p>  <h2>Let’s get started</h2>  <p>Enough chit-chat, let’s get to the practical side of things. For this article I’m going to go with a Windows Phone 8.1 Silverlight project but a lot of the stuff here is applicable to any XAML technology, even ranging back to Windows Phone 7.</p>  <p>We’ll start with a blank slate, a brand new project started from the Blank App template. First thing you need to do when developing an MVVM application is add your MVVM stuff, either by adding a framework like Caliburn or by adding a toolkit with helper classes like MVVM Light (or by building your own of course). My weapon of choice in MVVM is always MVVM Light. Why? Because it’s a toolkit rather than a framework, it leaves a lot of the responsibilities in the hand of the developer. Frameworks like Caliburn rely more on conventions and that’s something I personally do not like. Other people have other preferences over this, so choice whatever feels right for you. For this article I’m using MVVM Light.</p>  <p>Let’s start by adding MVVM Light to the project. As with any good library, it’s on NuGet. If you search for MVVM Light on NuGet you’ll get some results, so what to pick? (I’ve marked the official MVVM Light NuGet packages in the screenshot).</p>  <p><a href="http://i61.tinypic.com/213jeo8.jpg" target="_blank"><img src="http://i61.tinypic.com/213jeo8.jpg" width="382" height="245" /></a></p>    <p>Let’s go over them, top to bottom. The first one is the one I usually use. It adds the MVVM Light libraries to your project, creates a folder for the viewmodels, creates the MainViewModel and ViewModelLocator (more on this in a bit) and instantiates the ViewModelLocator in App.xaml. Quite a lot of work all done for you by the power of NuGet and PowerShell. The second NuGet package just adds the libraries to your project but it doesn’t create any folders or classes. The third package is the same as the second but as a Portable Class Library, use this one if you’re adding ViewModels in a PCL.</p>  <p>I usually go with the first one because of all the initial setup that occurs. Let’s add that package and have a look at the Solution Explorer.</p>  <p><a href="http://i61.tinypic.com/sxiwc4.jpg" target="_blank"><img src="http://i61.tinypic.com/sxiwc4.jpg" width="186" height="214" /></a></p>  <p>For starters, NuGet added three libraries to the project. Why three? The first one is the actual MVVM Light library, the second one contains a bunch of extras like EventToCommand and SimpleIOC. In case you’re wondering why these are in a separate library, and where that Microsoft.Practices.ServiceLocation lib comes from, here’s Laurent’s answer to that:</p>  <p><em>“The Extras assembly exists because EventToCommand requires a reference to System.Windows.Interactivity, while ButtonBaseExtensions, RelayCommand, Messenger etc do not need it. Some people are reluctant to add references to assemblies if they can avoid it. So for those people who don't need EventtoCommand, they onlu use the base assembly, and the others who want the whole program can add Extras.</em></p>  <p><em>Cheers, Laurent”     <br />Source: <a title="http://stackoverflow.com/questions/4740811/why-are-mvvmlight-command-and-mvvmlight-extras-wp7-both-needed" href="http://stackoverflow.com/questions/4740811/why-are-mvvmlight-command-and-mvvmlight-extras-wp7-both-needed">http://stackoverflow.com/questions/4740811/why-are-mvvmlight-command-and-mvvmlight-extras-wp7-both-needed</a></em></p>  <p>Let’s take a look at the generated code files, starting with MainViewModel (I removed some of the comments for brevity)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0167a75b-4a23-441e-982c-445e3f2f8737" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">namespace</span><span style="background:#ffffff;color:#000000"> MvvmDemo.ViewModel</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel()</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////if (IsInDesignMode)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Code runs in Blend --&gt; create design time data.</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////else</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Code runs &quot;for real&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Not much in there, but there doesn’t need to be. That’s what I like about MVVM Light, it keeps things simple and, well Light <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_32.png" />. ViewModels are defined by creating a class that inherits from ViewModelBase, the name of a ViewModel (or VM in short) doesn’t need to end in “ViewModel” but I tend to do this to make them recognizable. We’ll be discussing the piece of code that’s commented out in a bit.</p>  <p>Next up is the ViewModelLocator class (again, removed some comments for brevity).</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:445d575d-c6df-407f-8dd8-e0090307e067" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ViewModelLocator</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Initializes a new instance of the ViewModelLocator class.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////if (ViewModelBase.IsInDesignModeStatic)</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Create design time view services and models</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    SimpleIoc.Default.Register&lt;IDataService, DesignDataService&gt;();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////else</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Create run time view services and models</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000"> Main</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.Current.GetInstance&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Cleanup()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// </span><span style="background:#ffffff;color:#00008b">TODO Clear the ViewModels</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>So what is the ViewModelLocator? It’s the class that registers all the dataservices and viewmodels in the IOC container (if you don’t know what IOC is, read the next alinea, if you do know what it is you can skip the next part). The ViewModelLocator also provides properties for every ViewModel so we can easily bind a view to a viewmodel. The get part of these properties take the VM instance out of the IOC (again, read the next part for info on IOC) and returns it to the caller. Finally there’s a Cleanup method that you can use to cleanup viewmodels if you need to.</p>  <h2>SideStep: IOC</h2>  <p>Read this part if you’re not familiar with IOC, feel free to skip this part if you’ve already used IOC.   <br />IOC, or Inversion Of Control, is often used in conjunction with DI or dependency injection. IOC is a technique used to make applications easily extensible and to increase the modularity. These goals can be achieved by using techniques like the Factory Pattern or Dependency Injection. With IOC and DI we can register classes in a so called container. Then, whenever we need one of those registered classes we can fetch the instance from the container instead of instantiating a new one, basically creating a Singleton effect. The big difference with a Singleton is that we can have dependency injection. If one of the classes contains a constructor that takes, for example, a dataservice as parameter and that dataservice is also registered in the container, the DI will inject the dataservice instance into the class with the constructor that takes in a dataservice. More over, we can use interfaces to register classes into the container. If that same class from before takes IDataService as a parameter, the registered instance of a class that implements IDataService will get injected into the constructor. This allows for a more abstract way of working.</p>  <p>Note: this was a basic explanation for IOC / DI. If you really want to get the hang of it, research it and use it, you’ll get it in no time. Some quick links to get you started (with thanks to <a href="https://twitter.com/depechie" target="_blank">Glenn Versweyveld</a> for the links)</p>  <ul>   <li>&#160;<a href="http://devlicio.us/blogs/billy_mccafferty/archive/2009/11/09/dependency-injection-101.aspx" target="_blank">Dependency Injection 101</a> </li>    <li>&#160;<a href="http://martinfowler.com/articles/injection.html" target="_blank">Inversion of Control Containers and the Dependency Injection pattern</a></li>    <li>&#160;<a href="http://www.codeproject.com/Articles/29271/Design-pattern-Inversion-of-control-and-Dependency" target="_blank">Design pattern – Inversion of control and Dependency injection</a></li> </ul>  <h2>End of the sidestep: Marching on</h2>  <p>MVVM Light has a built in IOC/DI framework called SimpleIoc. It’s exactly as the name implies, a very simple, basic framework but it gets the job done. In case that it wouldn’t fulfill your needs or you feel more comfortable with, for example, AutoFac, it’s really easy to swap SimpleIoc out and another framework in. See my <a href="http://www.spikie.be/blog/post/2013/04/12/10-things-you-might-have-missed-about-MVVM-Light.aspx" target="_blank">“10 things you might have missed about MVVM Light”</a> article from last year for a quick sample.</p>  <p>Okay, final part of the MVVM Light Powershell magic is something that happened inside the App.xaml. A resource was added to the Application.Resources</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:261b4ca0-f997-462c-8955-bc9ce87273e5" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Application.Resources</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LocalizedStrings</span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">local</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:MvvmDemo&quot;</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Key</span><span style="background:#ffffff;color:#0000ff">=&quot;LocalizedStrings&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">vm</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ViewModelLocator</span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">vm</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:MvvmDemo.ViewModel&quot;</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Key</span><span style="background:#ffffff;color:#0000ff">=&quot;Locator&quot;</span></li> <li>                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> d</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">IsDataSource</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Application.Resources</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>The ViewModelLocator is added as an application resource, so it will get instantiated as soon as the application starts up. That means that all viewmodels and services are registered in the DI container right away. The resource is given a key so we can reference it when we set our datacontext in xaml.</p>  <h2>Moving the View</h2>  <p>MVVM Light puts the VM in the VM folder by default but the views are just hanging around in the project. If you don’t like this (as I do <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_32.png" />) you can add a View folder and move the MainPage into that folder. Once it’s moved I have the habit of changing the namespace of MainPage to reflect the folder structure. This needs to happen in two places, xaml and code behind. In xaml find this line (it should be at the top)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:405d97a0-9dbe-44b2-9400-1fb798c42e3f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;MvvmDemo.MainPage&quot;</span></li> </ol> </div> </div> </div>    <p>and change it to</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:44ac6775-2e61-49ca-a7df-596c2434fd31" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;MvvmDemo.View.MainPage&quot;</span></li> </ol> </div> </div> </div>  <p>In code behind change the namespace to </p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:eebf7b6c-110a-4069-83c4-8f8a106a8e30" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">namespace</span><span style="background:#ffffff;color:#000000"> MvvmDemo.View</span></li> </ol> </div> </div> </div>  <p>Right now, your application will compile perfectly but you will get a NavigationFailedException when launching. Open up the WMAppManifest.xml. On the Application UI tab is a textbox that says Navigation Page: MainPage.xaml. Navigating in Silverlight apps is still done using strings, so the compiler is happy here but at runtime the navigation target isn’t found at this location. Change it from MainPage.xaml to /View/MainPage.xaml and see if it works. If you entered the correct folder path the app should start.</p>  <h2>Hooking up the View</h2>  <p>Let’s get to the interesting part. We’re now ready to hook our view up on the viewmodel. This can be done from code behind or from XAML. I prefer the XAML way because it gives you some intellisense when binding to properties on the viewmodel, since the XAML designer knows of the datacontext if it’s defined in XAML.</p>  <p>This is what we need to add to the opening tag of a page to set the datacontext</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:57137759-629f-4f2c-b789-7bee0597d994" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Main</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> </ol> </div> </div> </div>  <p>This is the full tag for reference:</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:173696c0-4173-4310-ad8a-b0a21e6779c6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px; white-space: nowrap"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;MvvmDemo.View.MainPage&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">d</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">phone</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Main</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li>                                                 <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> FontFamily</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontFamilyNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> FontSize</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontSizeNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneForegroundBrush}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Orientation</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> SupportedOrientations</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">SystemTray.IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> mc</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Ignorable</span><span style="background:#ffffff;color:#0000ff">=&quot;d&quot;&gt;</span></li> </ol> </div> </div> </div>  <p>If you don’t want to do it from XAML, it’s very easy to set it via Blend as well. </p>  <p>Open MainPage.xaml in Blend. Select PhoneApplicationPage in the Objects &amp; Timeline pane.</p>  <p><img src="http://i59.tinypic.com/n5r9eu.jpg" /></p>  <p>In the properties pane, search for the DataContext Property and click on the white square next to it, select “Create databinding”</p>  <p><img src="http://i59.tinypic.com/2rnbi8m.jpg" /></p>  <p>In the dialog that will popup, you’ll see the Locator key that we declared in App.xaml, Blend can interpret those resources and help you with binding to them. Select the Locator and you’ll see the Main property that is defined inside the ViewModelLocator (remember, the property that gets the MainViewModel instance from the container and returns it to the caller). Select that property and click OK, your binding is set!</p>  <p><a href="http://i61.tinypic.com/30a6r84.jpg" target="_blank"><img src="http://i61.tinypic.com/30a6r84.jpg" width="329" height="312" /></a></p>  <p>Small thing about Blend: It’s AWESOME! period. If you don’t know how to use it, learn it. Learn to use it and you’ll automatically love it. Your apps will look much better and once you get the hang of using design time data you’ll get your design done much faster.</p>  <h2>Adding our first binding</h2>  <p>Let’s get some binding done! We’ll bind the title of the page to a property on the ViewModel just to get started. In the MainViewModel, Create a simple string autoproperty</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3729f2a1-6c61-4eae-94e3-a86b24768a57" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Title { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> </ol> </div> </div> </div>  <p>We’ll use the MainViewModel’s constructor to give this property some data. (line 3)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5c42dcf3-dbf5-4698-8ddf-081f6d4ab060" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">Title = </span><span style="background:#ffffff;color:#a31515">&quot;Hello World!&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////if (IsInDesignMode)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Code runs in Blend --&gt; create design time data.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////else</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Code runs &quot;for real&quot;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li><span style="background:#ffffff;color:#008000">}</span></li> </ol> </div> </div> </div>  <p>Now onto the view, find the TextBlock for the page title and add the binding statement to the Text attribute (this can be done from Blend, just like the datacontext property, select the textblock, find the text property and add data binding)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:91c1cd00-2276-4d0a-9bf5-54c3e92b3191" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;9,-7,0,0&quot;</span></li> <li style="background: #f3f3f3">          <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextTitle1Style}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>          <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Title}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> </ol> </div> </div> </div>  <p>The Text property now contains a Binding statement. This is always set between curly braces, followed by the word Binding and the name of the property we’re binding to. At runtime the CLR will try to find a property with that name in the datacontext of the TextBlock, since we’re not specifying a DataContext on the TextBlock it will take that of its parent control, that way we’ll finally reach the MainViewModel where the Title property is waiting for us. Run the app and behold the wonders of databinding in an MVVM scenario.</p>  <p><a href="http://i59.tinypic.com/2lx9zzq.jpg" target="_blank"><img src="http://i59.tinypic.com/2lx9zzq.jpg" width="117" height="195" /></a></p>    <p>Now this works but if we were to change the Title property as it is right now, it wouldn’t reflect on the page. A bound property isn’t monitored or polled for changes, we need to trigger some sort of event to tell the subscribers that a property has changed and that they need to refresh their binding. Usually this is done by implementing INotifyPropertyChanged and calling the OnPropertyChanged event in the property’s setter. In the case of MVVM the INotifyPropertyChanged interface is already implemented in the ViewModelBase class, so all we have left to do is raise the event (or call a method that raises the event, that method is called RaisePropertyChanged and sits in the ViewModelBase) from the property’s setter.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:28468d70-21f5-400c-8508-8adec4dd3dfc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> _title;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Title</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _title; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_title == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">_title = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; Title);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We check if the property has really changed to avoid refreshing bindings when it’s not needed, if it does change we raise the event. According to the INotifyPropertyChanged interface we need to pass the property name as a string. MVVM Light’s ViewModelBase has an overload that takes a Func&lt;string&gt; so we can rely on intellisense to get the name of the property right. And with this we have a real databinding that will update the view when changed. Also, if you open MainPage in Blend now, you’ll notice that the binding is executed in design time as well. That’s one of Blend’s biggest strengths.</p>  <h2>Using real fake data</h2>  <p>Okay, so we now have databinding all set up, our MVVM structure is in place. Let’s build something that resembles an actual app. Create a Model folder in your project and add a Person class to it.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2f316d72-6662-41e3-af6b-beddbed315d4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Picture { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> Age { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Name { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Company { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Email { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Phone { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Now to get some data I’ve used a website called <a href="http://www.json-generator.com/#" target="_blank">json-generator</a> to generate 15 instances of this class in Json format. You can download the JSON file I’ve used <a href="http://www.json-generator.com/api/json/get/cvoEdmwgzm?indent=2" target="_blank">here</a></p>  <p>I placed the json in a static field in a static public class so my dataservice can easily get to it. I use this to simulate what could be a REST call in a real application. (if you want to know more about creating and calling REST services, read <a href="http://www.spikie.be/blog/post/2014/03/28/.aspx" target="_blank">my article</a>)</p>  <p>Add a folder called Services to the project and add an interface called IDataService.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8389ad9c-78a3-4070-a05e-cb7611186d04" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">interface</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IDataService</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; GetAll();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; Get(</span><span style="background:#ffffff;color:#2b91af">Func</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">&gt; predicate);</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> GetByName(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> name);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The interface defines methods to fetch all the persons, to get a filtered set of persons by passing a predicate into a Where clause or fetch a specific person by name.</p>  <p>We’ll end up with two implementations of this interface. Let’s start with the first one, this one will be used at runtime and will query the actual service (the hardcoded JSON in this case, just assume it’s a call to a REST service). The first implementation is easy, the constructor fetches and deserializes the json. The methods then query that resultset.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:37dce63c-5178-4a26-92e7-c4a386ae4df6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataService</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">IDataService</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; _persons;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> DataService()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_persons = </span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.DeserializeObject&lt;</span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt;&gt;(Data.</span><span style="background:#ffffff;color:#2b91af">Data</span><span style="background:#ffffff;color:#000000">.Json);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; GetAll()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; Get(</span><span style="background:#ffffff;color:#2b91af">Func</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">&gt; predicate)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons.Where(predicate);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> GetByName(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> name)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons.FirstOrDefault(person =&gt; person.Name == name);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Very basic data service, but enough to get my point across. Now it’s time to revisit the ViewModelLocator. When you look at the constructor of the ViewModelLocator you’ll notice that it contains a block of code that’s commented out.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0e500e9a-f84f-48e3-a78e-bc473ea1dac7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////if (ViewModelBase.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Create design time view services and models</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    SimpleIoc.Default.Register&lt;IDataService, DesignDataService&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////else</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    // Create run time view services and models</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////    SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">////}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>That piece of code is exactly what we need. Why? Because it checks if the code is being executed in runtime or in design time. As I’ve mentioned before, the Blend and Visual Studio designers execute the code whenever a page is loaded into the designer. We can use that to hook up dummy data. The ViewModelBase class from MVVM Light contains a static boolean that tells us if we’re in design mode. We can use this to either register DataService in the container or a design time version of DataService (which we’ll build in a minute).</p>  <p>Uncomment the code so it looks like this (don’t worry about the DesignDataService error, the class doesn’t exist yet but it’s the next step.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d58cdd88-d75e-4b5b-92b6-8c944abf1e3a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#ff0000">DesignDataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In the Services folder, add a class called DesignDataService and make it implement IDataService.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f6dc7cb5-8fb8-49ec-9ba8-f108c4d503b4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DesignDataService</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">IDataService</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; _persons;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> DesignDataService()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_persons = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Random</span><span style="background:#ffffff;color:#000000"> rnd = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Random</span><span style="background:#ffffff;color:#000000">();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 0; i &lt; 10; i++)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> person = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">Age = rnd.Next(10, 60),</span></li> <li>                <span style="background:#ffffff;color:#000000">Company = </span><span style="background:#ffffff;color:#a31515">&quot;Design time company&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">Email = </span><span style="background:#ffffff;color:#a31515">&quot;design@time.com&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li>                <span style="background:#ffffff;color:#000000">Name = </span><span style="background:#ffffff;color:#a31515">&quot;Design time person &quot;</span><span style="background:#ffffff;color:#000000"> + i,</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">Phone = </span><span style="background:#ffffff;color:#a31515">&quot;+1 (846) 597-3140&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li>                <span style="background:#ffffff;color:#000000">Picture = </span><span style="background:#ffffff;color:#a31515">&quot;http://files.softicons.com/download/tv-movie-icons/doctor-who-icons-by-rich-d/png/48/Tardis%203.png&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_persons.Add(person);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; GetAll()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; Get(</span><span style="background:#ffffff;color:#2b91af">Func</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">&gt; predicate)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons.Where(predicate);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> GetByName(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> name)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons.First();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>I use a for loop to create 10 design time persons. Note that the GetByName method just returns the first person in the list. For design time data it doesn’t matter if the correct data is returned, we’re only using this data to get the visual aspect of the application right. Verify that the app still compiles and let’s get this thing injected.</p>  <p>Open the MainViewModel. Add a field for the IDataService and add IDataService as a parameter for the constructor.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d6d53db2-2a6f-4fbb-81e8-bfb640c11a9d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> _dataService;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService)</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_dataService = dataService;</span></li> <li>    <span style="background:#ffffff;color:#000000">Title = </span><span style="background:#ffffff;color:#a31515">&quot;Hello World!&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This is where constructor injection will come into play. SimpleIoc will inject the registered implementation if IDataService right here in the constructor, if you want to see this set a breakpoint in the constructor, open the app and inspect the parameter.</p>  <p><a href="http://i62.tinypic.com/99jcaq.jpg" target="_blank"><img src="http://i62.tinypic.com/99jcaq.jpg" width="402" height="44" /></a></p>  <p>Now I want a property that contains the persons and bind this to some sort of list element so we get a nice, scrollable overview of persons. The perfect collection for bindable properties is an ObservableCollection. It notifies subscribers whenever an item is added so that those newly added items are shown immediately. Add the property to the MainViewModel</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7007af39-4cd4-4b43-a3b6-d3c681f7d606" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; _persons;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; Persons</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_persons == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_persons = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; Persons);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>We’re going to use the constructor of the MainViewModel to get some data in.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:28f2a1af-b1d5-4589-aee0-231f1f26d8db" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_dataService = dataService;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">Title = </span><span style="background:#ffffff;color:#a31515">&quot;Hello World!&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; persons = _dataService.GetAll();</span></li> <li>    <span style="background:#ffffff;color:#000000">Persons = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt;(persons);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The constructor of ObservableCollection&lt;T&gt; has an overload that takes in an IEnumerable&lt;T&gt; that can be used to seed the collection. </p>  <h2>Blending it in</h2>  <p>Let’s dive into Blend and get that design time data to work. Open MainPage.xaml in Blend. In the Data tab in Blend you’ll notice that MainViewModel shows up as Data Context, if you expand the tree structure you’ll find your ObservableCollection (if you don’t see it, switch back to Visual Studio and Build the solution, Blend doesn’t always update unless you build the project). Take the Persons property there and drag/drop it onto the design view (make sure MainPage.xaml is opened in design). When dragging over the design you should see this message appear.</p>  <p><img src="http://i62.tinypic.com/22nfrc.jpg" width="220" height="57" /></p>  <p>Release the mouse button and a ListBox will be created and its ItemsSource wil lbe bound to that list on our MainViewModel. But it doesn’t look quite right.</p>  <p><img src="http://i61.tinypic.com/25t96ds.jpg" width="211" height="222" /></p>      <p>This is common in Blend and is easily fixed, right-click the ListBox, go to Layout and select “Reset all”</p>  <p><a href="http://i60.tinypic.com/2lasqkp.jpg" target="_blank"><img src="http://i60.tinypic.com/2lasqkp.jpg" width="211" height="316" /></a></p>  <p>Note: this is currently a ListBox, we are advised by Microsoft to use LongListSelector instead of ListBox for performance reasons. To change this, go into the xaml and change &lt;ListBox… to &lt;phone:LongListSelector.. Blend will keep working just like it’s doing now. For this article I’m just going to stick to ListBox but the way of working is the same.</p>  <p>We have a list of design time items now. Let’s run the app and see how it looks.</p>  <p><a href="http://i59.tinypic.com/2d91mhi.jpg" target="_blank"><img src="http://i59.tinypic.com/2d91mhi.jpg" width="212" height="353" /></a></p>  <p>Notice how the data is different? The ViewModelLocator has registered the real DataService into the container so we’re now getting our real data instead of the design time data.</p>  <p>This doesn’t look very well, let’s see what we can do to change that. Blend makes changing item templates really easy, right-click the Listbox &gt; “Edit Additional Templates” &gt; “Edit Generated items (ItemTemplate)” &gt; “Edit Current”</p>  <p><a href="http://i57.tinypic.com/2b8jv5.jpg" target="_blank"><img src="http://i57.tinypic.com/2b8jv5.jpg" width="346" height="43" /></a></p>  <p>Have a look at the Objects &amp; Timeline pane, you’ll see that it’s changed and shows the itemTemplate</p>  <p><a href="http://i58.tinypic.com/65bmfc.jpg" target="_blank"><img src="http://i58.tinypic.com/65bmfc.jpg" width="220" height="154" /></a></p>  <p>From here you can create your entire layout, drag and drop properties from the Data tab onto the elements to create databindings. After about a minute I came up with this result.</p>  <p><a href="http://i57.tinypic.com/2wc432f.jpg" target="_blank"><img src="http://i57.tinypic.com/2wc432f.jpg" width="219" height="239" /></a></p>  <p><a href="http://i58.tinypic.com/2vmwx9g.jpg" target="_blank"><img src="http://i58.tinypic.com/2vmwx9g.jpg" width="223" height="159" /></a></p>  <p>The XAML for the itemtemplate:</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:eb2e2c46-b807-4dc8-a0a0-d500fe59dca5" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Key</span><span style="background:#ffffff;color:#0000ff">=&quot;PersonTemplate&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;0,0,0,12&quot;&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.ColumnDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ColumnDefinition</span><span style="background:#ffffff;color:#ff0000"> Width</span><span style="background:#ffffff;color:#0000ff">=&quot;Auto&quot; /&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ColumnDefinition</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.ColumnDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Border</span><span style="background:#ffffff;color:#ff0000"> Width</span><span style="background:#ffffff;color:#0000ff">=&quot;100&quot;</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;100&quot;</span></li> <li>           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> HorizontalAlignment</span><span style="background:#ffffff;color:#0000ff">=&quot;Left&quot;</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> VerticalAlignment</span><span style="background:#ffffff;color:#0000ff">=&quot;Top&quot;</span></li> <li>           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> BorderBrush</span><span style="background:#ffffff;color:#0000ff">=&quot;Black&quot;</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> BorderThickness</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Image</span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Picture}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Border</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> Grid.Column</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextLargeStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Name}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextSubtleStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Company}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Result in runtime:</p>  <p><a href="http://i57.tinypic.com/2r1z4wj.jpg" target="_blank"><img src="http://i57.tinypic.com/2r1z4wj.jpg" width="194" height="323" /></a></p>  <h2>Splitting this post + Conclusion</h2>  <p>I’m going to split this up in two posts as this one’s long enough already and my keyboard is getting tired <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_32.png" /></p>  <p>Part two will focus on selecting a person from the list, navigating to a detail page, fetching and showing the details. Expect it to show up some time next week (I’ll update this post as well as soon is its ready).</p>  <p>In this first part I’ve discussed what MVVM was and why you should do it. I’ve shown you how I use MVVM Light and walked through the setup. We’ve also discussed design-time data and how Blend combined with this designtime data can help you getting a nice UI in a fast way.</p>  <p>The code for this first part can be found on my <a href="http://1drv.ms/1rPv425" target="_blank">OneDrive</a>.</p>]]></content>
      <post-name type="text"><![CDATA[A practical guide to MVVM (Light)]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="56a95f57-a603-47f2-bc72-9a2453688a61" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="cd0e8753-7f49-46cc-b4ed-293f72eb73c7" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="b04c1224-7431-4c48-a6dc-ca8998d72cb3" date-created="2014-07-01T10:44:26" date-modified="2014-07-01T10:44:26" approved="true" url="http://www.silverlightshow.net/news/A-practical-guide-to-MVVM-Light.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="b57fe36e-2daa-46d3-85e6-bef0ffabcab7" date-created="2014-05-12T13:08:17" date-modified="2014-05-12T13:08:17" approved="true" post-url="/blog/post/2014/05/12/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Win Store: SuspensionManager failed]]></title>
      <content type="text"><![CDATA[<p>While implementing tombstoning in a Windows Store app I recently ran into this issue. Some pages tombstoned and resumed perfectly, while some other pages gave this error when tombstoning</p>  <p><a href="http://i57.tinypic.com/v7hawo.jpg" target="_blank"><img src="http://i57.tinypic.com/v7hawo.jpg" width="386" height="235" /></a></p>  <p>This one took me a while to figure out, but I finally found the problem. But before diving into the solution, I’ll show you how I got to this error.</p>  <h2>Tombstoning</h2>  <p>If you’re reading this, I’m assuming you know about the app lifecycle and tombstoning so I’m not going to explain that. To demonstrate the problem I created a blank app, added in a basic page so that Visual Studio included the NavigationHelper and SuspensionManager classes.</p>  <p>In the app I have two pages, Mainpage.xaml and Page2.xaml. Mainpage has a button that takes me to Page2. The navigation happens with the build-in NavigateToPageAction, easily dragged and dropped onto the button from Blend.</p>  <p><a href="http://i60.tinypic.com/2vd5hmw.jpg" target="_blank"><img src="http://i60.tinypic.com/2vd5hmw.jpg" width="335" height="370" /></a></p>  <p>This creates an EventTriggerBehavior on the button that triggers a NavigateToPageAction</p>  <p><a href="http://i61.tinypic.com/25au2cj.jpg" target="_blank"><img src="http://i61.tinypic.com/25au2cj.jpg" /></a></p>  <p>All that’s left to do is set the target page in the NavigateToPageAction properties</p>  <p><a href="http://i59.tinypic.com/3305hqx.jpg" target="_blank"><img src="http://i59.tinypic.com/3305hqx.jpg" /></a></p>  <p>And we’re done. We’ve just created an app with a button that navigates to another page without writing any code, pretty neat and easy stuff right?</p>  <p>Next thing I did was follow <a href="http://msdn.microsoft.com/en-us/library/windows/apps/Hh986968.aspx" target="_blank">this MSDN article</a> that shows in a few easy steps how to implement tombstoning so that if the app tombstones on a certain page and the user switches back to the app, it reloads that page. It worked and all was well. That is, until I implemented the tombstoning on a page that was navigated to using the NavigateToPageAction. tombstoning that page always resulted in the error shown in the screenshot at the beginning of this post (and it took me a few hours to discover that the action was at fault here). Let’s have a closer look to see what’s actually happening here.</p>  <h2>Navigation and NavigationParameters</h2>  <p>When navigating between pages we can pass parameters. In Windows Store the signature of the Frame.Navigate function is this</p>  <p><strong>Navigate(Type)     <br /></strong><strong>Navigate(Type, Object)     <br /></strong><strong>Navigate(Type, Object, NavigationTransitionInfo)</strong></p>  <p>The parameter is of type Object, meaning we can pass in anything we’d like. Pretty powerful right? Right, except when tombstoning. </p>  <p>At a certain point in the Tombstoning process this snippet of code gets executed</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cdd96465-5862-478e-927a-f4de145564e6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SaveFrameNavigationState(</span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> frame)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> frameState = SessionStateForFrame(frame);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">frameState[</span><span style="background:#ffffff;color:#a31515">&quot;Navigation&quot;</span><span style="background:#ffffff;color:#000000">] = frame.GetNavigationState();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This will save the current NavigationState of the pages into a dictionary. The caveat here is that this only works with primitive types. If we pass strings or integers as parameter this will work, no problem. If we pass in an object of type MyClass we will get the SuspensionManager failed error.</p>  <p>Okay cool, that’s all great, we found a possible source of the error. But, we’re not passing in any parameters to the page, so why are we getting the error? Let’s set a breakpoint in the OnNavigatedTo method in Page2.xaml.cs</p>  <p><a href="http://i58.tinypic.com/11s1kwx.jpg" target="_blank"><img src="http://i58.tinypic.com/11s1kwx.jpg" /></a></p>  <p>Well well, would you look at that. Our NavigateToPageAction snuck in a little parameter without telling us, and that parameter is not a primitive type so we get a crash.</p>  <h2>The fix + conclusion</h2>  <p>The fix is actually really easy, don’t use NavigateToPageAction. Yes just don’t use it. I know it’s really fast and easy but it breaks the entire tombstoning thingy. I fixed it by calling Frame.Navigate (Type) from the button’s click event.</p>  <p>I’ve uploaded a sample with two buttons on my OneDrive, one button has the crashing effect, the other one doesn’t.</p>  <p><a href="http://1drv.ms/RGbMzF" target="_blank">Download Link</a></p>]]></content>
      <post-name type="text"><![CDATA[Win Store: SuspensionManager failed]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="8f8df723-2b90-4e6b-a4af-3642d4b8412a" />
        <category ref="9a75a960-77ed-4ce5-a80e-35cfbe7898da" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="8dfd9d69-3a2e-4a02-8f62-556b9751e919" date-created="2014-05-15T12:18:28" date-modified="2014-05-15T12:18:28" approved="true" url="http://www.silverlightshow.net/news/Win-Store-SuspensionManager-failed.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="a5c50a51-00a0-4ba8-86f5-67c7843b21e5" date-created="2014-05-05T18:15:10" date-modified="2014-05-05T18:15:10" approved="true" post-url="/blog/post/2014/05/05/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[A custom button that disappears in snapped mode]]></title>
      <content type="text"><![CDATA[<p>I’m currently working on a Windows 8.1 app that has quite some buttons in the app bar. The buttons are not positioned next to each other in one row and are not all the same size. This means that I can’t use the new CommandBar to auto-hide some buttons whenever the app gets snapped to the side. That means that it’s time for a custom button.</p>  <p>Actually, I have two solutions to this problem. One that puts the hide/show functionality in the button and one that puts it in the page where you use the appbar.</p>  <h2>The one with functionality in the button</h2>  <p>Create a new class and let it derive from Button.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c54dcc28-d80a-437e-990c-c10e832d8166" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Button</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> HideOnSnapProperty = </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;HideOnSnap&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> HideOnSnap</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">) GetValue(HideOnSnapProperty); }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(HideOnSnapProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> CustomAppBarButton()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">HideOnSnap = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.SizeChanged += CurrentOnSizeChanged;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CurrentOnSizeChanged(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">WindowSizeChangedEventArgs</span><span style="background:#ffffff;color:#000000"> windowSizeChangedEventArgs)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!HideOnSnap)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> size = </span><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.Bounds;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (size.Width &lt;= size.Height)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Collapsed;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Visible;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First thing we need is a dependency property so we can specify whether or not we want to hide a button in snapped view. From the constructor we subscribe to the SizeChanged event of the current window. Whenever that event fires every button will check if it needs to hide. If HideOnSnap is enabled, the buttons will check if the app is currently snapped by checking if the width of the window is smaller than the height.</p>  <p>To use this control, and let the button hide on snap you can use something like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:adaa285f-b211-4de5-8b2d-fdf1d95ae56b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType1</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button1&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;False&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType1</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button2&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> </ol> </div> </div> </div>  <p>This works peachy, but if you have an appbar with multiple of these buttons and run on a slower system you might experience some delay when opening up the appbar for the first time. All buttons are getting created and are attaching the event handler so depending on the amount of buttons it might take some time.</p>  <p>If you experience the delay, option 2 might work better</p>  <h2>The one where the page handles it</h2>  <p>This option also needs a custom button class but it’s a much smaller one</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:397bd231-9735-48ee-ab30-b09790358291" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Button</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> HideOnSnapProperty = </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;HideOnSnap&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> HideOnSnap</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">) GetValue(HideOnSnapProperty); }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(HideOnSnapProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> CustomAppBarButton()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">HideOnSnap = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>No event handling in this class, just a dependency property to specify whether or not it needs to hide. The actual hiding and showing of the buttons happens in the page itself.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3564e600-79f6-4124-9c95-2d75f558e2ff" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainPage()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">SizeChanged += OnSizeChanged;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSizeChanged(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">SizeChangedEventArgs</span><span style="background:#ffffff;color:#000000"> sizeChangedEventArgs)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> size = </span><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.Bounds;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> dispatcher = Windows.UI.Core.</span><span style="background:#ffffff;color:#2b91af">CoreWindow</span><span style="background:#ffffff;color:#000000">.GetForCurrentThread().Dispatcher;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (size.Width &lt;= size.Height)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> dispatcher.RunAsync(Windows.UI.Core.</span><span style="background:#ffffff;color:#2b91af">CoreDispatcherPriority</span><span style="background:#ffffff;color:#000000">.Normal, HideAllHideableButtons);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> dispatcher.RunAsync(Windows.UI.Core.</span><span style="background:#ffffff;color:#2b91af">CoreDispatcherPriority</span><span style="background:#ffffff;color:#000000">.Normal, ShowAllHideableButtons);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We register for the SizeChanged event of the page (event comes from the FrameworkElement class, a page in Windows 8.1 derives from that class). The rest of the code is very similar from the code in the buttons. A difference is that we need to use the dispatcher here to marshall the hiding / showing of the buttons to the UI thread.</p>  <p>Here’s the code to hide all hideable buttons (note that you have to name your appbar, mine is called AppBarBottom</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fbb43471-737d-4b20-8f84-2fab7f6b8b9b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> HideAllHideableButtons()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> buttons = AppBarBottom.FindDescendantsByType&lt;</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButtonType2</span><span style="background:#ffffff;color:#000000">&gt;().Where(b =&gt; b.HideOnSnap);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> appBarButton </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> buttons)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">appBarButton.Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Collapsed;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We’re looking for all controls on the page that are of type CustomAppBarButton and that have HideOnSnap set to true (don’t worry about the FindDescendantsByType function, that’s an extension method, I’ll come back to it in a minute).</p>  <p>Every button that we found, we set to collapsed and voila, buttons are hidden when snapped. Getting them to show up again is very (very) similar</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f841209d-968b-4c8f-834f-8f6181147bb3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ShowAllHideableButtons()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> buttons = </span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">.FindDescendantsByType&lt;</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000">&gt;().Where(b =&gt; b.HideOnSnap);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> appBarButton </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> buttons)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">appBarButton.Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Visible;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As for the FindDescendantsByType&lt;T&gt; extension method:</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:96e3f4b8-b641-4451-a6ea-311128a72c3f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;T&gt; FindDescendantsByType&lt;T&gt;(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyObject</span><span style="background:#ffffff;color:#000000"> depObj) </span><span style="background:#ffffff;color:#0000ff">where</span><span style="background:#ffffff;color:#000000"> T : </span><span style="background:#ffffff;color:#2b91af">DependencyObject</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (depObj != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 0; i &lt; </span><span style="background:#ffffff;color:#2b91af">VisualTreeHelper</span><span style="background:#ffffff;color:#000000">.GetChildrenCount(depObj); i++)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DependencyObject</span><span style="background:#ffffff;color:#000000"> child = </span><span style="background:#ffffff;color:#2b91af">VisualTreeHelper</span><span style="background:#ffffff;color:#000000">.GetChild(depObj, i);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (child != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000"> &amp;&amp; child </span><span style="background:#ffffff;color:#0000ff">is</span><span style="background:#ffffff;color:#000000"> T)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">yield</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (T)child;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (T childOfChild </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> FindDescendantsByType&lt;T&gt;(child))</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">yield</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> childOfChild;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>this will look through the visual tree in search for elements of the specified type (I think I found this method on SO somewhere, forgot the exact link but this is not my code).</p>  <p>Usage is exactly the same as with the first type of button.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a2c9d6ef-a305-47a4-bbda-f7135d8dfc5e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType2</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button1&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;False&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType2</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button2&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> </ol> </div> </div> </div>              <h2>Conclusion</h2>  <p>In this post I’ve discussed two ways of creating a custom button that can hide itself when the application gets snapped to the side, allowing for a quick way to create an adaptable application bar.</p>  <p>You can find a demo application using both ways of working on my <a href="http://1drv.ms/1mvkni9" target="_blank">OneDrive</a> (Top appbar uses first type, bottom appbar uses second type).</p>]]></content>
      <post-name type="text"><![CDATA[A custom button that disappears in snapped mode]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
    </post>
    <post id="43c6ae97-926f-43d6-b905-155c05c8e42c" date-created="2014-04-04T08:06:42" date-modified="2014-04-04T08:06:43" approved="true" post-url="/blog/post/2014/04/04/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Geofencing in Windows Phone 8.1]]></title>
      <content type="text"><![CDATA[<p>Windows Phone 8.1 brings the concept of Geofencing to our beloved Windows Phone platform. Geofencing allows us to trigger an action whenever a user is at a predefined set of coordinates. Windows Phone 8.1 registers geofences with the OS so our app doesn’t need to run for triggers to fire. For this post we’ll trigger a welcome message whenever someone is at building 9 of the Microsoft Redmond campus.</p>  <p><a href="http://i60.tinypic.com/dzw45l.jpg" target="_blank"><img src="http://i60.tinypic.com/dzw45l.jpg" width="311" height="196" /></a></p>  <h2>The app</h2>  <p>Create a new Windows Phone 8.1 app. Add the Location capability in the Package.appxmanifest. We obviously need location capabilities for this <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_31.png" /></p>  <p><img src="http://i60.tinypic.com/foditu.jpg" width="210" height="308" /></p>  <p>Let’s dive into code. This app will only have a blank MainPage and a message dialog that pops up when we’re near building 9.</p>  <p>First thing we need is a reference to the current GeofenceMonitor.</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f96ef22c-aa05-493b-a728-ab2b65b240e7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">GeofenceMonitor</span><span style="background:#ffffff;color:#000000"> _monitor = </span><span style="background:#ffffff;color:#2b91af">GeofenceMonitor</span><span style="background:#ffffff;color:#000000">.Current;</span></li> </ol> </div> </div> </div>    <p>Setting the Geofence location and hooking up the event happens in the constructor</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7c3d6279-9a46-432e-8998-a52bacf438e0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainPage()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_monitor.GeofenceStateChanged += MonitorOnGeofenceStateChanged;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Microsoft Redmond building 9</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">BasicGeoposition</span><span style="background:#ffffff;color:#000000"> pos = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">BasicGeoposition</span><span style="background:#ffffff;color:#000000"> { Latitude = 47.6397, Longitude = -122.1289 };</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Geofence</span><span style="background:#ffffff;color:#000000"> fence = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Geofence</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;building9&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Geocircle</span><span style="background:#ffffff;color:#000000">(pos, 100));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_monitor.Geofences.Add(fence);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//geofence already added to system</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First we hook up the GeofenceStateChanged event, we’ll look at the eventhandler in a minute. Then we create a BasicGeoPosition which holds the coordinates for, in our case, building 9 of the Microsoft campus in Redmond. Then we create a Geofence. The Geofence constructor takes two parameters, a string that functions as ID so it should be unique, and an IGeoShape. Other overloads for Geofence allow us to specify if we want to trigger the event whenever we enter or leave the geofence area.</p>  <p>For the ID we use a string, for the IGeoShape we use a GeoCircle. Other build-in possibilities are</p>  <ul>   <li>Geoboundingbox </li>    <li>Geocircle </li>    <li>Geopath </li>    <li>Geopoint </li> </ul>  <p>The Geocircle takes two parameters, the position and the radius (in meters). We’ve already defined a position as BasicGeoposition, which is exactly the type expected by the Geocircle, and we define a radius of 100 meters. Finally we try to add the Geofence to the geofences registered in the OS. If a Geofence with the same ID already exists it will throw an exception stating that the object already exists.</p>  <p><img src="http://i60.tinypic.com/rrpfns.jpg" /></p>  <p>Let’s have a look at the event handler</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c530d420-1f8c-4f9c-8700-fc8599263c39" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> MonitorOnGeofenceStateChanged(</span><span style="background:#ffffff;color:#2b91af">GeofenceMonitor</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> fences = sender.ReadReports();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> report </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> fences)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (report.Geofence.Id != </span><span style="background:#ffffff;color:#a31515">&quot;building9&quot;</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">continue</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">switch</span><span style="background:#ffffff;color:#000000"> (report.NewState)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">case</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GeofenceState</span><span style="background:#ffffff;color:#000000">.Entered:</span></li> <li>                <span style="background:#ffffff;color:#000000">Dispatcher.RunAsync(</span><span style="background:#ffffff;color:#2b91af">CoreDispatcherPriority</span><span style="background:#ffffff;color:#000000">.Normal, </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> () =&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageDialog</span><span style="background:#ffffff;color:#000000"> dialog = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MessageDialog</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;Welcome to building 9&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> dialog.ShowAsync();</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">});</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">break</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">case</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GeofenceState</span><span style="background:#ffffff;color:#000000">.Exited:</span></li> <li>                <span style="background:#ffffff;color:#000000">Dispatcher.RunAsync(</span><span style="background:#ffffff;color:#2b91af">CoreDispatcherPriority</span><span style="background:#ffffff;color:#000000">.Normal, </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> () =&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageDialog</span><span style="background:#ffffff;color:#000000"> dialog = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MessageDialog</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;Leaving building 9&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> dialog.ShowAsync();</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">});</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">break</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Before we can show a message we’ll need to know what geofence triggered the event. We do that by calling ReadReports on the GeofenceMonitor. This method will return a ReadOnlyList containing GeofenceStateChangedReports. Iterating over those reports we can check the ID of the geofence and take action when the expected geofence is triggered. In this case we want to show a welcome message when someone arrives and a leaving message when someone leaves. Let’s try it out!</p>  <p>Launch the app in the emulator (unless you’re physically at building 9, then you can use a WP8.1 device <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_31.png" />), open the emulator tools and set the location to building 9. You’ll have to wait some seconds before the message pops up, this is to prevent triggers being fired when just passing through a geofence location. You can manipulate this delay by using an overload of the Geofence constructor and setting the DwellTime parameter (TimeSpan).</p>  <p><a href="http://i59.tinypic.com/r88mkg.jpg" target="_blank"><img src="http://i59.tinypic.com/r88mkg.jpg" width="586" height="379" /></a></p>  <p>Clear your location and set it somewhere away from building 9, wait a few seconds and watch the leaving message.</p>  <p><a href="http://i62.tinypic.com/icijw1.jpg" target="_blank"><img src="http://i62.tinypic.com/icijw1.jpg" width="590" height="315" /></a></p>  <h2>Conclusion</h2>  <p>Geofencing is a pretty cool way to interact with users based on their location. It’s a great addition to the platform and personally I can’t wait to see what great ideas devs will come up with to use this functionality.</p>  <p>In this post I did a quick, basic lap around geofencing. Geofences can also trigger a backgroundtask, provided the app is set as lockscreen app, so the app doesn’t need to run all the time for geofencing to do its stuff.</p>  <p>As usual, the code can be found on my <a href="http://1drv.ms/1pYq88z" target="_blank">OneDrive</a></p>]]></content>
      <post-name type="text"><![CDATA[Geofencing in Windows Phone 8.1]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="a1f78b79-1ecd-4e89-8a7a-92a6ea0d4b1b" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="ee0fa7b2-5b57-41b5-928c-7e987eefc380" date-created="2014-04-04T13:41:06" date-modified="2014-04-04T13:41:06" approved="true" url="http://www.silverlightshow.net/news/Geofencing-in-Windows-Phone-8.1.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="5502c5ff-598e-4886-a09c-7d0fe2ee9d46" date-created="2014-03-28T11:19:40" date-modified="2014-03-28T11:20:11" approved="true" post-url="/blog/post/2014/03/28/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a REST API and consuming it in WP8]]></title>
      <content type="text"><![CDATA[<p>As a mobile developer we often need to consume some API in order to get data. In a lot of cases that API is made available to us by some third party, for example Twitter, Facebook, Flickr, ...&#160; However, in some cases we are ourselves responsible for the data. In order to get the data from our datastore to our app we’ll need to build an API. In this article I’ll walk you through creating a basic API with the CRUD operations and consume it in a Windows Phone app.</p>  <p>For this post I’ll be using</p>  <ul>   <li>ASP.NET WebApi 2.1</li>    <li>Visual Studio 2013</li>    <li>Microsoft Azure Websites</li>    <li>Windows Phone</li> </ul>  <p>The API will be build in WebApi 2.1 and hosted on Azure Websites. I’ve chosen Azure Websites because they offer 10 free websites and have great integration in Visual Studio 2013 update 1. Feel free to choose any other webhost, as long as they support MVC 5 you should be fine.</p>  <h2>Setting up the API project</h2>  <p>All right, let’s get started by building the API. In Visual Studio 2013 select File &gt; New Project &gt; Web &gt; ASP.NET Web Application. In the next window, select Web API. If you’re deploying to Azure, check the “Create remote resources” box. This will create either an Azure Website or an Azure Virtual Machine for you. We’re not doing any authentication for this post, I’m saving that for a future post <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_30.png" />, so leave it at No Authentication and click OK.</p>  <p><a href="http://i61.tinypic.com/30towhs.jpg" target="_blank"><img src="http://i61.tinypic.com/30towhs.jpg" width="201" height="150" /></a><a href="http://i57.tinypic.com/91dp8m.jpg" target="_blank"><img src="http://i57.tinypic.com/91dp8m.jpg" width="186" height="150" /></a></p>  <p>Visual Studio will create your project, tell Azure to create a Website and setup publish profiles for you. If you run this project you’ll get an ASP.NET MVC application with the default template but underneath it has also fired up a WebAPI. If you click the API link in the default template it will show you all available API calls (the WebApi template has a demo controller to get you started). </p>  <p><img src="http://i59.tinypic.com/1414l13.jpg" /></p>  <p>Now, for our API we’re going to create a database that holds famous quotes. Nothing fancy, just a database with one table that holds quotes. This is the Quote class</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:56d44897-d565-417a-9c04-c376a0afe448" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Quotes</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> ID { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Quote { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Time to add our API controller. If you’re familiar with MVC then this will look very familiar. WebAPI is basically MVC without the V. You have Models, you have controllers but instead of returning a view, the controllers return a Rest result, by default in JSON.</p>  <p>Right-click the controllers folder &gt; Add &gt; Controller. Select “Web API 2 controller with actions, using Entity Framework”. In the Model class dropdown select the Quotes class we’ve just created. The Data context drop down is where we can select our Entity framework context but that hasn’t been created yet. Click the + button next to the dropdown, select a name and click Add. Now we do have a context. Click Add and let Visual Studio create your Controller for you.</p>  <p><a href="http://i59.tinypic.com/5ma6id.jpg" target="_blank"><img src="http://i59.tinypic.com/5ma6id.jpg" width="249" height="172" /></a><a href="http://i58.tinypic.com/2hi3uk7.jpg" target="_blank"><img src="http://i58.tinypic.com/2hi3uk7.jpg" width="378" height="150" /></a></p>  <p>The newly created controller features all CRUD operations using the context we’ve just created to get to our Entity Framework. Before testing this, have a look in the Web.config file. You should find something like this not far from the top of the file</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:81808171-0031-4c11-a7bc-f1dc575cb9c5" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">connectionStrings</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">add</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">name</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">RestDemoContext</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">connectionString</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Data Source=(localdb)&#92;v11.0; Initial Catalog=RestDemoContext-20140327114532; Integrated Security=True; MultipleActiveResultSets=True; AttachDbFilename=|DataDirectory|RestDemoContext-20140327114532.mdf</span><span style="background:#ffffff;color:#000000">&quot;</span></li> <li>    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#ff0000">providerName</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">System.Data.SqlClient</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">connectionStrings</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>This is the database connection that Entity Framework will use. It’s currently set to a local SQL Express database but a SQL Azure database has been created together with our project when we were first setting it up, so we’ll need to change this. Login to the Azure portal and go to Databases, find the created database for your project and select&#160; “<a href="https://manage.windowsazure.com/@nicovermeirhotmail769.onmicrosoft.com#"><font color="#000000">View SQL Database connection strings for ADO .Net, ODBC, PHP, and JDBC</font></a>”.</p>  <p><a href="http://i62.tinypic.com/zmid8w.jpg" target="_blank"><img src="http://i62.tinypic.com/zmid8w.jpg" width="211" height="312" /></a></p>  <p>Copy the ADO.NET connectionstring and paste it into the Web.config so that the line from before now looks like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7d49a9d9-91cf-4c0b-ab81-77b681beed2b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">connectionStrings</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">add</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">name</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">RestDemoContext</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> </span><span style="background:#ffffff;color:#ff0000">connectionString</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">Server=tcp:tvez9dpih8.database.windows.net,1433;Database=RestDemo_db;User ID={Your_userID_here};Password={your_password_here};Trusted_Connection=False;Encrypt=True;Connection Timeout=30;</span><span style="background:#ffffff;color:#000000">&quot;</span></li> <li>    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#ff0000">providerName</span><span style="background:#ffffff;color:#0000ff">=</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff">System.Data.SqlClient</span><span style="background:#ffffff;color:#000000">&quot;</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">connectionStrings</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Don’t forget to fill in your correct user ID and password. If you’ve set everything up, it’s time to try this out. Launch the project and navigate to the API link from the page header. It should now show you all available actions from your new controller. Click on the POST entry from the Quotes controller. This page shows you how a body from a POST request to this controller should look like. Let’s try it out in Fiddler.</p>  <p>Open Fiddler while your project is still running and go to the Composer tab. Set the method to POST from the dropdown and enter the url to your API endpoint. In my case this was http://localhost:36264/api/quotes. In the request headers field add this line</p>  <p>Content-Type: application/json</p>  <p>This will tell our API that the body contains JSON formatted data. In the request body we can copy/paste the sample data that the API page from the project gave us and fill in some nice quote.</p>  <p>{   <br />&#160; &quot;ID&quot;: 1,    <br />&#160; &quot;Quote&quot;: &quot;you have failed me for the last time&quot;    <br />}</p>  <p>Click Execute and after a few seconds Fiddler should show a 201 result. HTTP code 201 means “Created” so our post was successful. Change the method to GET, clear the body and click execute again. Fiddler should show a 200. Select that line and the Inspectors Tab to see the result.</p>  <h2><a href="http://i57.tinypic.com/1z36iiu.jpg" target="_blank"><img src="http://i57.tinypic.com/1z36iiu.jpg" width="295" height="159" /></a>&#160;<a href="http://i60.tinypic.com/ngcbwg.jpg" target="_blank"><img src="http://i60.tinypic.com/ngcbwg.jpg" width="294" height="158" /></a></h2>  <h2>A closer look</h2>  <p>Let’s take a closer look at the API methods.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:accd78ad-8b52-4696-9dd4-bbb0294d4bd8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">// GET: api/Quotes/5</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">ResponseType</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000">))]</span></li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">IHttpActionResult</span><span style="background:#ffffff;color:#000000">&gt; GetQuotes(</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> id)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000"> quotes = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> db.Quotes.FindAsync(id);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (quotes == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> NotFound();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> Ok(quotes);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The first line is a comment (obviously <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_30.png" />) that shows you how to call this method. The second line is an attribute to specify the expected content type in the response. Skip ahead to lines 8 and 11. These are helper methods found in the ApiController base class. When called they create a response with the correct HTTP code, 404 for not found or 200 for ok in this case, and set the content of the response.</p>  <p>We could add a second attribute to this method called HttpGet. Each of the verbs (GET, PUT, POST, DELETE) have an attribute version. You can use them freely here but the default template is working with a convention. Every method where the name starts with Get will be a GET method by default, the same for PUT, POST and DELETE.</p>  <h2>Publish to Azure Websites</h2>  <p>Publishing to your Azure website is as easy as right-clicking your web project (NOT the solution) and selecting publish. Let Visual Studio do its thing, your browser will open and your API is live on the internet. We can even debug live on the azure website by opening Server Explorer in Visual Studio &gt; Azure &gt; Websites &gt; right-click your site &gt; Attach Debugger (note that this works best when you deployed a debug build of your site.</p>          <h2>Creating the app</h2>  <p>Time to consume our fancy API. Create a new blank Windows Phone 8 application and add the following Nuget packages</p>  <ul>   <li><strong> Install-Package Microsoft.Net.Http</strong> </li>    <li><strong> Install-Package Newtonsoft.Json </strong></li>    <li><strong> Install-Package MvvmLight</strong> </li> </ul>  <p>So what are these for? The first one gives us the HttpClient class which is a far superior way to do HTTP requests in Windows Phone than any class included in the SDK. It’s also a portable library so it makes your code very easy to port over to other platforms. Json.net because we’ll receive a JSON response from our API and we need to deserialize it back to an object. And MVVM Light because I just can’t live without it.</p>  <h2>Getting data</h2>  <p>We’ll start by requesting all quotes currently in the database. First, add the Quotes class from the API project to the phone project. Second, add a LongListSelector to the MainPage</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ae5fe5d1-27dc-4d44-8398-e599eacf2374" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Quotes}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextNormalStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Quote}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Next, in the MainViewModel we’ll fetch the data and set it to Quotes (don’t forget to set MainViewModel as datacontext of MainPage).</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a309e73f-057d-4a8b-b774-a43c44d74424" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000">&gt; _quotes;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000">&gt; Quotes</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _quotes; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_quotes == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_quotes = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; Quotes);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Initializes a new instance of the MainViewModel class.</span></li> <li><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">FetchQuotes();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> FetchQuotes()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">HttpClient</span><span style="background:#ffffff;color:#000000"> client = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">HttpClient</span><span style="background:#ffffff;color:#000000">())</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> result = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> client.GetAsync(</span><span style="background:#ffffff;color:#a31515">&quot;http://restdemo.azurewebsites.net/api/quotes&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">result.EnsureSuccessStatusCode();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">Quotes = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.DeserializeObject&lt;</span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000">&gt;&gt;(</span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> result.Content.ReadAsStringAsync()));</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>          <p>Quotes is an ObservableCollection of type Quotes. FetchQuotes does all the heavy lifting here and is called upon initialization of the MainViewModel. It creates an instance of HttpClient (in a using statement, because HttpClient implements IDisposable). It calls our API endpoint that returns all quotes from the database. When it’s done fetching data we call EnsureSuccessStatusCode on the result. This method will throw an error if the returned HTTP code is not a success code, for example when we should receive a not found or bad request error. If everything went well we can read the result.Content as a string, this will give us the quotes in a JSON string format. We feed it into JSON.net his deserializer and we’re done!</p>  <p>Now what good is having our own API when all we do is reading from it? Time to post some quotes! Add a second page and a way to navigate to that page. To keep things simple I’ve hooked this AddPage up to MainViewModel as datacontext. So I have 2 pages and 1 viewmodel. In the Viewmodel I create a new property that will hold the new quote.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3126d0ca-1ae8-4756-892e-c955ac22959f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000"> NewQuote</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> {</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _newQuote; }</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>     <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_newQuote == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">_newQuote = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>         <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; NewQuote);</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000"> }</span></li> </ol> </div> </div> </div>  <p>The page contains a textbox that has a two-way binding to this property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0e0020b6-235f-4587-8a03-f4019e4f7286" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;ContentPanel&quot;</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span></li> <li>           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,12,0&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextNormalStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Quote&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> NewQuote</span><span style="background:#ffffff;color:#0000ff">.Quote,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>And to glue things together, there’s a save method in the Viewmodel that will POST this new quote to the API, clear the NewQuote property and refetch all properties, including the one we just saved.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ba227720-adff-476f-9a34-f8b9ad769f7d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> SaveQuote()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">HttpClient</span><span style="background:#ffffff;color:#000000"> client = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">HttpClient</span><span style="background:#ffffff;color:#000000">())</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">HttpContent</span><span style="background:#ffffff;color:#000000"> content = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StringContent</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.SerializeObject(NewQuote));</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">content.Headers.ContentType = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MediaTypeHeaderValue</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;application/json&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> result = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> client.PostAsync(</span><span style="background:#ffffff;color:#a31515">&quot;http://restdemo.azurewebsites.net/api/quotes&quot;</span><span style="background:#ffffff;color:#000000">, content);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">result.EnsureSuccessStatusCode();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">NewQuote = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Quotes</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> FetchQuotes();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>To do a POST we first need to prepare the content. In our case we’re going to send a JSON string so we need to convert our NewQuote into JSON and put it inside StringContent. Next step is setting the ContentType in the header, just like we did when using Fiddler a few steps ago. Call PostAsync on the HttpClient, ensure its success and we’re done. If all went well the api saved the quote, the app refetched all quotes and the new one should show up on the MainPage.</p>  <h2>Conclusion</h2>  <p>In this article I’ve shown the steps needed to build and consume a basic REST API using ASP.net WebApi and Windows Phone 8. The code from the WP8 app is very generic and can be used on a lot of platforms, even for platforms where HttpClient isn’t available, the way of working, the headers, the expected HTTP codes, should all be the same.</p>  <p>The code for both the API and the app can be found on my <a href="http://1drv.ms/O3MvNt" target="_blank">OneDrive.</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a REST API and consuming it in WP8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="dcadc47c-d872-4eff-b325-87e1a4b16ec6" />
        <category ref="56a95f57-a603-47f2-bc72-9a2453688a61" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="a0974773-323a-4a5f-a5be-a22b5f8a64b9" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="b432d2aa-ae6c-4621-8192-5902f396d818" date-created="2014-03-31T10:39:07" date-modified="2014-03-31T10:39:07" approved="true" url="http://www.silverlightshow.net/news/Building-a-REST-API-and-consuming-it-in-WP8.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
        <trackback id="21b8ee0c-cfbc-445a-832c-a86e654c8180" date-created="2014-06-30T15:35:29" date-modified="2014-06-30T15:35:29" approved="true" url="http://www.spikie.be/blog/post/2014/06/30/.aspx">
          <title type="text"><![CDATA[A practical guide to MVVM (Light)

A practical guide to MVVM (Light)]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="9a9b8f80-8468-4099-ac49-03194be5aead" date-created="2014-02-25T11:09:31" date-modified="2014-02-25T11:10:13" approved="true" post-url="/blog/post/2014/02/25/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[WP8 as bluetooth Start button]]></title>
      <content type="text"><![CDATA[<p>If you’ve ever used applications like the <a href="http://www.windowsphone.com/nl-be/store/app/office-remote/01f53e5a-7870-49cb-8afc-d6fab6d7a3cd" target="_blank">Office Remote</a> that seem to take over your computer you’ll know that it can provide quite the “magic” experience. As with all magic technologies this one is quite simple as well. All we need is a computer with Bluetooth that runs a small app with a Bluetooth listener and a Windows Phone app that connects to that listener app via Bluetooth. For this demo app I’m going to make the Windows Phone app act like the Start button on a Windows machine.</p>  <h2>Simulating the Windows key</h2>  <p>The listener application is a small WPF app that has only one button. That button will act like the Start button. To interact with the operating system and simulate a keyboard press we’ll need to import user32.dll and hook into its keybd_event. We’ll want to send ctrl + esc to Windows (acts the same as the Windows key)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aac32f4c-1a42-471f-9925-3caf80e140d3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">//source: http://www.codeproject.com/Questions/46731/Open-Start-Menu</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ShowStartMenu()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// key down event:</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> keyControl = 0x11;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> keyEscape = 0x1B;</span></li> <li>    <span style="background:#ffffff;color:#000000">keybd_event(keyControl, 0, 0, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">keybd_event(keyEscape, 0, 0, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// key up event:</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">uint</span><span style="background:#ffffff;color:#000000"> keyeventfKeyup = 0x02;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">keybd_event(keyControl, 0, keyeventfKeyup, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li>    <span style="background:#ffffff;color:#000000">keybd_event(keyEscape, 0, keyeventfKeyup, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">DllImport</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;user32.dll&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">extern</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> keybd_event(</span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> bVk, </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> bScan, </span><span style="background:#ffffff;color:#0000ff">uint</span><span style="background:#ffffff;color:#000000"> dwFlags,</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000"> dwExtraInfo);</span></li> </ol> </div> </div> </div>  <p>In the event handler of the button we call ShowStartMenu() and behold: a wild software Windows key appears!</p>  <h2>Building the Bluetooth listener</h2>  <p>Adding Bluetooth support to a .NET application isn’t the easiest thing to do. Luckily for us there are libraries out there that take out the hassle. For this project I used Peter Foot’s 32feet.NET library available through NuGet</p>  <h2><font color="#333333">Install-Package 32feet.NET </font></h2>  <p>A small note on this package as found on the <a href="http://inthehand.com/content/32feet.aspx" target="_blank">32feet.NET product page</a></p>  <p><em>“Bluetooth support requires a device with the Microsoft or Widcomm Bluetooth stack”</em></p>  <p>Luckily for me, my device uses the Microsoft BT stack, so I’m good to go. Now on to the code, we’ll need to start a BT listener and once connected read data from a networkstream. If we receive a certain message we’ll execute the ShowStartMenu() method.</p>  <p>First some fields</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:27ddb6dc-c233-448e-b621-e9f32c4cfb24" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">BluetoothListener</span><span style="background:#ffffff;color:#000000"> _listener;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">//unique service identifier</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Guid</span><span style="background:#ffffff;color:#000000"> _service = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Guid</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;{7A51FDC2-FDDF-4c9b-AFFC-98BCD91BF93B}&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _connected;</span></li> </ol> </div> </div> </div> </p>  <p>BluetoothListener is a class we get from 32feet.NET. The GUID is a reference to the service this app is providing, our Windows Phone app will need the same GUID to be able to connect to this service. And the third field is a boolean to keep track of having a connected client or not.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bc54f749-c1af-4f08-973a-22c01cbca107" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnLoaded(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> routedEventArgs)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">BluetoothRadio</span><span style="background:#ffffff;color:#000000"> br = </span><span style="background:#ffffff;color:#2b91af">BluetoothRadio</span><span style="background:#ffffff;color:#000000">.PrimaryRadio;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (br == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;No supported Bluetooth radio/stack found.&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (br.Mode != </span><span style="background:#ffffff;color:#2b91af">RadioMode</span><span style="background:#ffffff;color:#000000">.Discoverable)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBoxResult</span><span style="background:#ffffff;color:#000000"> rslt = </span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Make BluetoothRadio Discoverable?&quot;</span><span style="background:#ffffff;color:#000000">, </span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth Remote Listener&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">MessageBoxButton</span><span style="background:#ffffff;color:#000000">.YesNo);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (rslt == </span><span style="background:#ffffff;color:#2b91af">MessageBoxResult</span><span style="background:#ffffff;color:#000000">.Yes)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">br.Mode = </span><span style="background:#ffffff;color:#2b91af">RadioMode</span><span style="background:#ffffff;color:#000000">.Discoverable;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_listener = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">BluetoothListener</span><span style="background:#ffffff;color:#000000">(_service);</span></li> <li>    <span style="background:#ffffff;color:#000000">_listener.Start();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">System.Threading.</span><span style="background:#ffffff;color:#2b91af">Thread</span><span style="background:#ffffff;color:#000000"> t = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> System.Threading.</span><span style="background:#ffffff;color:#2b91af">Thread</span><span style="background:#ffffff;color:#000000">(ListenLoop);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">t.Start();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In the OnLoaded event from the MainWindow we’ll first check if there’s a BT radio found that works on the MS or Widcomm stack. If that’s found, and made discoverable, we’ll start the listener with the service GUID specified in the field. Once the listener is started we fire up a second thread that will contain a loop to connect a client and read data from the stream.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:63a5866d-9b23-471c-87f3-233d5d61b774" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ListenLoop()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] buffer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[1024];</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">while</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">BluetoothClient</span><span style="background:#ffffff;color:#000000"> bc;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Stream</span><span style="background:#ffffff;color:#000000"> ns;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">bc = _listener.AcceptBluetoothClient();</span></li> <li>            <span style="background:#ffffff;color:#000000">ns = bc.GetStream();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_connected = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">break</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//keep connection open</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">while</span><span style="background:#ffffff;color:#000000"> (_connected)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> received = ns.Read(buffer, 0, buffer.Length);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (received &gt; 0)</span></li> <li>                <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> data = </span><span style="background:#ffffff;color:#2b91af">Encoding</span><span style="background:#ffffff;color:#000000">.UTF8.GetString(buffer);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> command = data.Substring(0, data.IndexOf(</span><span style="background:#ffffff;color:#a31515">&quot;&#92;0&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">StringComparison</span><span style="background:#ffffff;color:#000000">.Ordinal));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (command == </span><span style="background:#ffffff;color:#a31515">&quot;Start&quot;</span><span style="background:#ffffff;color:#000000">)</span></li> <li>                    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000">ShowStartMenu();</span></li> <li>                    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">}</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//connection lost</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">_connected = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>                <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">_connected = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">break</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">bc.Close();</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This is the code for the loop that runs in the second thread. First we declare a buffer of 1KB, more than enough for this sample. Next we start an infinite loop, in that loop we declare a BluetoothClient and a Stream. Once a client connects through the AcceptBluetoothClient method we fetch a stream and set the connected flag to true. As long as we’re connected we read data from the stream into the buffer, once we receive actual data we’ll decode it from a byte array (the buffer) into a string (the original message). In this sample the message will be 5 bytes but the buffer can hold 1024 bytes. It will fill up the remaining bytes with “\0” so we’ll need to chop that of with a Substring. If the received string is “Start” we’ll flip to the Start screen. If we read from the stream but the number of received bytes is zero, we’ve lost the connection to the client.</p>  <p>Fire up the WPF app, make sure the button flips you to the Start screen and let’s get started on the WP8 app!</p>  <h2>Windows Phone Client</h2>  <p>The Windows Phone app consists of two pages. The MainPage is for selecting a Bluetooth peer to connect to and the ConnectedPage has the same button as the WPF application. The app uses MVVM Light, everything happens in the MainViewModel. Both the MainPage and ConnectedPage use MainViewModel as their datacontext. For navigation I’ve added the always helpful Cimbalino NuGet package and registered their NavigationService in SimpleIoc through the ViewModelLocator</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:702884b4-6a06-4d3b-934a-313b82356ad6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In the MainViewModel I have declared three properties</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4b0c6b36-05d2-4ccf-807d-6edd4cc9624f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000">&gt; _peers;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000"> _selectedPeer;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ICommand</span><span style="background:#ffffff;color:#000000"> _goToStartCommand;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ICommand</span><span style="background:#ffffff;color:#000000"> GoToStartCommand</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _goToStartCommand ?? (_goToStartCommand = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(SendCommand)); }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000">&gt; Peers</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _peers; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_peers == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_peers = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; Peers);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000"> SelectedPeer</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPeer; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPeer == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_selectedPeer = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedPeer);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">ConnectToDevice();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The PeerInformation class is something we get from the Windows Phone Bluetooth API. We have an observablecollection that will hold all peers that are known for your Windows Phone device, we also have a property for the selected peer and a command that will fire a message into the NetworkStream.</p>  <p>We’ll also need some fields</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:747ca8f5-b845-41ad-b12f-93f3c5749f72" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StreamSocket</span><span style="background:#ffffff;color:#000000"> _socket;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataWriter</span><span style="background:#ffffff;color:#000000"> _dataWriter;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> </ol> </div> </div> </div>  <p>The socket will hold the connection between the phone app and the WPF app. The DataWriter can write data into the stream. The NavigationService is the one from the Cimbalino toolkit.</p>  <p>Here’s the constructor for the MainViewModel</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a72785c7-165f-4cfb-a5a9-bddb91262de1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (IsInDesignModeStatic) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (Microsoft.Devices.</span><span style="background:#ffffff;color:#2b91af">Environment</span><span style="background:#ffffff;color:#000000">.DeviceType == Microsoft.Devices.</span><span style="background:#ffffff;color:#2b91af">DeviceType</span><span style="background:#ffffff;color:#000000">.Emulator)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth not available in the emulator&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">RefreshPairedDevicesList();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>The NavigationService is injected via SimpleIoc. First we check if the current device is the Windows Phone emulator, the emulator doesn’t support Bluetooth so we need an actual device to test this on.</p>  <p>The RefreshPairedDevicesList looks like this (all using the Windows Phone Bluetooth APIs)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:069dec99-7618-4f78-a096-b6ef38bb8ec3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> RefreshPairedDevicesList()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Search for all paired devices</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">PeerFinder</span><span style="background:#ffffff;color:#000000">.AlternateIdentities[</span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth:Paired&quot;</span><span style="background:#ffffff;color:#000000">] = </span><span style="background:#ffffff;color:#a31515">&quot;&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> peers = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PeerFinder</span><span style="background:#ffffff;color:#000000">.FindAllPeersAsync();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">Peers = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000">&gt;(peers);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000"> ex)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> ((</span><span style="background:#ffffff;color:#0000ff">uint</span><span style="background:#ffffff;color:#000000">)ex.HResult == 0x8007048F)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth is off, enable it?&quot;</span><span style="background:#ffffff;color:#000000">, </span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth Off&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">MessageBoxButton</span><span style="background:#ffffff;color:#000000">.OKCancel) == </span><span style="background:#ffffff;color:#2b91af">MessageBoxResult</span><span style="background:#ffffff;color:#000000">.OK)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ConnectionSettingsTask</span><span style="background:#ffffff;color:#000000"> connectionSettingsTask = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ConnectionSettingsTask</span></li> <li>                <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">ConnectionSettingsType = </span><span style="background:#ffffff;color:#2b91af">ConnectionSettingsType</span><span style="background:#ffffff;color:#000000">.Bluetooth</span></li> <li>                <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">connectionSettingsTask.Show();</span></li> <li>                <span style="background:#ffffff;color:#000000">RefreshPairedDevicesList();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(ex.Message);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First we’ll look for all paired devices for our phone, those get pushed into the observablecollection. If that fails with result 0x8007048F that means that Bluetooth is disabled on the device, in that case we use the ConnectionSettingsTask to redirect the user to the Bluetooth settings page in WP8.</p>  <p>After the list of peers is build, the user will be able to select one (I’ll discuss the pages in a minute). When a peer is selected we open up the Bluetooth connection</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:44430bc5-c651-4edd-9c30-442c0fafaf32" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ConnectToDevice()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_socket != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Disposing the socket with close it and release all resources associated with the socket</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socket.Dispose();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_socket = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StreamSocket</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//connect to the service with specified GUID</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _socket.ConnectAsync(SelectedPeer.HostName, </span><span style="background:#ffffff;color:#a31515">&quot;{7A51FDC2-FDDF-4c9b-AFFC-98BCD91BF93B}&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Connection was successful</span></li> <li>        <span style="background:#ffffff;color:#000000">_dataWriter = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataWriter</span><span style="background:#ffffff;color:#000000">(_socket.OutputStream);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#a31515">&quot;/ConnectedPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000"> ex)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(ex.Message);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socket.Dispose();</span></li> <li>        <span style="background:#ffffff;color:#000000">_socket = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The ConnectAsync method takes in the hostname of the peer and the same GUID we used in the WPF application to start the service. Once the connection is made we take the OutputStream and use it to initialize the DataWriter and we navigate to the ConnectedPage.</p>  <p>Let’s have a quick look at the MainPage xaml.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1eb9a172-c459-4b67-91aa-b5f9c8cf98e3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Peers}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12, 0, 0, 12&quot;</span></li> <li>                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextTitle2Style}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> DisplayName}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">SelectedItemBehavior</span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPeer</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>The MainPage consists of a LongListSelector with an ItemsSource bound to the observableCollection on the MainViewModel. as a DataContext we show the displaynames of all available peers.</p>  <p><strong><u>NOTE</u></strong>: LongListSelector does not support SelectedItem binding. I’ve added a behavior to this project that gives us just that. For more information on the behavior see my <a href="http://www.spikie.be/blog/post/2014/01/10/.aspx" target="_blank">blogpost from a while ago</a>.</p>  <p>The ConnectedPage only has a button with a command bound to the GoToStartCommand on MainViewModel. Once that command is fired we send a string “Start” on to the stream.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:331e0c30-be4b-4eca-9413-c7664580d00a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SendCommand()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_dataWriter.WriteString(</span><span style="background:#ffffff;color:#a31515">&quot;Start&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataWriter.StoreAsync();</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataWriter.FlushAsync();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>And that’s it! The message gets written into the DataWriter, stored in the stream and the stream gets flushed. In the WPF app the string gets read into the buffer as a byte array, gets converted back into a string and the Start screen appears!</p>  <h2>Wrap-up</h2>  <p>In this post I’ve discussed how to connect your Windows Phone device to another bluetooth enabled device and use a service running there. </p>  <ul>   <li><a href="http://1drv.ms/1c3H7Wt" target="_blank">WPF app on OneDrive</a></li>    <li><a href="http://1drv.ms/1c3GXhE" target="_blank">WP8 app on OneDrive</a></li> </ul>  <p>Happy coding!</p>]]></content>
      <post-name type="text"><![CDATA[WP8 as bluetooth Start button]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="01edea20-8a5a-4bf8-9679-db7d54f6b438" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="a21b5ebd-a02e-431b-bdde-a3b72d5423a7" date-created="2014-02-04T15:49:21" date-modified="2014-02-04T15:51:54" approved="true" post-url="/blog/post/2014/02/04/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Branching XAML Styler]]></title>
      <content type="text"><![CDATA[<p>Some time ago I <a href="http://www.spikie.be/blog/post/2013/11/13/.aspx" target="_blank">blogged</a> about having recompiled the great XAML Styler plugin so it would install into Visual Studio 2013. The recompiled plugin suddenly became an unexpected success and it got me thinking that this plugin should really continue to exist, even if the original author isn’t supporting it anymore (not sure of this but it has been quite some time since he pushed anything to Codeplex).</p>  <p>After waiting around a bit I’ve decided to download the original source code, get it up and running in Visual Studio 2013 and push it to both Github and the Visual Studio gallery. So I’m happy to announce that the code can be found at <a href="https://github.com/NicoVermeir/XamlStyler" target="_blank">Github</a> and the VS2013 version of the plugin can be found at the <a href="http://visualstudiogallery.msdn.microsoft.com/3de2a3c6-def5-42c4-924d-cc13a29ff5b7" target="_blank">Visual Studio Gallery</a></p>  <h2>The future?</h2>  <p>The version that is now on the gallery is the exact same version that I’ve compiled back in November. It’s the plugin that the original author created but recompiled with the VS2013 SDK. I did create a new VS Package project to be able to have it on the gallery side by side with the original plugin.</p>  <p>As for the future of the project, I’m currently going through the source code, getting to know the application and the code that makes it tick. Afterwards I’m planning on having a look at the logged issues on the original Codeplex site and tackle those. </p>  <h2>Issues</h2>  <p>Should you run into any issues while using the forked plugin please log an issue on the <a href="https://github.com/NicoVermeir/XamlStyler/issues" target="_blank">Github</a> page. </p>  <h2>Contributions</h2>  <p>So you want to contribute? Great! Fork the Github version and go wild! Create a Pull request when you’re ready and if everything checks out I’ll happily merge your changes into the main branch and give props to every contribution you make.</p>  <p>Let’s keep this plugin alive and make it even better together!</p>]]></content>
      <post-name type="text"><![CDATA[Branching XAML Styler]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="cd0e8753-7f49-46cc-b4ed-293f72eb73c7" />
        <category ref="22302a23-f019-4a09-80a2-91b58db4d241" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="975aa66f-26b2-4287-9e19-a9ba510dd433" />
        <category ref="31651f7a-c460-4a72-84bd-dd65a1eb33cc" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="46812a09-1701-4885-9597-57acc6e794f0" date-created="2014-02-06T12:13:55" date-modified="2014-02-06T12:13:55" approved="true" url="http://www.silverlightshow.net/news/Branching-XAML-Styler.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="314e7618-f3c5-445f-8c4a-c27eb5412cef" date-created="2014-01-10T14:23:25" date-modified="2014-01-10T14:23:39" approved="true" post-url="/blog/post/2014/01/10/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[LLS SelectedItem binding through a behavior]]></title>
      <content type="text"><![CDATA[<p>Back in August I blogged about the ExtendedSelector, an extension of the LongListSelector that gave us a bindable SelectedItem property. A bit of a downside of this approach is that it’s basically a new control. Sure it inherits from the classic LLS underneath but it’s still another control in your XAML code.</p>  <p>Well, to fix this I’ve recreated the SelectedItem dependency property&#160; through a behavior.</p>  <h2>The behavior</h2>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7b7c2d61-d1f3-4759-9e15-4378b5997ced" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SelectedItemBehavior</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Behavior</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">LongListSelector</span><span style="background:#ffffff;color:#000000">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> SelectedItemProperty = </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;SelectedItem&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">SelectedItemBehavior</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> SelectedItem</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> GetValue(SelectedItemProperty); }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(SelectedItemProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnAttached()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">AssociatedObject.SelectionChanged += AssociatedObjectOnSelectionChanged;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.OnAttached();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnDetaching()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">AssociatedObject.SelectionChanged -= AssociatedObjectOnSelectionChanged;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.OnDetaching();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> AssociatedObjectOnSelectionChanged(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">SelectedItem = args.AddedItems[0];</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>It’s an easy one really. The behavior inherits from Behavior&lt;LongListSelector&gt; and has one dependency property. When the behavior gets attached to an LLS we attach the event handler to the SelectionChanged event. When detaching we cleanup by detaching the event handler.</p>  <p>When the SelectionChanged event fires we push the selected item into the dependency property.</p>  <h2>Usage</h2>  <p>Let’s throw together a quick little app to show the usage of the behavior. First the infamous Person class</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5413dd3e-7a1b-4ff7-83b4-feea47953b0b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Name { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> Age { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Next is the MainViewModel</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6d1e6634-2b8f-4bfe-8cef-f4e47f6ae53c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">INotifyPropertyChanged</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; _persons;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> _selectedPerson;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt; Persons</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _persons; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_persons == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">_persons = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPerson; }</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPerson == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_selectedPerson = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">Persons = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Random</span><span style="background:#ffffff;color:#000000"> rnd = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Random</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 0; i &lt; 20; i++)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> person = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> {Name = </span><span style="background:#ffffff;color:#a31515">&quot;Person &quot;</span><span style="background:#ffffff;color:#000000"> + i, Age = rnd.Next(0, 80)};</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">Persons.Add(person);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> PropertyChanged;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">virtual</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnPropertyChanged([</span><span style="background:#ffffff;color:#2b91af">CallerMemberName</span><span style="background:#ffffff;color:#000000">] </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> propertyName = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> handler = PropertyChanged;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (handler != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) handler(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventArgs</span><span style="background:#ffffff;color:#000000">(propertyName));</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Two properties here, an observable collection that holds the persons and a SelectedPerson that will be bound to the dependency property on our behavior. The list of persons gets filled with some random data from the constructor.</p>  <p>Here’s the view</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:483b07a4-1fc0-42e0-b8ef-16894050f084" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;LayoutRoot&quot;</span><span style="background:#ffffff;color:#ff0000"> Background</span><span style="background:#ffffff;color:#0000ff">=&quot;Transparent&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;Auto&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;*&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">&lt;!--  TitlePanel contains the name of the application and page title  --&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TitlePanel&quot;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;0&quot;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,17,0,28&quot;&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextNormalStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Text</span><span style="background:#ffffff;color:#0000ff">=&quot;MY APPLICATION&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;9,-7,0,0&quot;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextTitle1Style}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Text</span><span style="background:#ffffff;color:#0000ff">=&quot;page name&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">&lt;!--  ContentPanel - place additional content here  --&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;ContentPanel&quot;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,12,0&quot;&gt;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;Auto&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;*&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;0&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Run</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Selected person is &quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Run</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPerson</span><span style="background:#ffffff;color:#0000ff">.Age}&quot; /&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Run</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot; years old&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000">ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;0, 12, 0, 0&quot;&gt;</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Name}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">vm</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">SelectedItemBehavior</span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPerson</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;/&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Let’s extract the LongListSelector from that page as that’s the important piece</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7049280a-dbab-4f30-be8d-ac298335108e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">    </span><span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">        </span><span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;0, 12, 0, 0&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">            </span><span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Name}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">        </span><span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff">    </span><span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff">    </span><span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">vm</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">SelectedItemBehavior</span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPerson</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;/&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>The ItemsSource is bound to the Persons ObservableCollection on the viewmodel. Underneath the ItemTemplate we attach the behavior and bind its property to the SelectedItem. </p>  <p>And that’s it, every time a person is selected from the LLS the SelectedPerson property gets updated on the viewmodel.</p>]]></content>
      <post-name type="text"><![CDATA[LLS SelectedItem binding through a behavior]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="540177e8-fd15-4be6-b0ba-6f2c19913278" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="057ed10e-b617-40bc-b8ba-3c1492d72686" date-created="2014-01-13T14:13:34" date-modified="2014-01-13T14:13:34" approved="true" url="http://www.silverlightshow.net/news/LLS-SelectedItem-binding-through-a-behavior.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
        <trackback id="0fd815d7-7d3d-4233-854f-297d49909490" date-created="2014-02-25T11:10:25" date-modified="2014-02-25T11:10:25" approved="true" url="http://www.spikie.be/blog/post/2014/02/25/.aspx">
          <title type="text"><![CDATA[WP8 as bluetooth Start button

WP8 as bluetooth Start button]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="0bea91af-943f-4e21-8b88-60993de9d01d" date-created="2014-01-02T08:14:48" date-modified="2014-01-02T08:15:26" approved="true" post-url="/blog/post/2014/01/02/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[First time MVP!]]></title>
      <content type="text"><![CDATA[<p>The year 2014 started of with a bang for me. On January 1st I was very honored to receive this mail</p>  <p><a href="http://i39.tinypic.com/14uja7s.jpg" target="_blank"><img src="http://i39.tinypic.com/14uja7s.jpg" width="624" height="119" /></a></p>  <p>Meaning I just became a Microsoft MVP in the field of Client Development. I’m joining some big names in that group, names like Gill Cleeren, Laurent Bugnion, Fons Sonnemans, Jesse Liberty and many more (for a complete list, see <a href="http://mvp.microsoft.com/en-us/mvp/search-mvp.aspx?ty=a&amp;ex=Client+Development&amp;sc=n&amp;pn=1" target="_blank">the MVP site</a>)</p>  <p>The most mind blowing thing for me is that in a few months I’ll be able to go to the MVP summit and talk to these big guys that I’ve been looking up to for years.</p>  <p>Thank you Microsoft for the trust and the honor! </p>  <p><img src="http://lh5.googleusercontent.com/-0Fu7UbGwOSM/Toy0YG3UW-I/AAAAAAAAG2A/sgPCYBRtewk/s144/mvp.png" /></p>]]></content>
      <post-name type="text"><![CDATA[First time MVP!]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="ddbeed5f-f4f7-4d1b-88ac-e8d21ed2b37d" />
      </categories>
    </post>
    <post id="0833e576-9dc2-445c-8b57-837998d8e690" date-created="2013-12-31T09:45:38" date-modified="2013-12-31T09:46:09" approved="true" post-url="/blog/post/2013/12/31/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Marker based AR with Monogame and WP8]]></title>
      <content type="text"><![CDATA[<p>Marker based Augmented Reality is really easy thanks to toolkits like SLAR. A bigger challenge is when you want to use those toolkits in a Monogame application. There’s a lot of information out there on how to do this in the classic Silverlight / XNA mashup we used to have in Windows Phone 7 but since XNA isn’t supported in WP8 and Monogame / Silverlight combinations aren’t possible I embarked on a journey to get this done.</p>  <h2>Credits</h2>  <p>Before I start with this post I would like to give credits to the three articles / demo apps that helped me create this post.</p>  <ul>   <li>&#160;<a href="http://developer.nokia.com/Community/Wiki/Creating_a_Lens_application_that_uses_HLSL_effects_for_filters" target="_blank">http://developer.nokia.com/Community/Wiki/Creating_a_Lens_application_that_uses_HLSL_effects_for_filters</a></li>    <li>&#160;<a href="http://developer.nokia.com/Community/Wiki/Real-time_camera_effects_on_Windows_Phone_7_and_8" target="_blank">http://developer.nokia.com/Community/Wiki/Real-time_camera_effects_on_Windows_Phone_7_and_8</a> </li>    <li>&#160;<a href="http://apeoholic.se/post/Augmented-Reality-demo-with-SilverlightXNA" target="_blank">http://apeoholic.se/post/Augmented-Reality-demo-with-SilverlightXNA</a></li> </ul>  <p>All of these articles contain code that can be found in my demo solution attached to this post.</p>  <h2>Displaying the phone’s camera feed</h2>  <p>In a XAML application it’s easy to get the camera feed displayed in the app, a videobrush attached to a Canvas or a Rectangle and done. In a Monogame application we’ll have to do a bit more work.</p>  <p>We’ll start with a blank Monogame Windows Phone 8 game.</p>  <p>Note: the current Monogame templates included in the installer are only suited for Visual Studio 2012. However, once the game’s created you can simply open the solution in Visual Studio 2013.</p>  <p><a href="http://i39.tinypic.com/2vl066a.jpg" target="_blank"><img src="http://i39.tinypic.com/2vl066a.jpg" width="522" height="361" /></a></p>  <p>First thing to do is enable the correct capability. In the WMAppManifest GUI, in the Capabilities tab, check the ID_CAP_ISV_CAMERA checkbox.</p>  <p>From here on out, everything we’ll be doing will be in the Game1.cs class. The GamePage files are just for initializing Monogame and rendering the game. Running the app at this point should just give you a nice blue background.</p>  <p>If the app shows it’s pretty blue background, it’s time to declare some private fields in the Game1 class.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1678ed89-0935-4f57-85ab-12540789da2f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">//camera preview</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000"> _photoDevice;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Texture2D</span><span style="background:#ffffff;color:#000000"> _previewTexture;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _newPreviewFrameAvailable;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _backBufferXCenter;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _backBufferYCenter;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _textureYCenter;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _textureXCenter;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> _yScale;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> _xScale;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[] _previewData2;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[] _previewData1;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _isFocussing;</span></li> </ol> </div> </div> </div>  <p>Let’s go over these fields</p>  <ul>   <li> _photoDevice will be our access to the phone’s camera</li>    <li> _previewTexture will hold the frame currently being drawn, coming from the camera’s previewbuffer</li>    <li> _newPreviewFrameAvailable is a flag that will be set to true whenever a new frame is ready to be fetched and drawn</li>    <li> _backBufferXCenter and _backBufferYCenter: these 2 fields together form the middle point of the device’s screen, we need this to position the preview image in the middle of the screen</li>    <li> _textureYCenter and _textureXCenter: these 2 fields together form the middle point of the preview image.</li>    <li> _yScale and _xScale will contain the height and width scale so that we can draw the preview image full screen</li>    <li> _previewData1 and _previewData2 will hold the new and previous pixels from the camera’s preview buffer, we need to hold both to prevent one from being overwritten with a new frame while still being drawn</li>    <li> _isFocussing is a flag that prevents the focus function of the camera being called multiple times.</li> </ul>  <p>The next step is the Initialize method, note that this method needs to be overridden from the base Game class that Game1 inherits. The method itself gets called automatically at game’s start.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:62200a58-feac-4f74-965d-51f62c5562ce" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Initialize()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_spriteBatch = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SpriteBatch</span><span style="background:#ffffff;color:#000000">(GraphicsDevice);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Size</span><span style="background:#ffffff;color:#000000"> previewSize = </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000">.GetAvailablePreviewResolutions(</span><span style="background:#ffffff;color:#2b91af">CameraSensorLocation</span><span style="background:#ffffff;color:#000000">.Back)[0];</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Size</span><span style="background:#ffffff;color:#000000"> captureSize = </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000">.GetAvailableCaptureResolutions(</span><span style="background:#ffffff;color:#2b91af">CameraSensorLocation</span><span style="background:#ffffff;color:#000000">.Back)[0];</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">CreateTexture((</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)previewSize.Width, (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)previewSize.Height);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_previewData1 = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[_previewTexture.Width * _previewTexture.Height];</span></li> <li>    <span style="background:#ffffff;color:#000000">_previewData2 = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[_previewTexture.Width * _previewTexture.Height];</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_photoDevice = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000">.OpenAsync(</span><span style="background:#ffffff;color:#2b91af">CameraSensorLocation</span><span style="background:#ffffff;color:#000000">.Back, captureSize);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_photoDevice.PreviewFrameAvailable += photoDevice_PreviewFrameAvailable;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_backBufferXCenter = GraphicsDevice.Viewport.Width / 2;</span></li> <li>    <span style="background:#ffffff;color:#000000">_backBufferYCenter = GraphicsDevice.Viewport.Height / 2;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_textureXCenter = _previewTexture.Width / 2;</span></li> <li>    <span style="background:#ffffff;color:#000000">_textureYCenter = _previewTexture.Height / 2;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_yScale = (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)GraphicsDevice.Viewport.Width / _previewTexture.Height;</span></li> <li>    <span style="background:#ffffff;color:#000000">_xScale = (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)GraphicsDevice.Viewport.Height / _previewTexture.Width;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.Initialize();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>First we initialize the spritebatch, this class will be responsible for drawing the 2D textures, meaning in this case, the camera preview.</p>  <p>Next we get the preview size and capture size from the camera in the phone. We create a texture with the CreateTexture method (explained a bit lower) and declare the two arrays that will hold the current and previous frames.</p>  <p>The camera is launched asynchronously on line 13, hooking up the event handler for the PreviewFrameAvailable event on line 14.</p>  <p>Next, the center points for both the device’s screen and the preview texture are calculated, followed by calculating the scale.</p>  <p>Here’s the CreateTexture method</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fe4ad5d5-7025-4c1e-adfa-277b22d11c99" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CreateTexture(</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> textureWidth, </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> textureHeight)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_previewTexture = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Texture2D</span><span style="background:#ffffff;color:#000000">(GraphicsDevice, textureWidth, textureHeight);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">[] data = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">[textureWidth * textureHeight];</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 0; i &lt; textureWidth * textureHeight; i++)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">data[i] = </span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">.White;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_previewTexture.SetData(data);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This method just created a white texture, the size of what we expect the preview frames to be.</p>  <p>Next up is the event handler for the PreviewFrameAvailable event</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c1e5a0c3-8dfd-40ff-b02f-8659ebf2e9f4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> photoDevice_PreviewFrameAvailable(</span><span style="background:#ffffff;color:#2b91af">ICameraCaptureDevice</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_newPreviewFrameAvailable = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This sets a flag to true, this flag will be checked in the Draw method to prevent synchronization problems between threads.</p>  <p>Almost time to show something on screen! Here’s the Draw method, note that this is also an overridden method. In Monogame Update and Draw are the game loop, they are called multiple times per second. Update is where you would update the world, check for collisions, … While Draw is where all the graphical drawing logic sits.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ba0b41e4-d289-4eba-8e9f-891aaf9c5293" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Draw(</span><span style="background:#ffffff;color:#2b91af">GameTime</span><span style="background:#ffffff;color:#000000"> gameTime)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_newPreviewFrameAvailable)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">GraphicsDevice.Clear(</span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">.CornflowerBlue);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// a new frame is available, get it from the previewbuffer</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_photoDevice.GetPreviewBufferArgb(_previewData2);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//camera uses RGB, Texture2D uses BGR, swap color channels</span></li> <li>        <span style="background:#ffffff;color:#000000">SwapRedBlueChannel(_previewData2);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> previewDataTemp = _previewData1;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_previewData1 = _previewData2;</span></li> <li>        <span style="background:#ffffff;color:#000000">_previewData2 = previewDataTemp;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Convert the pixel array to a texture</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_previewTexture.SetData(_previewData1);</span></li> <li>        <span style="background:#ffffff;color:#000000">_newPreviewFrameAvailable = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//draw the previewframe</span></li> <li>    <span style="background:#ffffff;color:#000000">_spriteBatch.Begin();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_spriteBatch.Draw(_previewTexture, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector2</span><span style="background:#ffffff;color:#000000">(_backBufferXCenter, _backBufferYCenter), </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">,</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">.White,</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)</span><span style="background:#ffffff;color:#2b91af">Math</span><span style="background:#ffffff;color:#000000">.PI / 2.0f, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector2</span><span style="background:#ffffff;color:#000000">(_textureXCenter, _textureYCenter),</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector2</span><span style="background:#ffffff;color:#000000">(_xScale, _yScale), </span><span style="background:#ffffff;color:#2b91af">SpriteEffects</span><span style="background:#ffffff;color:#000000">.None, 0.0f);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_spriteBatch.End();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.Draw(gameTime);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First thing we’ll do is check for the flag that is set in the PreviewFrameAvailable event. If that’s true we fetch the ARGB preview buffer from the device. That buffer is an integer array, we pass in one of our two integer arrays, it will get filled with the buffer’s data. A problem we’re having here is that the camera returns RGB values while Texture2D uses BGR values. SwapRedBlueChannel is a small method that swaps those channels. Feel free to comment that line out and see for yourself what it does, all blue colors will show up red on your phone’s screen and vice versa. This method is detailed a bit lower on this page.</p>  <p>The next part is swapping the current frame with the previous frame, this is done to prevent a frame that is currently drawn on screen to be overwritten by a new one. </p>  <p>The SetData method on Texture2D takes in an array and will use that data to create the texture’s image.</p>  <p>And finally, we clear the flag again to wait for the next available frame. We are now ready to draw the image on screen. The drawing is done using the spritebatch, all drawing should happen between spritebatch.Begin() and spritebatch.End().</p>  <p>The Draw method has several overloads. The overload we’re using here gives us the ability to rotate and scale the texture. We need this as Monogame on Windows Phone currently has no landscape support.</p>  <p>Let’s break down the parameters for the Draw method.</p>  <ul>   <li> _previewTexture: our Texture2D that got filled with the preview frame’s data, this is the texture that will get drawn on screen</li>    <li> new Vector2(_backBufferXCenter, _backBufferYCenter): The position where the texture will get drawn. By default Monogame uses the upper left corner of the texture to position it, in this overload of the Draw method we can change that upper left point to something else as you’ll see in a few parameters</li>    <li> null: we don’t need a source rectangle here, just pass in null</li>    <li> Color.White: Draw this texture in its original colors</li>    <li> (float)Math.PI / 2.0f: this is the rotation, it rotates the entire image 90 degrees, moving us from portrait to landscape mode</li>    <li> new Vector2(_textureXCenter, _textureYCenter): origin point, this moves the rotation and location point from the upper left corner of the texture to its center</li>    <li> new Vector2(_xScale, _yScale): scales the image to be fullscreen</li>    <li> SpriteEffects.None: no extra effects needed</li>    <li> 0.0f: default depth</li> </ul>  <p>With all this in place, run the game and you should see your camera image being drawn full screen inside a game. However, the image is not focusing. An image in focus is pretty important for marker detection I believe. Let’s implement that a screen tap focuses the camera.</p>  <h2>Focusing the camera</h2>  <p>First we need to enable the tap gesture in the game. In the Game1 constructor add this line.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8d8e8374-a3dc-48fe-85d0-9fc26fabfe69" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">TouchPanel</span><span style="background:#ffffff;color:#000000">.EnabledGestures = </span><span style="background:#ffffff;color:#2b91af">GestureType</span><span style="background:#ffffff;color:#000000">.Tap;</span></li> </ol> </div> </div> </div>  <p>The logic will go in the Update part of our gameloop, once again an overridden method.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:82b344fb-86be-40e4-827e-c264d935aad1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Update(</span><span style="background:#ffffff;color:#2b91af">GameTime</span><span style="background:#ffffff;color:#000000"> gameTime)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_photoDevice == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//if a touch event is available, focus the camera</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">TouchPanel</span><span style="background:#ffffff;color:#000000">.IsGestureAvailable)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">TouchPanel</span><span style="background:#ffffff;color:#000000">.ReadGesture().GestureType == </span><span style="background:#ffffff;color:#2b91af">GestureType</span><span style="background:#ffffff;color:#000000">.Tap &amp;&amp; !_isFocussing)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_isFocussing = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _photoDevice.FocusAsync();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_isFocussing = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.Update(gameTime);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First we check if our camera is already initialized, we can’t focus something that doesn’t exist yet. If a gesture is available and it is a tap gesture we set the is focusing flag to true to prevent another focus call when one is in progress. The focusing itself is as easy as calling the asynchronously FocusAsync function on the camera. Reset the flag and done. The camera should now focus whenever you tap the screen in the game.</p>  <p>Now that we have our camera in place, it’s time for the fun stuff. The marker detection!</p>  <h2>Augmented Reality</h2>  <p>As mentioned in the beginning of this article, we’re going to use the SLAR toolkit. The problem is that the current released version of SLAR (released in May 2010) isn’t compatible with our Windows Phone 8 project. Luckily we can just pluck the code from its Codeplex page, recompile it and it just works. I took the lazy way out and just added the SLAR project to my solution. You’ll notice that SLAR depends on another library called Matrix3DEx that has the same compatibility issue, luckily for us that project also lives on Codeplex. Here are the links</p>  <ul>   <li>&#160;<a title="http://slartoolkit.codeplex.com/" href="http://slartoolkit.codeplex.com/" target="_blank">http://slartoolkit.codeplex.com/</a></li>    <li>&#160;<a title="http://matrix3dex.codeplex.com/" href="http://matrix3dex.codeplex.com/">http://matrix3dex.codeplex.com/</a></li> </ul>  <p>My solution currently looks like this</p>  <p><a href="http://i40.tinypic.com/2jbr7d1.jpg" target="_blank"><img src="http://i40.tinypic.com/2jbr7d1.jpg" width="137" height="261" /></a></p>  <p>Also make sure to copy the folders Common and CommonData to the folder where your solution lives or the project won’t compile. Don’t forget to add a reference to your game for the SLAR project.</p>  <p>Back to the code, in the Game1 class we’ll need some extra fields</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c8f112c5-f200-4aaa-b750-0c0f9bdd8d71" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GrayBufferMarkerDetector</span><span style="background:#ffffff;color:#000000"> _arDetector;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _isInitialized;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _isDetecting;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] _buffer;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DetectionResult</span><span style="background:#ffffff;color:#000000"> _markerResult;</span></li> </ol> </div> </div> </div>  <p>The first field is the detector, there are several kind of detectors in SLAR, we’re using the GrayBuffer one here. We need two flags to show that everything is initialized and if a detection is currently running. Last but not least we need a byte array that will store the frame that we’re currently scanning for markers. The detectionresult will hold the result of every detected marker so that we can use it to position our model.</p>  <p>Next we’ll initialize all the AR related bits, I’ve put this in a separate method that gets called from the existing Initialize method.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f2c5085a-c51c-48d7-962e-d13d6db45c77" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> InitializeAR()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//  Initialize the Detector</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_arDetector = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GrayBufferMarkerDetector</span><span style="background:#ffffff;color:#000000">();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Load the marker pattern. It has 16x16 segments and a width of 80 millimeters</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> marker = </span><span style="background:#ffffff;color:#2b91af">Marker</span><span style="background:#ffffff;color:#000000">.LoadFromResource(</span><span style="background:#ffffff;color:#a31515">&quot;data/Marker_SLAR_16x16segments_80width.pat&quot;</span><span style="background:#ffffff;color:#000000">, 16, 16, 80);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// The perspective projection has the near plane at 1 and the far plane at 4000</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_arDetector.Initialize((</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)_photoDevice.PreviewResolution.Width, (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)_photoDevice.PreviewResolution.Height, 1, 4000, marker);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_isInitialized = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>The way SLAR works is that it loads in a pattern(*.pat) file. That pattern gets searched for in every detect call. You can create your own patterns or use prebuild ones. I’m using one that comes with the SLAR samples. Make sure that the pattern is included with your solution and that its build action is set to Resource. Line 7 loads the pattern, line 10 initializes our detector, passing in the expected resolution, the near and far planes and the marker.</p>  <p>And now for the magical piece of code that does the actual detecting</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2fee9e95-34ed-445e-93b7-c580bb732dbc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Detect()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_isDetecting || !_isInitialized)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Here is where we try to detect the marker</span></li> <li>    <span style="background:#ffffff;color:#000000">_isDetecting = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Update buffer size</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> pixelWidth = _photoDevice.PreviewResolution.Width;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> pixelHeight = _photoDevice.PreviewResolution.Height;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_buffer == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000"> || _buffer.Length != pixelWidth * pixelHeight)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_buffer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[System.</span><span style="background:#ffffff;color:#2b91af">Convert</span><span style="background:#ffffff;color:#000000">.ToInt32(pixelWidth * pixelHeight)];</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Grab snapshot for the marker detection</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_photoDevice.GetPreviewBufferY(_buffer);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Detect the markers</span></li> <li>        <span style="background:#ffffff;color:#000000">_arDetector.Threshold = 100;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> dr = _arDetector.DetectAllMarkers(_buffer, System.</span><span style="background:#ffffff;color:#2b91af">Convert</span><span style="background:#ffffff;color:#000000">.ToInt32(pixelWidth), System.</span><span style="background:#ffffff;color:#2b91af">Convert</span><span style="background:#ffffff;color:#000000">.ToInt32(pixelHeight));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Set the marker result if the marker is found</span></li> <li>        <span style="background:#ffffff;color:#000000">_markerResult = dr.HasResults ? dr[0] : </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">finally</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_isDetecting = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The Detect method will get called from a timer, more on that a bit lower in the article.</p>  <p>First we’ll check if it’s okay to do detection, a detection cannot be in progress and everything should be initialized. Then we’ll set the is detecting flag to true.</p>  <p>We’ll keep the width and height of the camera’s preview resolution in two variables and initialize the buffer if necessary. We fill the buffer with the luminance data from the camera by calling the GetPreviewBufferY method, this differs from the method we’re using to show the camera stream. The luminance data is sufficient for SLAR to do its detection. Then we pass in the buffer to the marker detector, together with the frame’s width and height. If a result is found we’ll keep it in the DetectionResult field, if not we set the field to null. As last part we clear the is detecting flag so we are ready to detect again.</p>  <p>Very easy to use, SLAR takes care of all the rest. All we need to do is call the Detect method. In the overridden Initialize method, add this.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b89e79bf-31ce-402b-af6b-91cb5df23589" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">InitializeAR();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">//marker detection sits on another counter than the update / draw mechanism to prevent excessive detection</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">Deployment</span><span style="background:#ffffff;color:#000000">.Current.Dispatcher.BeginInvoke(() =&gt;</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Runt the detection separate from the update</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> dispatcherTimer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DispatcherTimer</span><span style="background:#ffffff;color:#000000"> { Interval = </span><span style="background:#ffffff;color:#2b91af">TimeSpan</span><span style="background:#ffffff;color:#000000">.FromMilliseconds(100) };</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">dispatcherTimer.Tick += (sender, e1) =&gt; Detect();</span></li> <li>    <span style="background:#ffffff;color:#000000">dispatcherTimer.Start();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">});</span></li> </ol> </div> </div> </div>  <p>The detection runs separately from the gameloop to prevent excessive calls to the detect method. I only want to detect every 100 milliseconds.</p>  <p>When you run the game now and point the camera to the marker, nothing happens. That’s perfectly normal. The marker is getting detected but we’re not doing anything with the detection results yet. Let’s add a 3D model to our game and position it on the marker.</p>  <h2>Adding the model</h2>  <p>For the 3D model I choose a model of the Tardis I found online (if you don’t know what the Tardis is, go out and buy all the Doctor Who dvd boxes you can find and lock yourself in your room for a few months. Thank me afterwards). </p>  <p>To use this in Monogame you’ll need to push it through either the XNA or the Monogame pipeline to convert it into an XNB file. I’m not going to detail how to do this here, lots of info out there. If you want a quick start, grab the XNB file from my demo project. </p>  <p>Add a folder called Content to your solution, add the XNB file in there and set its build action to Content. Next, we’ll once again add some fields to the Game1 class.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d2e37028-89db-4195-a653-170d31594d70" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000"> _modelPosition;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000"> _cameraPosition;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Model</span><span style="background:#ffffff;color:#000000"> _tardis;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> _aspectRatio;</span></li> </ol> </div> </div> </div>  <p>The names speak for themselves, we’ve got two vectors, one for the position of the Tardis, one for the position of the camera. We’ve got the Tardis model and a field that holds the aspect ratio.</p>  <p>In the Initialize method, right before the call to InitializeAR add these lines.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5ba17444-94a9-4ac1-9d05-d3b744f96814" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">_aspectRatio = _graphics.GraphicsDevice.Viewport.AspectRatio;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">_modelPosition = </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">.Zero;</span></li> <li><span style="background:#ffffff;color:#000000">_cameraPosition = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">(0, 0, 50);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#000000">InitializeAR();</span></li> </ol> </div> </div> </div>  <p>These are just basic vectors that we’ll use to calculate the actual position on screen where we need to render our model.</p>  <p>Next, we’ll need to load the model into memory. This is done in the overridden LoadContent method in the Game1 class.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0642ef7a-5265-40fd-a6a2-c0466fc593e8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> LoadContent()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_tardis = Content.Load&lt;</span><span style="background:#ffffff;color:#2b91af">Model</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#a31515">&quot;tardis&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.LoadContent();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>There’s no need to specify that the model lives in the Content folder as Monogame assumes that the project contains a folder called Content and that’s where it looks for XNB files.</p>  <p>Before we go into the draw logic of the model, there’s one problem that we’ll need to tackle. SLAR is using Matrix3D classes while Monogame has its own Matrix class. We’ll need a way to convert Matrix3D to Matrix. Here’s an extension method that does just that.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:49145083-6347-4f93-9231-ac3f97a7f992" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MatrixConverter</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Convert a Silverlight matrix into an Xna matrix</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;matrix&quot;&gt;&lt;/param&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;returns&gt;&lt;/returns&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000"> ToXnaMatrix(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000"> System.Windows.Media.Media3D.</span><span style="background:#ffffff;color:#2b91af">Matrix3D</span><span style="background:#ffffff;color:#000000"> matrix)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> m = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">(</span></li> <li>           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M11, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M12, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M13, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M14,</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M21, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M22, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M23, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M24,</span></li> <li>           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M31, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M32, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M33, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M34,</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.OffsetX, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.OffsetY, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.OffsetZ, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M44);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> m;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Now, onto the Draw method. The position of the following code is really important. Monogame draws its stuff in the order that you feed it its instructions. Meaning that we first need to draw the camera feed, then the Tardis model. That way the model will be nicely overlaid over the image.</p>  <p>In the Draw method, after Spritebatch.End and before base.Draw add these lines</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:de390e34-7fe7-4148-b7c6-a07a3ec84c1e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_markerResult != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//a marker is detected, draw the Tardis model</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> result = _markerResult;</span></li> <li>    <span style="background:#ffffff;color:#000000">_graphics.GraphicsDevice.DepthStencilState = </span><span style="background:#ffffff;color:#2b91af">DepthStencilState</span><span style="background:#ffffff;color:#000000">.Default;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_graphics.GraphicsDevice.BlendState = </span><span style="background:#ffffff;color:#2b91af">BlendState</span><span style="background:#ffffff;color:#000000">.Opaque;</span></li> <li>    <span style="background:#ffffff;color:#000000">_graphics.GraphicsDevice.SamplerStates[0] = </span><span style="background:#ffffff;color:#2b91af">SamplerState</span><span style="background:#ffffff;color:#000000">.LinearWrap;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Copy any parent transforms.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">[] transforms = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">[_tardis.Bones.Count];</span></li> <li>    <span style="background:#ffffff;color:#000000">_tardis.CopyAbsoluteBoneTransformsTo(transforms);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Draw the model. A model can have multiple meshes, so loop.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ModelMesh</span><span style="background:#ffffff;color:#000000"> mesh </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> _tardis.Meshes)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// This is where the mesh orientation is set, as well as our camera and projection.</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">BasicEffect</span><span style="background:#ffffff;color:#000000"> effect </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> mesh.Effects)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">effect.EnableDefaultLighting();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">effect.World = </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreateScale(0.1f) *</span></li> <li>                           <span style="background:#ffffff;color:#000000">(transforms[mesh.ParentBone.Index] * mesh.ParentBone.Transform *</span></li> <li style="background: #f3f3f3">                            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreateTranslation(_modelPosition) *</span></li> <li>                            <span style="background:#ffffff;color:#000000">result.Transformation.ToXnaMatrix());</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">effect.View = </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreateLookAt(_cameraPosition, </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">.Zero, </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">.Up);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">effect.Projection = </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreatePerspectiveFieldOfView(</span><span style="background:#ffffff;color:#2b91af">MathHelper</span><span style="background:#ffffff;color:#000000">.ToRadians(45.0f),</span></li> <li>                <span style="background:#ffffff;color:#000000">_aspectRatio, 1.0f, 10000f);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Draw the mesh, using the effects set above.</span></li> <li>        <span style="background:#ffffff;color:#000000">mesh.Draw();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Since we’re using a 3D model we can’t use the spritebatch to draw it. We set some properties onto the graphicsdevice first. Then we grab all transforms that are included in the model. The Tardis model I’m using is very simple, it’s just a box, so no transformations there. </p>  <p>We loop through all the meshes in the model, for each mesh we loop through its effects and that’s where we set the position. We use the detection result his transformation matrix to calculate the world for each effect and we draw each mesh.</p>  <p>Here’s the result:</p>  <p><a href="http://i40.tinypic.com/110i0d4.jpg" target="_blank"><img src="http://i40.tinypic.com/110i0d4.jpg" /></a></p>  <h2>Conclusion</h2>  <p>The end result might not seem like much, but that’s because my 3D monogame skills are very lacking <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_29.png" /> but just consider what we’ve done here. We’ve added a camera stream into a game, we’ve used that same stream to detect a certain pattern and we’ve positioned a game element onto that pattern. From here I’ll leave the rest to your imagination.</p>  <p>The project can be downloaded from my <a href="http://sdrv.ms/1eSy0so" target="_blank">Skydrive</a>.</p>]]></content>
      <post-name type="text"><![CDATA[Marker based AR with Monogame and WP8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="117f9e29-93c6-43a3-9b9a-4e662bfdaa62" />
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b43ad80c-ad86-4ef7-a1f5-10be62951aad" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
      </categories>
    </post>
    <post id="9804d513-dd2c-4ab7-89de-1c45530c9420" date-created="2013-12-02T13:35:09" date-modified="2013-12-02T13:35:25" approved="true" post-url="/blog/post/2013/12/02/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Data validation in Windows Phone 8]]></title>
      <content type="text"><![CDATA[<p>Whenever you need to do data input you’re probably going to add some form of data validation. There is a ton of information out there on how to do this in Silverlight and WPF but information on Windows Phone 8 is rather hard to find. After doing some research on the topic I’ve landed on the Fluent Validation library available on Nuget and decided to write something on the subject myself. I’ve put together a quick sample, including integration with SimpleIoc in MVVM Light.</p>  <h2>Adding the package</h2>  <p>We start of with an empty solution, add the MVVM Light libraries to it, bind the datacontext of MainPage to MainViewModel as you would usually do. Once the MVVM setup is complete it’s time to add the Fluent Validation package to the project.</p>  <p><strong><font size="3">Install-Package FluentValidation </font></strong></p>  <p>Fluent Validation is an open source project available on <a href="http://fluentvalidation.codeplex.com/" target="_blank">Codeplex</a> </p>  <p>Fluent Validation has libraries for</p>  <ul>   <li>.net 4.0 </li>    <li>MVC 3 </li>    <li>MVC 4 </li>    <li>MVC 5 </li>    <li>Portable </li> </ul>  <p>The settings of the portable class library are</p>  <p><img src="http://i40.tinypic.com/2jfi1zd.jpg" /></p>  <p>Meaning that the implementation I’m about to show will work just as well on Windows Store apps, so +1 for code sharing!</p>  <h2>Creating the Model</h2>  <p>The demo app is a simple registration form, a new user will be able to enter his name, birthdate and country. We’ll build validation rules on those properties later on. We’ll only have one model class in this app, called Member.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7e3fc4e6-e86d-4ec5-a8ca-0ab60d528fc4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Member</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Name { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DateTime</span><span style="background:#ffffff;color:#000000"> BirthDate { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Country { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <h2>Setting up the validation</h2>  <p>There is some work involved in getting everything setup, don’t worry, it’s hardly rocket science.</p>  <p>We’re going to create a ValidaterFactory. We need this because we’re going to use SimpleIoc to inject the validators into the ViewModels. If you don’t want to do this you can just create the validators and instantiate them whenever you need one, the Codeplex page of Fluent Validation has great documentation on this.</p>  <p>A ValidatorFactory inherits from the ValidatorFactoryBase class included in the library</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0c98066c-3061-4f46-b941-55c5db0b436d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ValidatorFactory</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">ValidatorFactoryBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ValidatorFactory()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//register the Validators</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IValidator</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Member</span><span style="background:#ffffff;color:#000000">&gt;, </span><span style="background:#ffffff;color:#2b91af">MemberValidator</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IValidator</span><span style="background:#ffffff;color:#000000"> CreateInstance(</span><span style="background:#ffffff;color:#2b91af">Type</span><span style="background:#ffffff;color:#000000"> validatorType)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.GetInstance(validatorType) </span><span style="background:#ffffff;color:#0000ff">as</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IValidator</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>The constructor of the ValidatorFactory is where I’m registering all validators. You could do this in the ViewModelLocator as well, like any other class / repository / viewmodel but this keeps my VMLocator cleaner and keeps the validation logic a bit closer together.</p>  <p>The CreateInstance function needs to be overridden and returns the instance of the requested validator.</p>  <h2>Building a validator</h2>  <p>Almost there, in this step we’re building a validator for the Member class. A validator inherits from AbstractValidator&lt;T&gt; where T is the class you want to validate.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c5172fc1-df28-4a4e-8309-74fa189b6cec" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MemberValidator</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">AbstractValidator</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Member</span><span style="background:#ffffff;color:#000000">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MemberValidator()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.Name).NotEmpty();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.BirthDate).LessThan(</span><span style="background:#ffffff;color:#2b91af">DateTime</span><span style="background:#ffffff;color:#000000">.Today);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In the constructor of the validator we can finally start to add some rules. In this case we’re saying that the Name property should not be empty and that the birthdate property should be before today’s date.</p>  <p>We’ll need to register this class into our IOC, so in ViewModelLocator add this line</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6af0c608-4849-4990-babf-a83b880adc51" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">ValidatorFactory</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>We pass in ‘true’ as parameter to make sure the object is instantiated at the moment of registration, that way all validators are registered in the IOC as well (as seen in the ValidatorFactory’s constructor).</p>  <p>As a reference, these are all the built in validators of Fluent Validation</p>  <ul>   <li>NotNull </li>    <li>NotEmpty </li>    <li>NotEqual </li>    <li>Equal </li>    <li>Length </li>    <li>LessThan </li>    <li>LessThanOrEqual </li>    <li>GreaterThan </li>    <li>GreaterThanOrEqual </li>    <li>Predicate </li>    <li>RegEx </li>    <li>Email </li> </ul>  <p>Quite an impressive list, and probably most of what you’ll need. Just in case that the one that you need isn’t included, you can build your own, we’ll discuss that in a bit. Let’s get these rules to work first.</p>  <h2>Validating data</h2>  <p>So we have a factory, we have a validator, all are getting registered in our IOC, time to hook up the ViewModels and getting some validation done. </p>  <p>In the MainViewModel we add a property of type Member that we’ll bind against</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:158f3fba-ac57-4ea0-b953-42325ca4f05b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Member</span><span style="background:#ffffff;color:#000000"> _newMember;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Member</span><span style="background:#ffffff;color:#000000"> NewMember</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _newMember; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_newMember == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_newMember = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; NewMember);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Next, we’ll add two fields, one for the validator and one for the save command</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:844028c4-50a1-4b89-af04-0157f46d22d6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ICommand</span><span style="background:#ffffff;color:#000000"> _saveMemberCommand;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IValidator</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Member</span><span style="background:#ffffff;color:#000000">&gt; _validator;</span></li> </ol> </div> </div> </div>  <p>Next up is the ICommand property for the Save Command</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e1ddd4b1-15ea-4626-a873-d24b8c0020af" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ICommand</span><span style="background:#ffffff;color:#000000"> SaveMemberCommand</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _saveMemberCommand ?? (_saveMemberCommand = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(SaveMember)); }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Before we dive into the SaveMember method, we’ll need to do some constructor injection and initialization.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ff2ba343-671f-44da-8474-89da5c254e48" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">ValidatorFactory</span><span style="background:#ffffff;color:#000000"> validator)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">NewMember = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Member</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">BirthDate = </span><span style="background:#ffffff;color:#2b91af">DateTime</span><span style="background:#ffffff;color:#000000">.Today</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_validator = validator.GetValidator&lt;</span><span style="background:#ffffff;color:#2b91af">Member</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As a parameter we get our ValidatorFactory, using its GetValidator&lt;T&gt; function we can fill up the _validator field. NewMember gets instantiated and the BirthDate property is set to a default of today.</p>  <p>And last but not least, the SaveMember method</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:dbe44cd5-73f5-477f-9b2d-ceaf9f572dd4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SaveMember()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (IsValid())</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Registration completed!&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> IsValid()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ValidationResult</span><span style="background:#ffffff;color:#000000"> validationResult = _validator.Validate(NewMember);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!validationResult.IsValid)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">ShowErrors(validationResult.Errors);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ShowErrors(</span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">ValidationFailure</span><span style="background:#ffffff;color:#000000">&gt; errors)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">StringBuilder</span><span style="background:#ffffff;color:#000000"> builder = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StringBuilder</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">builder.AppendLine(</span><span style="background:#ffffff;color:#a31515">&quot;The following errors occured:&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ValidationFailure</span><span style="background:#ffffff;color:#000000"> error </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> errors)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">builder.AppendLine(</span><span style="background:#ffffff;color:#a31515">&quot;- &quot;</span><span style="background:#ffffff;color:#000000"> + error.ErrorMessage);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(builder.ToString(), </span><span style="background:#ffffff;color:#a31515">&quot;error&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">MessageBoxButton</span><span style="background:#ffffff;color:#000000">.OK);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>To validate an instance we call the Validate function on a validator for that type, in this case ‘Member’. That function returns a ValidationResult. ValidationResult contains a bool property IsValid and a list of errors that it found.</p>  <p>We iterate over this list and put every error into a StringBuilder to get a nice error message in a messagebox. If I try to save with an empty name and today’s date as birthdate I get this.</p>  <p><a href="http://i39.tinypic.com/68bg2b.jpg" target="_blank"><img src="http://i39.tinypic.com/68bg2b.jpg" width="194" height="323" /></a></p>    <p>Our validation is working! But those messages could be a bit better. Fluent Validator provides us with options to adjust the property name or the entire message. Change the constructor of the MemberValidator to this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:98785c36-86cd-48bc-89fb-8e26edfec97d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MemberValidator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.Name).NotEmpty().WithMessage(</span><span style="background:#ffffff;color:#a31515">&quot;You should enter your name&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.BirthDate).LessThan(</span><span style="background:#ffffff;color:#2b91af">DateTime</span><span style="background:#ffffff;color:#000000">.Today).WithName(</span><span style="background:#ffffff;color:#a31515">&quot;date of birth&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>On line 3 we use .WithMessage(“”) to replace the default message by whatever we want. Line 4 replaces the default name of the property, the result is similar yet slightly different</p>  <p><a href="http://i43.tinypic.com/jts28l.jpg" target="_blank"><img src="http://i43.tinypic.com/jts28l.jpg" width="199" height="332" /></a></p>  <h2>Adding a custom validator</h2>  <p>Let’s say that we want to add validation to the Country property. This property must have a value of either ‘Belgium’, ‘Netherlands’ or ‘Luxemburg’ (this is called the BeNeLux). Obviously, this isn’t included as one simple validator so we’ll just build it ourselves.</p>  <p>We’ll need a class that inherits from PropertyValidator and overrides the IsValid function.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fcd2aa55-3136-4106-bf6e-bbbaa174e0e6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">CountryMustBeInBenelux</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">PropertyValidator</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> CountryMustBeInBenelux()</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">: </span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;{PropertyName} is not a Benelux country&quot;</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> IsValid(</span><span style="background:#ffffff;color:#2b91af">PropertyValidatorContext</span><span style="background:#ffffff;color:#000000"> context)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (context.PropertyValue == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> country = context.PropertyValue.ToString().ToLower();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> country == </span><span style="background:#ffffff;color:#a31515">&quot;belgium&quot;</span><span style="background:#ffffff;color:#000000"> || country == </span><span style="background:#ffffff;color:#a31515">&quot;netherlands&quot;</span><span style="background:#ffffff;color:#000000"> || country == </span><span style="background:#ffffff;color:#a31515">&quot;luxemburg&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The string that we pass in to the base constructor is the default message that will be used for this validator. The IsValid function takes a parameter of PropertyValidatorContext. This will contain the property that we want to validate and its value.</p>  <p>Next, in the MemberValidator constructor we add the validation for the Country property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7e36e539-0b3c-4d79-935c-45a598fcd64a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MemberValidator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.Name).NotEmpty().WithMessage(</span><span style="background:#ffffff;color:#a31515">&quot;You should enter your name&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.BirthDate).LessThan(</span><span style="background:#ffffff;color:#2b91af">DateTime</span><span style="background:#ffffff;color:#000000">.Today).WithName(</span><span style="background:#ffffff;color:#a31515">&quot;date of birth&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RuleFor(member =&gt; member.Country).SetValidator(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">CountryMustBeInBenelux</span><span style="background:#ffffff;color:#000000">());</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As you can see we need to use the SetValidator function to add our own validator. </p>  <p>The result now is this (I’ve entered a name and a valid birthdate to clean up the error list a bit)</p>  <p><a href="http://i39.tinypic.com/1zdv6v.jpg" target="_blank"><img src="http://i39.tinypic.com/1zdv6v.jpg" width="231" height="385" /></a></p>  <p>&#160;</p>  <h2>Conclusion</h2>  <p>In this article I’ve discussed the use of Fluent Validator to do data validation in Windows Phone 8 apps. I’ve used the portable version of the library so these examples should work just fine on Windows 8 as well.</p>  <p>The Fluent Validator library has many more options than what I’ve discussed here and they are all well documented, head over the the <a href="http://fluentvalidation.codeplex.com/documentation" target="_blank">Codeplex</a> page if you want to do more and deeper validation.</p>  <p>The sample project can be found on my <a href="http://sdrv.ms/1barHvp" target="_blank">SkyDrive</a></p>]]></content>
      <post-name type="text"><![CDATA[Data validation in Windows Phone 8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="56a95f57-a603-47f2-bc72-9a2453688a61" />
        <category ref="11fd3df1-1b88-411d-b266-b8c815c8892e" />
        <category ref="e5987bad-8814-49a7-bbe1-9b92e3224014" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="58dfe641-4139-4473-8a52-4fa9a46841bc" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="37ffe41f-82a5-4dfd-a080-18a13fed1b5d" date-created="2013-12-03T10:28:07" date-modified="2013-12-03T10:28:07" approved="true" url="http://www.silverlightshow.net/news/Data-validation-in-Windows-Phone-8.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="1b38014e-91dd-4dd9-af07-ad8ae810531f" date-created="2013-11-13T13:05:23" date-modified="2013-11-13T13:05:26" approved="true" post-url="/blog/post/2013/11/13/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Xaml Styler for Visual Studio 2013]]></title>
      <content type="text"><![CDATA[<p>Xaml Styler is a free Visual Studio 2012 extension available from the <a href="http://visualstudiogallery.msdn.microsoft.com/d6634d0e-38fb-48b6-829f-dadbc5c2fb62" target="_blank">gallery</a>. I’ve been using this extension for quite some time now and I’m really happy with how it styles my XAML code. Unfortunately the extension isn’t compatible with Visual Studio 2013.</p>  <p>Luckily for us, the extension is on Codeplex. I’ve downloaded the code, referenced the new Visual Studio SDK and recompiled it. It seems to be working fine with Visual Studio 2013 now.</p>  <p>I’ve uploaded the binaries to my <a href="http://sdrv.ms/1hFbDHW" target="_blank">Skydrive</a> folder so that everyone can enjoy the extension in Visual Studio 2013 until the original author of the plug-in creates official Visual Studio 2013 support.</p>  <p>Be aware, this version isn’t thoroughly tested by anyone! I’ve compiled it, installed it and I’m currently using it. I haven’t ran into any problems yet but that doesn’t mean that it won’t have any problems. These binaries are supplied as-is.</p>  <p><a href="http://sdrv.ms/1hFbDHW" target="_blank">Download from Skydrive</a></p>  <p><a href="http://visualstudiogallery.msdn.microsoft.com/d6634d0e-38fb-48b6-829f-dadbc5c2fb62" target="_blank">Gallery link</a></p>  <p><a href="http://xamlstyler.codeplex.com/" target="_blank">Original Codeplex page</a></p>]]></content>
      <post-name type="text"><![CDATA[Xaml Styler for Visual Studio 2013]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="3b974ece-b1fc-4eb7-9bd4-9238c9354120" date-created="2014-02-04T15:52:03" date-modified="2014-02-04T15:52:03" approved="true" url="http://www.spikie.be/blog/post/2014/02/04/.aspx">
          <title type="text"><![CDATA[Branching XAML Styler

Branching XAML Styler]]></title>
        </trackback>
        <trackback id="ce0ddb2f-e254-4644-a51e-cb151c515a31" date-created="2014-02-06T12:13:58" date-modified="2014-02-06T12:13:58" approved="true" url="http://www.silverlightshow.net/news/Branching-XAML-Styler.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="eb16cc5b-3b17-4fda-b773-b485e739371f" date-created="2013-10-17T12:02:06" date-modified="2013-10-17T12:02:16" approved="true" post-url="/blog/post/2013/10/17/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[ViewModelBackstack for when you navigate to the same page]]></title>
      <content type="text"><![CDATA[<p>When working on my comic application for Windows Phone I encountered a problem that I’ve had in the past and have heard others ran into as well. When on the detailspage of a comic character I have a list of enemies of that character. Those enemies are clickable to load their details. Nothing hard there, but both the first character and its enemies are of the same type and they use the same view and viewmodel to show their data. This isn’t hard to do, the difficult part is using the phone’s back button. After navigating to the same CharacterDetailPage 4 times I would expect the back button to take me back through all the characters I’ve viewed.</p>  <p>I was trying to use OnNavigatedTo and OnNavigatedFrom events but apparently those do not fire when navigating to the same page. After a bit of tinkering I came up with a ViewModelBackstack class that does the trick.</p>  <p>I’ve uploaded the class and a sample project to <a href="https://github.com/NicoVermeir/ViewModelBackstack" target="_blank">GitHub</a> and I’ve created a NuGet package for everyone to use (my very first public package, hooray!). In this post I’ll walk through the sample project to explain how it works.</p>  <p>First of all, if you want to add the package to your solution, search for ViewModelBackstack on NuGet or use the command line</p>  <h2>Install-Package ViewModelBackstack</h2>  <p>Once that’s setup start building your application, MVVM style (the sample application uses MVVM Light, but ViewModelBackstack should work with all the other ones out there).</p>  <h2>The sample application</h2>  <p>The sample application is a basic one, it has two pages, a MainPage and a GuidPage. The MainPage only contains some text and a button to navigate to the second page. The GuidPage contains a textblock that is bound to a property on the viewmodel, and a button that simulates navigating to the same page again but loading in different data.</p>  <p>The scenario is this:</p>  <p>MainPage &gt; GuidPage &gt; GuidPage &gt; GuidPage &gt; …</p>  <p>MainVM &gt; GuidVM &gt; GuidVM &gt; GuidVM &gt; …</p>  <p>Follow it the other way around to know how the back button will respond.</p>  <h2>The ViewModelBackstack class</h2>  <p>ViewModelBackstack is a static class, and not a very big one.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c226f09d-6cd5-4721-a5b0-352af42041ed" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ViewModelBackStack</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Dictionary</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">&gt; _viewModelStack;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Add(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> key, </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> value)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_viewModelStack == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_viewModelStack = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Dictionary</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_viewModelStack.Add(key, </span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.SerializeObject(value));</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> Take&lt;T&gt;(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> key)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> toReturn = _viewModelStack[key];</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">Delete(key);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.DeserializeObject&lt;T&gt;(toReturn);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> TryTake&lt;T&gt;(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> key, </span><span style="background:#ffffff;color:#0000ff">out</span><span style="background:#ffffff;color:#000000"> T value)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">where</span><span style="background:#ffffff;color:#000000"> T : </span><span style="background:#ffffff;color:#0000ff">class</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">value = </span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.DeserializeObject&lt;T&gt;(_viewModelStack[key]);</span></li> <li>            <span style="background:#ffffff;color:#000000">Delete(key);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">value = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> ContainsKey(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> key)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_viewModelStack == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _viewModelStack.ContainsKey(key);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Delete(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> key)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_viewModelStack.Remove(key);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Replace(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> key, </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> newValue)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_viewModelStack[key] = </span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.SerializeObject(newValue);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoBack()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_viewModelStack == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _viewModelStack.Count &gt; 0;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> T GoBack&lt;T&gt;()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> toReturn = _viewModelStack.Last();</span></li> <li>        <span style="background:#ffffff;color:#000000">_viewModelStack.Remove(toReturn.Key);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">JsonConvert</span><span style="background:#ffffff;color:#000000">.DeserializeObject&lt;T&gt;(toReturn.Value);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>It contains a Dictionary&lt;string, string&gt; that will hold the instances of the viewmodels. The instances are serialized into JSON strings with Json.net. This to save memory and avoid reference issues.</p>  <p>There are some methods in there to manually take out a specific instance or to delete one. But more importantly are the CanGoBack() and GoBack() methods. Let’s have a look at how to use this.</p>  <h2>Usage</h2>  <p>In the GuidViewModel’s constructor we start listening for a message, when that message arrives we load in new data (in this case, generate a new GUID) GuidString is a normal property that calls RaisePropertyChanged from the setter.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:26763b08-a7c9-4c27-bf3e-207950c6e9e9" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> GuidViewModel()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">GenerateNewGuidMessage</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, msg =&gt; GenerateGuid()); </span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GenerateGuid()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">GuidString = Guid.NewGuid().ToString();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Next is the command that is bound to the button on the page, this is a RelayCommand that will call the LoadNewData method</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ff5ad792-da92-44b6-aee7-8fcd7964def6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> LoadNewData()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBackStack</span><span style="background:#ffffff;color:#000000">.ContainsKey(GuidString))</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ViewModelBackStack</span><span style="background:#ffffff;color:#000000">.Replace(GuidString, </span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">);</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ViewModelBackStack</span><span style="background:#ffffff;color:#000000">.Add(GuidString, </span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Send(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GenerateNewGuidMessage</span><span style="background:#ffffff;color:#000000">());</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The LoadNewData method will check if the ViewModelBackStack already contains the key we use (each instance needs a unique key, we’re using the GUID in this case). If it’s already there, replace it, if not add it to the backstack. After that, send the message to generate new data.</p>  <p>Note that we’re not actually navigating away from the page, since the NavigationService doesn’t actually navigate when you try going to the same page there’s really no use in trying.</p>  <p>The final step is intercepting the back button press and using it load in a previous instance of the GuidViewModel. We need to do this in the code-behind of the page, since we need to cancel the navigation there (by default, when pressing the back button here it would just take us back to MainPage, so navigation needs to be cancelled).</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8bfdcda5-1409-41ee-80d8-92e8812fdbbc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnBackKeyPress(</span><span style="background:#ffffff;color:#2b91af">CancelEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBackStack</span><span style="background:#ffffff;color:#000000">.CanGoBack())</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">DataContext = </span><span style="background:#ffffff;color:#2b91af">ViewModelBackStack</span><span style="background:#ffffff;color:#000000">.GoBack&lt;</span><span style="background:#ffffff;color:#2b91af">GuidViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">e.Cancel = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.OnBackKeyPress(e);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>OnBackKeyPress can be overriden from PhoneApplicationPage base class. If the ViewModelBackStack can go back we take out the most recent record in the dictionary, deserialize it to T, set that result as datacontext and we’re done. We can cancel the navigation by setting e.Cancel to true. Once the ViewModelBackStack is empty the app will return to MainPage.</p>  <h2>Wrap up</h2>  <p>So that’s about it. I’m currently building a Windows Phone app that uses the ViewModelBackStack, so there could be some changes coming in the next few weeks, or it might just prove to work perfectly as-is. </p>  <p>Feel free to fork the repo on <a href="https://github.com/NicoVermeir/ViewModelBackstack" target="_blank">GitHub</a> and send pull requests if you can enhance / improve upon the project, props will be given <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_28.png" />.</p>]]></content>
      <post-name type="text"><![CDATA[ViewModelBackstack for when you navigate to the same page]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="58dfe641-4139-4473-8a52-4fa9a46841bc" />
        <category ref="81e4515f-9482-48d4-83be-9800e6f3e100" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="fd4a26b3-c834-427a-86c4-f521b9734f45" date-created="2013-10-18T10:57:16" date-modified="2013-10-18T10:57:16" approved="true" url="http://www.silverlightshow.net/news/ViewModelBackstack-for-when-you-navigate-to-the-same-page.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="95c26281-cd94-46dd-aff1-fa3c0f510b6c" date-created="2013-09-27T16:03:30" date-modified="2013-09-27T16:03:30" approved="true" post-url="/blog/post/2013/09/27/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Launching a Win8 app from WP8 with Azure custom API]]></title>
      <content type="text"><![CDATA[<p>Imagine you have an app where people can browse through all sorts of data, let’s take Wikipedia for example. You find an interesting article on the Wikipedia app on your Windows Phone device. A phone screen is (usually) pretty small so it would be nice if we could just send that article to our pc where a toast pops up, when the toast is clicked the Wikipedia app on Windows 8 opens up on that same article. A nice experience for the user, added value for our apps and not too hard to do.</p>  <h2>The Service</h2>  <p>As the title of this post mentiones, we’re going to use Windows Azure Mobile Services for this. A while ago Microsoft launched the custom API option in Mobile Services (WAMS for short) and those custom APIs are just what we need.</p>  <p>The server side of WAMS uses Node.js so that means:</p>  <p><img src="http://i39.tinypic.com/3039rop.jpg" width="331" height="331" /></p>  <p>We’ll start by creating a new Mobile Service (if you don’t know how, follow <a href="http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started/?fb=nl-nl" target="_blank">this tutorial</a> to the point where they’re creating a new app, we’ll create the app manually). </p>  <p>Once the mobile service is created, navigate to the API tab and add a new API. Gave it a name and leave the permissions default. The end result should look like this.</p>  <p><a href="http://i42.tinypic.com/ri6k60.jpg" target="_blank"><img src="http://i42.tinypic.com/ri6k60.jpg" width="650" height="131" /></a></p>  <p>Click the arrow icon next to the API name to start editing the script. The script looks like this by default.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:04c672fe-e9d5-464c-8762-ae11eb3f77d4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">exports.post = </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> (request, response) {</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Use &quot;request.service&quot; to access features of your mobile service, e.g.:</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//   var tables = request.service.tables;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//   var push = request.service.push;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">response.send(statusCodes.OK, { message: </span><span style="background:#ffffff;color:#a31515">&#39;Hello World!&#39;</span><span style="background:#ffffff;color:#000000"> });</span></li> <li><span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#000000">exports.get = </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> (request, response) {</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">response.send(statusCodes.OK, { message: </span><span style="background:#ffffff;color:#a31515">&#39;Hello World!&#39;</span><span style="background:#ffffff;color:#000000"> });</span></li> <li><span style="background:#ffffff;color:#000000">};</span></li> </ol> </div> </div> </div>  <p>There are options here both for POST and GET methods, implemented with Hello World stuff. We’ll only be needing the POST part, the GET method we’ll just leave alone.</p>  <p>This is the new POST method:</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7eacaf76-e60e-4b0f-9858-9c007cbf7412" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">exports.post = </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> (request, response) {</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">process.env.WNS_CLIENT_ID = </span><span style="background:#ffffff;color:#a31515">&#39;YOUR_CLIENT_ID_HERE&#39;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">process.env.WNS_CLIENT_SECRET = </span><span style="background:#ffffff;color:#a31515">&#39;YOUR_CLIENT_SECRET_HERE&#39;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> wns = request.service.push.wns;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> message = request.body.message;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> title = request.body.title;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> launchParam = request.body.launchParam;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> channel = request.body.channel;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">wns.sendToastText02(channel, {</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">text1: title,</span></li> <li>        <span style="background:#ffffff;color:#000000">text2: message</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">},</span></li> <li>         <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">             <span style="background:#ffffff;color:#000000">launch: launchParam,</span></li> <li>             <span style="background:#ffffff;color:#000000">success: </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> () {</span></li> <li style="background: #f3f3f3">                 <span style="background:#ffffff;color:#000000">response.send(statusCodes.OK, { isSuccess: </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">, response: statusCodes.OK });</span></li> <li>             <span style="background:#ffffff;color:#000000">},</span></li> <li style="background: #f3f3f3">             <span style="background:#ffffff;color:#000000">error: </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> () {</span></li> <li>                 <span style="background:#ffffff;color:#000000">response.send(statusCodes.OK, { isSuccess: </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">, response: statusCodes.NOK });</span></li> <li style="background: #f3f3f3">             <span style="background:#ffffff;color:#000000">}</span></li> <li>         <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">};</span></li> </ol> </div> </div> </div> </p>  <p>You’ll notice on line two and three that you’ll need to insert your own client ID and client secret. To get those we’ll need to create a new app on the Windows Store developer site.</p>  <p>Give an app name to the new app, save it and open the Services option.</p>  <p><a href="http://i43.tinypic.com/2eukdnb.jpg" target="_blank"><img src="http://i43.tinypic.com/2eukdnb.jpg" width="396" height="255" /></a><a href="http://i39.tinypic.com/16h8zrn.jpg" target="_blank"><img src="http://i39.tinypic.com/16h8zrn.jpg" width="372" height="253" /></a></p>    <p>On the services page, click on “Live Services Site”, on that site select “Authenticating your Service” and take note of the Client ID and Client Secret.</p>  <p><a href="http://i41.tinypic.com/vgc2d.jpg" target="_blank"><img src="http://i41.tinypic.com/vgc2d.jpg" width="391" height="259" /></a><a href="http://i41.tinypic.com/vnfa6h.jpg" target="_blank"><img src="http://i41.tinypic.com/vnfa6h.jpg" width="378" height="187" /></a></p>    <p>Usually, when using push notifications from a WAMS we can add those two keys into the management portal on Azure. However, when using a Custom API the WNS (Windows Notification Service) doesn’t seem to know that they are there. That’s the reason we’re including them into the script code here on lines two and three.</p>  <p>Last step here is to create a new Windows Store application in Visual Studio, Right-click the project, select Store and associate it with the app we’ve just created on the Windows Developer portal.</p>  <p><a href="http://i44.tinypic.com/2cymk95.jpg" target="_blank"><img src="http://i44.tinypic.com/2cymk95.jpg" /></a></p>  <p>We now have an application hooked up to a registered application on the Windows Developer portal with access to WNS through the client ID and secret.</p>  <p>Let’s have a look at the rest of the script.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d491c982-b5de-4b68-aa28-7fe36881ca3a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> wns = request.service.push.wns;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> message = request.body.message;</span></li> <li><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> title = request.body.title;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> launchParam = request.body.launchParam;</span></li> <li><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> channel = request.body.channel;</span></li> </ol> </div> </div> </div>  <p>In the build-in API of WAMS we have access to an object called push. Push has a reference to WNS and can call push notifications. In a custom API we can find the Push object in request.service. Message and Title will be the content of the toast, channel is the channel used to send the toast from the server to the client and launchParam is what will determine the page we navigate to when the toast is clicked. All these parameters will be send over the wire from the Windows Phone app.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1953a182-20a4-42ba-876f-9a3bc14e5128" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">wns.sendToastText02(channel, {</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">text1: title,</span></li> <li>    <span style="background:#ffffff;color:#000000">text2: message</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">},</span></li> <li>     <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">launch: launchParam,</span></li> <li>         <span style="background:#ffffff;color:#000000">success: </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> () {</span></li> <li style="background: #f3f3f3">             <span style="background:#ffffff;color:#000000">response.send(statusCodes.OK, { isSuccess: </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">, response: statusCodes.OK });</span></li> <li>         <span style="background:#ffffff;color:#000000">},</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">error: </span><span style="background:#ffffff;color:#0000ff">function</span><span style="background:#ffffff;color:#000000"> () {</span></li> <li>             <span style="background:#ffffff;color:#000000">response.send(statusCodes.OK, { isSuccess: </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">, response: statusCodes.NOK });</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">}</span></li> <li>     <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>This piece of the script will do the actual sending of the push notification. We call the sendToastText02 method on the wns object (for an overview of all the possibilities of wns, have a look at <a href="http://msdn.microsoft.com/en-us/library/windowsazure/jj860484.aspx" target="_blank">MSDN</a>). The parameters for the method are simple, first it needs the channel. The channel is a direct link between an installation of your app and the server. It’s unique for every installation of the app. Next parameter is the payload of the toast, the information that will be shown on the toast message itself. Third parameter are the options. This is where we pass the launch parameters for the Windows app and the functions for success and error.</p>  <p>That’s all for the script. Pretty easy right?</p>  <h2>Windows Phone app</h2>  <p>The Windows Phone app is pretty straightforward as well. In this proof of concept it’ll just be an app with a bunch of buttons, when the Windows 8 app starts it will show the button that was clicked on the phone. Create a new Windows Phone 8.0 application and add the following NuGet package to the project.</p>  <h3>Install-Package WindowsAzure.MobileServices </h3>  <p>This will install the WAMS SDK into the project. We’ll need this SDK to fetch the channel and request the toast message. </p>  <p>The Windows Phone app only has one page with a really simple layout</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bb60f571-9d22-48d0-8f97-606c1b19dd76" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">&lt;!--  ContentPanel - place additional content here  --&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;ContentPanel&quot;</span></li> <li>           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,12,0&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Enter ID&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBoxId&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 1&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 2&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 3&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 4&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 5&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 6&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 7&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;Button_Click&quot;</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button 8&quot; /&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>A Textbox that will hold an ID and 8 buttons that use the same click event handler. The Windows 8 app that we’ll build in a minute will request a Channel from WNS, we’ll save that channel into our WAMS database. The ID that we enter here in the textbox is the ID of the record that holds the channel that we want to use. That means that in a real app, you’ll need to find a way to get the ID from the Windows 8 app into the Windows Phone app. Possibilities here are NFC or QR codes, or just plain text. Alternatively, you could use the username from a Microsoft Account to store and retrieve the channel instead of an ID.</p>  <p>Next we need to initialize the WAMS SDK in App.xaml.cs</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ebe8eacd-f80a-4a76-af34-fb9d2e798cda" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">partial</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Application</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> {</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MobileServiceClient</span><span style="background:#ffffff;color:#000000"> MobileService = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MobileServiceClient</span><span style="background:#ffffff;color:#000000">(</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;https://nicopushdemo.azure-mobile.net/&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;qCWCpYmWlJiOyXFQnKscFYnNixruku41&quot;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>You’ll need the values of your own service here of course. It can be found by going to the Azure management portal, selecting your WAMS and opening the “Connecting an existing application” option.</p>  <p><a href="http://i43.tinypic.com/sbsp6g.jpg" target="_blank"><img src="http://i43.tinypic.com/sbsp6g.jpg" width="614" height="332" /></a></p>  <p>Here’s the button event handler for the eight buttons</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c87c35cc-8a49-4687-8729-91d7387e5788" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Button_Click(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Notification</span><span style="background:#ffffff;color:#000000"> notification = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Notification</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">notification.Channel = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> FetchChannel(</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">.Parse(TextBoxId.Text));</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">notification.Message = </span><span style="background:#ffffff;color:#a31515">&quot;Click to launch the app&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">notification.Title = </span><span style="background:#ffffff;color:#a31515">&quot;Message from the Phone app!&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">notification.LaunchParam = ((</span><span style="background:#ffffff;color:#2b91af">Button</span><span style="background:#ffffff;color:#000000">) sender).Content.ToString();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> response = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.MobileService.InvokeApiAsync&lt;</span><span style="background:#ffffff;color:#2b91af">Notification</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NotificationResult</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#a31515">&quot;notifications&quot;</span><span style="background:#ffffff;color:#000000">, notification);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (response.IsSuccess)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Toast succes!&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">&gt; FetchChannel(</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> id)</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> channels = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.MobileService.GetTable&lt;</span><span style="background:#ffffff;color:#2b91af">Channel</span><span style="background:#ffffff;color:#000000">&gt;().Where(c =&gt; c.Id == id).ToListAsync();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> channels[0].ChannelUri;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>When one of the buttons is clicked an instance of Notification is created, Notification is a class that we build ourselves, looks like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:192e2027-cc1a-46e2-af33-bfe224f634a5" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Notification</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">JsonProperty</span><span style="background:#ffffff;color:#000000">(propertyName: </span><span style="background:#ffffff;color:#a31515">&quot;message&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Message { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">JsonProperty</span><span style="background:#ffffff;color:#000000">(propertyName: </span><span style="background:#ffffff;color:#a31515">&quot;title&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Title { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">JsonProperty</span><span style="background:#ffffff;color:#000000">(propertyName: </span><span style="background:#ffffff;color:#a31515">&quot;channel&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Channel { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">JsonProperty</span><span style="background:#ffffff;color:#000000">(propertyName: </span><span style="background:#ffffff;color:#a31515">&quot;launchParam&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> LaunchParam { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>FetchChannel will use the entered ID to fetch the channel from the WAMS database (saving the channel in the DB will be done from the Windows Store app). The LaunchParam is the content from the button that was clicked.</p>  <p>Once the Notification instance is filled up, we call the custom API by calling InvokeAPIAsync, the generic types passed in are the type of the parameter and the type of the expected result. The expected result is NotificationResult</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2c954b56-4f8a-4783-bfde-c193a09c6d51" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">NotificationResult</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">JsonProperty</span><span style="background:#ffffff;color:#000000">(PropertyName = </span><span style="background:#ffffff;color:#a31515">&quot;isSuccess&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> IsSuccess { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">JsonProperty</span><span style="background:#ffffff;color:#000000">(PropertyName = </span><span style="background:#ffffff;color:#a31515">&quot;response&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Response { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The parameters for InvokeApiAsync are the name of the custom API, the object of the same type that was specified. The WAMS SDK will take care of deserializing that object into a JSON format using Json.NET before sending it over the wire to our API.</p>  <h2>Windows 8 app</h2>  <p>The final piece of the puzzle is the Windows 8 app. This is a very basic app consisting of two pages. An empty MainPage and a SecondPage. This to prove that you can navigate to any page when launched from a toast.</p>  <p>Create an empty Windows 8 app and once again add the WAMS SDK through NuGet.</p>    <h3>Install-Package WindowsAzure.MobileServices </h3>  <p>We’ll start by initializing the WAMS SDK in App.xaml.cs</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c9772229-4533-4130-a7d8-deece192f095" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">sealed</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">partial</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Application</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> {</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PushNotificationChannel</span><span style="background:#ffffff;color:#000000"> CurrentChannel { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MobileServiceClient</span><span style="background:#ffffff;color:#000000"> MobileService = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MobileServiceClient</span><span style="background:#ffffff;color:#000000">(</span></li> <li style="background: #f3f3f3">             <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;https://nicopushdemo.azure-mobile.net/&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li>             <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;qCWCpYmWlJiOyXFQnKscFYnNixruku41&quot;</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> AcquirePushChannel()</span></li> <li>     <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">CurrentChannel = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PushNotificationChannelManager</span><span style="background:#ffffff;color:#000000">.CreatePushNotificationChannelForApplicationAsync();</span></li> <li>         <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> settings = Windows.Storage.</span><span style="background:#ffffff;color:#2b91af">ApplicationData</span><span style="background:#ffffff;color:#000000">.Current.LocalSettings;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>         <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000">(settings.Values.ContainsKey(</span><span style="background:#ffffff;color:#a31515">&quot;channel&quot;</span><span style="background:#ffffff;color:#000000">))</span></li> <li style="background: #f3f3f3">         <span style="background:#ffffff;color:#000000">{</span></li> <li>             <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> previousChannel = settings.Values[</span><span style="background:#ffffff;color:#a31515">&quot;channel&quot;</span><span style="background:#ffffff;color:#000000">].ToString();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>             <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000">(previousChannel == CurrentChannel.Uri)</span></li> <li style="background: #f3f3f3">                 <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>         <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>         <span style="background:#ffffff;color:#000000">settings.Values[</span><span style="background:#ffffff;color:#a31515">&quot;channel&quot;</span><span style="background:#ffffff;color:#000000">] = CurrentChannel.Uri;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>         <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> MobileService.GetTable&lt;</span><span style="background:#ffffff;color:#2b91af">Channel</span><span style="background:#ffffff;color:#000000">&gt;().InsertAsync(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Channel{</span><span style="background:#ffffff;color:#000000">ChannelUri = CurrentChannel.Uri});</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>A bit more initial work needed here. First the same codeblock as the one in the WP8 app. Next is the AcquirePushChannel method. This one will ask WNS for a push channel, save it to the WAMS DB and into the Application’s settings. This is because a channel has a lifetime, during this time the application will be able to reuse that same channel. On every app start we’ll check if the channel we receive from WNS is the same one that is stored in the WAMS DB, if it isn’t we store it again.</p>  <p>Now, the magic also happens here in App.xaml.cs, at the end of the OnLaunched method.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:20e6bcdd-b495-4a5f-bb10-180cd80900e6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> launchArgs = e.Arguments.Trim().ToString();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (launchArgs != </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Empty)</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">rootFrame.Navigate(</span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">SecondPage</span><span style="background:#ffffff;color:#000000">), launchArgs);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">// Ensure the current window is active</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.Activate();</span></li> </ol> </div> </div> </div>  <p>We’ll check to see if the LaunchActivedArgs have some arguments. If they don’t, nothing special happens and MainPage is loaded. If they do, the argument will be the LaunchParams we’ve passed from the WP8 app, to the custom API. That value has now finally reached our Windows 8 app via the toast. We navigate to SecondPage and pass in the launchArgs as parameter.</p>  <p>SecondPage.xaml looks like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:39e90d6e-e0dc-4da7-922f-6c6fa7d41e66" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> Background</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">ThemeResource</span><span style="background:#ffffff;color:#ff0000"> ApplicationPageBackgroundThemeBrush}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;SelectedItem&quot;</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> HeaderTextBlockStyle}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>In the code behind of SecondPage we’ll need to override OnNavigatedTo</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:689d5ef3-a39c-4217-8b37-2a28985cd6f6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnNavigatedTo(</span><span style="background:#ffffff;color:#2b91af">NavigationEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">SelectedItem.Text = </span><span style="background:#ffffff;color:#a31515">&quot;Navigated to this page by clicking in the phone app on &quot;</span><span style="background:#ffffff;color:#000000"> + e.Parameter;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.OnNavigatedTo(e);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>And that’s basically it. </p>  <h2>Making it happen</h2>  <p>Run the Windows 8 app once, so that it’s installed on your system and a channel is registered and saved into the WAMS DB. Feel free to close the app afterwards.</p>  <p>Launch the Windows Phone app, insert the correct ID into the textbox and hit any of the buttons.</p>  <p><a href="http://i42.tinypic.com/11rygsx.jpg" target="_blank"><img src="http://i42.tinypic.com/11rygsx.jpg" width="246" height="410" /></a></p>  <p>Click the toast when it pops up and be amazed by the result <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_27.png" /></p>  <p><img src="http://i42.tinypic.com/1z3p5di.jpg" /></p>    <p><img src="http://i42.tinypic.com/2q9b9dv.jpg" width="762" height="43" /></p>  <h2>Conclusion</h2>  <p>In this post I’ve talked about a way to share data between apps through the use of push notifications. When you have the same app on both Windows Phone and Windows 8 this provides a cool way for your user to switch platforms while remaining on the same part of the app.</p>  <p>Download the projects from my SkyDrive:</p>  <ul>   <li><a href="http://sdrv.ms/1987H82" target="_blank">Windows 8</a></li>    <li><a href="http://sdrv.ms/1987WQr" target="_blank">Windows Phone</a></li> </ul>]]></content>
      <post-name type="text"><![CDATA[Launching a Win8 app from WP8 with Azure custom API]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="dcadc47c-d872-4eff-b325-87e1a4b16ec6" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="58dfe641-4139-4473-8a52-4fa9a46841bc" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="216678be-4a73-4acf-9821-c9ab4a94937c" date-created="2013-09-30T11:24:44" date-modified="2013-09-30T11:24:44" approved="true" url="http://www.silverlightshow.net/news/Launching-a-Win8-app-from-WP8-with-Azure-custom-API.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="8e72523f-d534-4126-b6d7-54b2fafe5ceb" date-created="2013-08-30T11:05:00" date-modified="2013-08-30T11:17:29" approved="true" post-url="/blog/post/2013/08/30/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[LongListSelector with bindable SelectedItem]]></title>
      <content type="text"><![CDATA[<p>In Windows Phone 8 Microsoft wants us to use the LongListSelector instead of the ListBox. But it seems they forgot about something, the SelectedItem property of the LongListSelector isn’t bindable. There are multiple work-arounds for this like event to command in XAML or setting the viewmodel property from the SelectionChanged event. That last one breaks your entire MVVM setup since the code behind of the view is now directly setting properties on the viewmodel.</p>  <p>Today I once again ran into this problem and decided to extend the LongListSelector to allow SelectedItem binding (note: I haven’t searched for an existing extended LongListSelector so it might as well exist somewhere else, this is just my attempt at it).</p>  <p>Create either a Windows Phone class library or a new class in a WP8 project, I called it ExtendedSelector and have it derive from LongListSelector, you’ll need to add a using statement for the Microsoft.Phone.Controls namespace.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:93eb1bf2-4782-4a28-a282-d3d18e356b9b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ExtendedSelector</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">LongListSelector</span></li> </ol> </div> </div> </div>  <p>First we’ll need a dependency property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4a70594c-fa09-4e7f-9993-560a3fee895a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> SelectedItemProperty =</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span><span style="background:#ffffff;color:#a31515">&quot;SelectedItem&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ExtendedSelector</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">)));</span></li> </ol> </div> </div> </div>  <p>and the property that is set through the DP</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8d01e3db-82bc-4aa8-9439-1c6d78fdb775" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> SelectedItem</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> GetValue(SelectedItemProperty); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(SelectedItemProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Notice the “new” keyword on line 1? LongListSelector already has a SelectedItem property of type object, by using the new keyword we make the ExtendedSelector use our version of the property instead of the one from its base class</p>  <p>So now we have a property that can be bound to an object on our viewmodel, all there’s left to do now is set the actual selected item to the property. We do this by handling the SelectionChanged event, the event handler is hooked up in the constructor.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:95a62aa7-8451-484f-9a5c-48aba1f566d8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ExtendedSelector()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">SelectionChanged += (sender, args) =&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">SelectedItem = args.AddedItems[0];</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">};</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>And that’s it, we now have a LongListSelector with a bindable SelectedItem property</p>  <h2>Multi-select</h2>  <p>Let’s take it a step further, we want to enable multi-selection of items in our ExtendedSelector.</p>  <p>Start by adding another dependency property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8bb3424b-70c2-4953-98e2-30cd213c3d57" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> SelectionModeProperty =</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span><span style="background:#ffffff;color:#a31515">&quot;SelectionMode&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ExtendedSelector</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000"> SelectionMode</span></li> <li><span style="background:#ffffff;color:#000000"> {</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">) GetValue(SelectionModeProperty); }</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(SelectionModeProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> }</span></li> </ol> </div> </div> </div>  <p>SelectionMode is an enum containing three types of modes</p>  <ul>   <li>Single</li>    <li>Multiple</li>    <li>Extended</li> </ul>  <p>I only need single and multiple, so I’m not going to do anything with Extended. Change the constructor of the ExtendedSelector to this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bd6dcd76-5547-41e8-a73c-36f6fa33e1a9" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ExtendedSelector()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">SelectionMode = </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">.Single;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">SelectionChanged += (sender, args) =&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000">(SelectionMode == </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">.Single)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">SelectedItem = args.AddedItems[0];</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (SelectionMode == </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">.Multiple)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (SelectedItem == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">SelectedItem = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> item </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> args.AddedItems)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">((</span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;)SelectedItem).Add(item);                   </span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> removedItem </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> args.RemovedItems)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (((</span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;) SelectedItem).Contains(removedItem))</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000">((</span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;) SelectedItem).Remove(removedItem);</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">}</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>When the class is instantiated we default the SelectionMode to Single, when the property is set from Xaml the setter fires after the constructor, so this is a safe place to put that. Next in the event handler we check for the SelectionMode, if it’s set to Single, nothing changes. When set to Multiple we check if SelectedItem already contains items, if it does add the newly selected item to the list, if it doesn’t we’ll instantiate SelectedItem first as a List&lt;object&gt;. If there are any deselected items we remove them from the list.</p>  <p>And that’s it. A problem easily solved. I’m just hoping that the product team will actually include this functionality in the next SDK update so this post becomes obsolete.</p>  <h2>Conclusion</h2>  <p>This post is a quick fix for the LongListSelector so it supports binding to SelectedItem. If you want the complete class, grab it on <a href="https://gist.github.com/NicoVermeir/6387875" target="_blank">GitHub</a></p>  <h2>Update</h2>  <p>Scott Lovegrove pointed out that the Windows Phone toolkit (<a href="http://phone.codeplex.com/">http://phone.codeplex.com/</a> ) has a LongListMultiSelector, allowing for multiple item selection. It still doesn't have a bindable SelectedItem property but it should be pretty easy to make one like I did with the normal LongListSelector it his post.</p>]]></content>
      <post-name type="text"><![CDATA[LongListSelector with bindable SelectedItem]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="d952ab8a-9d26-4d3d-bb1c-e64272066ec0" date-created="2013-09-02T10:20:58" date-modified="2013-09-02T10:20:58" approved="true" url="http://www.silverlightshow.net/news/LongListSelector-with-bindable-SelectedItem.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="550feedf-1f36-4162-b276-6e6f2ef90bdd" date-created="2013-08-21T10:35:25" date-modified="2013-08-21T10:35:31" approved="true" post-url="/blog/post/2013/08/21/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Don’t forget the system tray in your WP8 app]]></title>
      <content type="text"><![CDATA[<p>The system tray in Windows Phone 8 is the small bar at the top where the clock, signal strength, connectivity icons, etc. reside. In most apps I’ve used developers tend to do one of two things there:</p>  <ul>   <li>leave it</li>    <li>hide it</li> </ul>  <p>An example here is Microsoft’s Facebook app (yes, even the first party apps do this), take a look</p>  <p><a href="http://i40.tinypic.com/14iq3xe.jpg" target="_blank"><img src="http://i40.tinypic.com/14iq3xe.jpg" width="161" height="268" /></a></p>  <p>This is a pretty decent looking app (yes it violates a bunch of “Modern UI” guidelines but it does look decent). However, the black system tray at the top of the screen breaks the experience. It feels like the app lies on top of the homescreen, while this is actually true it’s a better user experience to suck the user completely into the application.</p>  <p>Another option for the Facebook app would be to hide the system tray, this won’t break the experience for the user on the visual side.</p>  <p><a href="http://i42.tinypic.com/2lnh6it.jpg" target="_blank"><img src="http://i42.tinypic.com/2lnh6it.jpg" width="159" height="255" /></a></p>  <p>But this solution has another downside, the Facebook app needs an active internet connection to work, suppose the app throws an error saying that your internet connection is down, what’s your first reaction? You check the signal strength and / or wifi connectivity icon, and where do those live? In the system tray that is hidden now, so the user needs to exit the app to check the system tray (same goes for checking the time).</p>  <p>Only hide the system tray when your app absolutely requires it, like a game that needs all the screen estate it can get.</p>  <p>So let’s try a third solution, something a lot of Windows Phone developers tend to forget or don’t know is possible, we can style the system tray. This is what the Facebook app could look like</p>  <p><a href="http://i40.tinypic.com/2vailg3.jpg" target="_blank"><img src="http://i40.tinypic.com/2vailg3.jpg" width="160" height="267" /></a></p>  <p>By simply giving the system tray the same color as the header bar of the app we’ve give the app a little extra while still having a visible system tray. </p>  <p>I used this approach in my Traffic Chat app</p>  <p><a href="http://i39.tinypic.com/9sax42.jpg" target="_blank"><img src="http://i39.tinypic.com/9sax42.jpg" width="158" height="263" /></a></p>  <p>Same story in this app, it looks much more like a part of the OS instead of “just an app”.</p>  <h2>Let’s do it!</h2>  <p>It’s actually very easy to get this done.</p>  <p>In your Windows Phone application, navigate to the App.xaml page. In that page there should be an Application.Resources tag. As you might (should) know, we can define application wide styles here, if we don’t provide a key to a style it applies to all controls of the specified type throughout the app. Sounds easy enough, let’s do it.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:26fb39a7-e373-4156-9d7d-de0a478c4fab" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Style</span><span style="background:#ffffff;color:#ff0000"> TargetType</span><span style="background:#ffffff;color:#0000ff">=&quot;phone:PhoneApplicationPage&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Setter</span><span style="background:#ffffff;color:#ff0000"> Property</span><span style="background:#ffffff;color:#0000ff">=&quot;shell:SystemTray.BackgroundColor&quot;</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;Red&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Setter</span><span style="background:#ffffff;color:#ff0000"> Property</span><span style="background:#ffffff;color:#0000ff">=&quot;shell:SystemTray.ForegroundColor&quot;</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;Green&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Style</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>The style has a target type of PhoneApplicationPage, the class that is used by all pages in a Windows Phone app. We set the backgroundcolor to Red and the Foregroundcolor to Green, this will look very pretty right? <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_26.png" /></p>  <p>If we run the app now you’ll see that nothing has changed. A downside of this is that not providing a key doesn’t work for the PhoneApplicationPage, so we’ll need to name the style and apply it to every page in the application.</p>  <p>Change the above code to this (add a key, name it whatever you want)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7e53b140-563b-495e-a5b4-b1ac0e6efca9" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Style</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Key</span><span style="background:#ffffff;color:#0000ff">=&quot;DefaultPageStyle&quot;</span><span style="background:#ffffff;color:#ff0000"> TargetType</span><span style="background:#ffffff;color:#0000ff">=&quot;phone:PhoneApplicationPage&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Setter</span><span style="background:#ffffff;color:#ff0000"> Property</span><span style="background:#ffffff;color:#0000ff">=&quot;shell:SystemTray.BackgroundColor&quot;</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;Red&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Setter</span><span style="background:#ffffff;color:#ff0000"> Property</span><span style="background:#ffffff;color:#0000ff">=&quot;shell:SystemTray.ForegroundColor&quot;</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;Green&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Style</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>And on every page that you want to style the systemtray, apply the style (line 15 in this code block).</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:29c5ab4e-9c96-4a29-9141-afb47ae1a84f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;PhoneApp1.MainPage&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">phone</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">d</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> mc</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Ignorable</span><span style="background:#ffffff;color:#0000ff">=&quot;d&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> FontFamily</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontFamilyNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> FontSize</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontSizeNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneForegroundBrush}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> SupportedOrientations</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span><span style="background:#ffffff;color:#ff0000"> Orientation</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">SystemTray.IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span></li> <li>   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> DefaultPageStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> </ol> </div> </div> </div> </p>  <p>If we run the app now we’ll get a “beautiful” styled system tray.</p>  <p><a href="http://i41.tinypic.com/dwwe1y.jpg" target="_blank"><img src="http://i41.tinypic.com/dwwe1y.jpg" width="150" height="250" /></a></p>  <p>&#160;</p>  <h2>Conclusion</h2>  <p>Styling the system tray is something that is often overlooked. Spend some time on this, it’ll make your app look even better without annoying your users with a hidden system tray. It’s easy to do and doesn’t take a lot of time.</p>  <p>Download the Green/Red system tray app from my <a href="http://sdrv.ms/16v47XC" target="_blank">SkyDrive</a></p>]]></content>
      <post-name type="text"><![CDATA[Don’t forget the system tray in your WP8 app]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="ab8fb9b5-4f7f-4c08-b29e-ef0ecd894409" date-created="2013-08-27T10:41:32" date-modified="2013-08-27T10:41:32" approved="true" url="http://www.silverlightshow.net/news/Don-t-forget-the-system-tray-in-your-Windows-Phone-8-app.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="e613f9c3-302b-4e89-b813-2ee87c8d5b41" date-created="2013-07-31T10:18:29" date-modified="2013-07-31T10:19:03" approved="true" post-url="/blog/post/2013/07/31/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Navigating pages in WP8 like in Win8]]></title>
      <content type="text"><![CDATA[<p>Currently, there are quite some inconsistencies between the Windows Phone SDK and the Windows 8 SDK. One of the very first that you’ll run into when developing for both platforms is the navigation api. The navigation api is used for navigating between different pages inside your app. It contains a method to navigate to a certain page, a method to navigate back one page, a few properties and so on. The thing that you’ll probably use most is the Navigate method and here’s quite a big difference between both platforms. For example, this is how you navigate to a page in Windows Phone</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8c56aa75-ff5f-490f-b456-15f3b19bb6de" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">NavigationService.Navigate(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;/SecondPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">UriKind</span><span style="background:#ffffff;color:#000000">.Relative));</span></li> </ol> </div> </div> </div>  <p>And this is the same but in Windows 8</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b6adc1c1-eef8-421f-9061-a836ca8bac0d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">NavigationService.Navigate(</span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">SecondPage</span><span style="background:#ffffff;color:#000000">));</span></li> </ol> </div> </div> </div>  <p>The Windows 8 way of navigating has one big advantage, intellisense. By navigating to a type instead of a Uri we eliminate the chance for typos or that we keep forgetting the first “/” in the Uri, or forgetting to mark it as Relative. All things I believe we’ve run into at least once before.</p>  <h2>The service</h2>  <p>Let’s build our own NavigationService for Windows Phone that supports navigating to a type, just like in Windows 8.</p>  <p>One important thing to remember when using this class is that the namespace of the page you want to navigate to has to be the same as the folder structure where your page lives in. For example, if you have a SecondPage.xaml that sits in a Views folder then the namespace should be MyApp.Views and the complete class name is MyApps.Views.SecondPage</p>  <p>First some properties</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:695678a2-6105-47d0-b9bd-30313bd88b79" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhoneApplicationFrame</span><span style="background:#ffffff;color:#000000"> _rootFrame;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoBack { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _rootFrame.CanGoBack; } }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoForward { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _rootFrame.CanGoForward; } }</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> RootFrame</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _rootFrame; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_rootFrame = (</span><span style="background:#ffffff;color:#2b91af">PhoneApplicationFrame</span><span style="background:#ffffff;color:#000000">)</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Our NavigationService needs a reference to the application’s RootFrame, the NavigationService in my case implements an interface that lives in a PCL. That PCL has no idea what PhoneApplicationFrame is so I made the property an object, the reason for the interface is that I might want to build this exact same service for other platforms.</p>  <p>CanGoBack and CanGoForward are read-only properties that just pass the values from the rootframe properties.</p>  <p>Next we’ll have a look at the most important function, navigating to another page.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cd367b69-706d-453a-b091-6e02a35f0e48" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#2b91af">Type</span><span style="background:#ffffff;color:#000000"> destination)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> fqname = destination.FullName;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> path = </span><span style="background:#ffffff;color:#2b91af">Regex</span><span style="background:#ffffff;color:#000000">.Split(fqname, </span><span style="background:#ffffff;color:#a31515">@&quot;&#92;.&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> destinationUri = </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Empty;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 1; i &lt; path.Length; i++)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">destinationUri = destinationUri + </span><span style="background:#ffffff;color:#a31515">&quot;/&quot;</span><span style="background:#ffffff;color:#000000"> + path[i];</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_rootFrame.Navigate(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000">(destinationUri + </span><span style="background:#ffffff;color:#a31515">&quot;.xaml&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">UriKind</span><span style="background:#ffffff;color:#000000">.Relative));</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The method takes in a Type, that type will be the page we want to reach. First thing we do is getting the full name of the type (namespace + class name), once we have that we can split the full name at each dot using a very simple Regular Expression. The first part of the namespace will be the app name, that’s something we don’t need so the for loop starts at the second item (index 1). The for loop will start building a string, the result will be something like “/Views/SecondPage.xaml”. Once we have that string we can navigate as usual by calling the Navigate function on the rootframe and passing in the Uri. Quite simple, and very effective. Other things I did was mapping some functions of the rootframe into my service like GoForward, GoBack, RemoveBackEntry and ResetBackStack. I’ve also created some overloads so that the service can still navigate the good old way by passing in either a string or a Uri.</p>  <h2>Using the service</h2>  <p>Using the service is pretty straightforward. You’ll need an instance of it in your app, one that’s available throughout the entire app. So either use an IOC or create a static property in your App.xaml.cs, in this example we’ll go with the App.xaml.cs way, just to keep it short.</p>  <p>In App.xaml.cs add this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fe9633d8-f52e-4a97-9e0b-5dcbd6180130" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000"> NavigationService { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> </ol> </div> </div> </div>  <p>Then look for the InitializePhoneApplication method in App.xaml.cs (the one that says “Don’t add any additional code to this method”) and add some code to it <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_25.png" /> (lines 18 &amp; 19)</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0ef5fcc9-1a48-4db5-890e-7d727f5ec64c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">// Do not add any additional code to this method</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> InitializePhoneApplication()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (phoneApplicationInitialized)</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create the frame but don&#39;t set it as RootVisual yet; this allows the splash</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// screen to remain active until the application is ready to render.</span></li> <li>    <span style="background:#ffffff;color:#000000">RootFrame = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhoneApplicationFrame</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RootFrame.Navigated += CompleteInitializePhoneApplication;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Handle navigation failures</span></li> <li>    <span style="background:#ffffff;color:#000000">RootFrame.NavigationFailed += RootFrame_NavigationFailed;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Handle reset requests for clearing the backstack</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RootFrame.Navigated += CheckForResetNavigation;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">NavigationService = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">();</span></li> <li>    <span style="background:#ffffff;color:#000000">NavigationService.RootFrame = RootFrame;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Ensure we don&#39;t initialize again</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">phoneApplicationInitialized = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>Line 18 instantiates the service and line 19 sets the rootframe property, these two lines of code are the most important ones in the app.</p>  <p>Add some page to the app, make sure that the namespace is correct, add a button on the first page and set this as code for the button.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4aa9c1b2-14d2-4f2e-bfb9-0fc1f02bec6d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Button_Click(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.NavigationService.Navigate(</span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">SecondPage</span><span style="background:#ffffff;color:#000000">));</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This will call the Navigate function on the static property in App.xaml.cs, pass in the type of the page and our NavigationService will do the rest.</p>  <h2>Conclusion</h2>  <p>In this post I’ve shown you a way to mimic the Windows 8 way of navigating between pages. Using this can make it easier to share code between platforms.</p>  <p>There are only two differences between this method and the native Windows 8 implementation.</p>  <ul>   <li>We need to do some plumbing in App.xaml.cs to make the service work </li>    <li>We can’t pass parameters into the navigation, but 1) that&#160; should be doable and 2) you shouldn’t do that. Use some messaging mechanism to send data between views / viewmodels </li> </ul>  <p>To end this, here’s the complete class and interface that I use regularly in my projects </p>  <p>Interface (lives in a PCL project)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7cac8944-ebf9-4c48-9290-850a504bb688" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Allows page navigation in the app, RootFrame needs to be set in App.xaml</span></li> <li><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">interface</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> The rootframe for the app, this will take care of all the navigation</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> RootFrame { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> true when there&#39;s a page on the backstack</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoBack { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; }</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> true when there&#39;s a page on the forwardstack</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoForward { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> go one step back on the backstack</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GoBack();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> go one step forward on the stack</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GoForward();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> resets the entire backstack</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ResetBackstack();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> remove the last entry from the backstack</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> RemoveBackEntry();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> navigate to a page using the type of the page</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;destination&quot;&gt;</span><span style="background:#ffffff;color:#008000">the type of the page we want to navigate to</span><span style="background:#ffffff;color:#808080">&lt;/param&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;parameter&quot;&gt;</span><span style="background:#ffffff;color:#008000">an optional parameter</span><span style="background:#ffffff;color:#808080">&lt;/param&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;returns&gt;</span><span style="background:#ffffff;color:#008000">true/false</span><span style="background:#ffffff;color:#808080">&lt;/returns&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#2b91af">Type</span><span style="background:#ffffff;color:#000000"> destination);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> navigate to a page using a uri string, paramers are passed using querystring</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;uri&quot;&gt;</span><span style="background:#ffffff;color:#008000">string pointing to the page we want to navigate too</span><span style="background:#ffffff;color:#808080">&lt;/param&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;returns&gt;&lt;/returns&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> uri);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> navigate to a page using a uri, paramers are passed using querystring</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;uri&quot;&gt;</span><span style="background:#ffffff;color:#008000">uri we want to navigate too</span><span style="background:#ffffff;color:#808080">&lt;/param&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;returns&gt;&lt;/returns&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000"> uri);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Implementation in a Windows Phone project</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:49253a26-9aa9-4e63-8f9a-e6863a2a57e3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">INavigationService</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhoneApplicationFrame</span><span style="background:#ffffff;color:#000000"> _rootFrame;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoBack { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _rootFrame.CanGoBack; } }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> CanGoForward { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _rootFrame.CanGoForward; } }</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> RootFrame</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _rootFrame; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">_rootFrame = (</span><span style="background:#ffffff;color:#2b91af">PhoneApplicationFrame</span><span style="background:#ffffff;color:#000000">)</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GoBack()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!_rootFrame.CanGoBack) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_rootFrame.GoBack();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ResetBackstack()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_rootFrame.BackStack.GetEnumerator().Reset();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> RemoveBackEntry()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_rootFrame.RemoveBackEntry();            </span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GoForward()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!_rootFrame.CanGoForward) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_rootFrame.GoForward();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#2b91af">Type</span><span style="background:#ffffff;color:#000000"> destination)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> fqname = destination.FullName;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> path = </span><span style="background:#ffffff;color:#2b91af">Regex</span><span style="background:#ffffff;color:#000000">.Split(fqname, </span><span style="background:#ffffff;color:#a31515">@&quot;&#92;.&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> destinationUri = </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Empty;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 1; i &lt; path.Length; i++)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">destinationUri = destinationUri + </span><span style="background:#ffffff;color:#a31515">&quot;/&quot;</span><span style="background:#ffffff;color:#000000"> + path[i];</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">_rootFrame.Navigate(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000">(destinationUri + </span><span style="background:#ffffff;color:#a31515">&quot;.xaml&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">UriKind</span><span style="background:#ffffff;color:#000000">.Relative));</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> uri)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">_rootFrame.Navigate(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000">(uri, </span><span style="background:#ffffff;color:#2b91af">UriKind</span><span style="background:#ffffff;color:#000000">.Relative));</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> Navigate(</span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000"> uri)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">_rootFrame.Navigate(uri);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Enjoy!</p>]]></content>
      <post-name type="text"><![CDATA[Navigating pages in WP8 like in Win8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="81e4515f-9482-48d4-83be-9800e6f3e100" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="498d219b-7f1f-47ee-bd39-aa3e03aaa79f" date-created="2013-07-31T12:43:37" date-modified="2013-07-31T12:43:37" approved="true" url="http://www.silverlightshow.net/news/Navigating-pages-in-Windows-Phone-8-like-in-Windows-8.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="577884d7-de39-40e0-8c37-d7d0c90ef8cf" date-created="2013-07-23T11:48:49" date-modified="2013-07-23T11:48:49" approved="true" post-url="/blog/post/2013/07/23/.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Traffic Chat: My new Windows Phone 8 app]]></title>
      <content type="text"><![CDATA[<p>I launched a new Windows Phone 8 app last week called Traffic Chat. A friend of mine came up what the idea of having a chat with other drivers that are stuck in the same traffic jam as you are, perfect idea for a smartphone app.</p>  <p>The way the app works is actually fairly easy, the app detects the street that you’re on, takes your license plate (the plate is saved into the Isolated Storage Settings so it only needs to be entered on first start). The apps sends that data to the server (powered by SignalR and running on Azure Websites), the server checks if a chatroom with the name of the street already exists, if it doesn’t it creates it first, and then enters you as a user, with your license plate as username, into the chatroom. </p>  <p>The great thing about the app is that it hardly requires any user interaction to get started. Since you’re still behind the weel of a car this was very important to me, safety first. Once the app launches it starts detecting immediately with a big pulsating icon to show that it’s still working, if something goes wrong the icon turns red and a big retry button appears.</p>  <p>Even the chatting can be done hands free through speech-to-text.</p>  <p>And as usual, once the app was released I noticed a small mistake on my part, once you’re chatting there’s a button to let your social networks know that you’re using the app but the link that should point to the app actually points to MSDN, oops. An update for this is submitted and should be live this week.</p>  <p>So, try out the app whenever you’re stuck in traffic, but do be careful. Any features missing? Or have some cool idea? Get in touch and I’ll see what I can do, props will be given where needed of course <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_24.png" /></p>  <p><a href="http://www.windowsphone.com/nl-be/store/app/trafficchat/8e681b6d-ae25-4ccf-bcad-379d1f440042" target="_blank">Download the app</a></p>]]></content>
      <post-name type="text"><![CDATA[Traffic Chat: My new Windows Phone 8 app]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="5f37896e-ae1c-4b36-8a76-75762ae865a0" date-created="2013-07-02T11:37:07" date-modified="2013-07-02T11:37:16" approved="true" post-url="/blog/post/2013/07/02/Making-Resharper-and-MVVM-Lights-ViewModelBase-play-nice.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Making Resharper and MVVM Light’s ViewModelBase play nice]]></title>
      <content type="text"><![CDATA[<p>ReSharper and MVVM Light are probably my two most used pieces of software. I can’t live without Resharper’s refactoring skills and doing any kind of XAML development without using MVVM Light is just crazy (my opinion of course <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_23.png" />).</p>  <p>One of the more annoying things in XAML based software is the need to write full properties that call the PropertyChanged event in the setter. If your project is data intensive you’ll probably need a lot of those properties, luckily Resharper can help us there.</p>  <h2>The Resharper solution</h2>  <p>When you make your class implement INotifyPropertyChanged it requires you to implement its members, Resharper comes with a built-in implementation, just press alt-enter and behold.</p>  <p><img src="http://i40.tinypic.com/whi6va.jpg" /></p>  <p>After inserting the code Resharper asks if you want to include some annotations in your project, and these annotations make some magic happen, so I would strongly advice to add them.</p>  <p><a href="http://i41.tinypic.com/2vuzf5y.jpg" target="_blank"><img src="http://i41.tinypic.com/2vuzf5y.jpg" width="347" height="191" /></a></p>  <p>Once you click Yes you’ll notice that a new class is added to your project under the Properties folder. The INotifyPropertyChanged implementation looks like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:acf1b2c7-f2af-406e-a358-1d64d3d2e7b8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MyBase</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">INotifyPropertyChanged</span><span style="background:#ffffff;color:#000000"> </span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> PropertyChanged;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">NotifyPropertyChangedInvocator</span><span style="background:#ffffff;color:#000000">]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">virtual</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnPropertyChanged([</span><span style="background:#ffffff;color:#2b91af">CallerMemberName</span><span style="background:#ffffff;color:#000000">] </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> propertyName = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> handler = PropertyChanged;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (handler != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) handler(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventArgs</span><span style="background:#ffffff;color:#000000">(propertyName));</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As you can see Resharpes uses the CallerMemberName attribute new in .net 4.5, this way we won’t have to specify the property’s name anymore when we call OnPropertyChanged. Line 5 is what will make the next piece of Resharper magic happen.</p>  <p>Now we want to add some properties to the class and make them call OnPropertyChanged in the setter. I start of with an autoproperty</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5d8a1cab-7bca-44f8-9d73-d34400633bff" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Name { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> </ol> </div> </div> </div>  <p>Next I alt-enter the property. Resharper now checks the class and its baseclasses if available, if one of those has the NotifyPropertyChangedInvocator attribute it will show an extra option in the menu.</p>  <p><a href="http://i41.tinypic.com/350lyd4.jpg" target="_blank"><img src="http://i41.tinypic.com/350lyd4.jpg" /></a></p>  <p>Selecting that option will turn the autoproperty into</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f9e47c5a-59dd-47c5-80d9-49c9099ffb7e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> _name;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Name</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _name; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _name) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_name = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Mission accomplished, we create a bunch of autoproperties, alt-enter them and save a lot of time.</p>  <h2>The MVVM Light problem</h2>  <p>The MVVM Light viewmodels all inherit from ViewModelBase, ViewModelBase inherits from ObservableObject and ObservableObject implements INotifyPropertyChanged</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8be8f732-7150-47ab-a6f4-d532344a8713" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li>public abstract class ViewModelBase : ObservableObject, ICleanup</li> </ol> </div> </div> </div> </p>  <p>&#160;</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ed60730e-fcb2-4aa3-b779-81fa2563a8b6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li>public class ObservableObject : INotifyPropertyChanged</li> </ol> </div> </div> </div> </p>  <p>And here’s the MVVM Light implementation of INotifyPropertyChanged</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:397117ae-d233-4e63-98da-d94a8f337a11" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> PropertyChanged;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">virtual</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> RaisePropertyChanged(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> propertyName)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">VerifyPropertyName(propertyName);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> handler = PropertyChanged;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (handler != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">handler(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventArgs</span><span style="background:#ffffff;color:#000000">(propertyName));</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> VerifyPropertyName(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> propertyName)</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> myType = GetType();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.IsNullOrEmpty(propertyName)</span></li> <li>        <span style="background:#ffffff;color:#000000">&amp;&amp; myType.GetProperty(propertyName) == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">throw</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ArgumentException</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;Property not found&quot;</span><span style="background:#ffffff;color:#000000">, propertyName);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>A nice implementation but it lacks the attributes required for Resharper to implement a backing field with change notification. Meaning that we still have to write the implementation ourselves or we need to build our own ViewModelBase and implement INotifyPropertyChanged our self, which is a bit of a shame since this nice implementation already exists.</p>  <h2>A solution</h2>  <p>The solution I came up with does require us to build a viewmodelbase, but to be honest I tend to do that in almost every project, for example for an IsDataLoading bindable property, that’s useful in every page. The ViewModel base class that we’ll build inherits from ViewModelBase and overrides the RaisePropertyChanged. Do make sure that the annotations.cs class from Resharper is present in your project.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5e061197-7048-458e-ad94-77135d71e098" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MyBase</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> This gives us the ReSharper option to transform an autoproperty into a property with change notification</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Also leverages .net 4.5 callermembername attribute</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;property&quot;&gt;</span><span style="background:#ffffff;color:#008000">name of the property</span><span style="background:#ffffff;color:#808080">&lt;/param&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">NotifyPropertyChangedInvocator</span><span style="background:#ffffff;color:#000000">]</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> RaisePropertyChanged([</span><span style="background:#ffffff;color:#2b91af">CallerMemberName</span><span style="background:#ffffff;color:#000000">]</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> property = </span><span style="background:#ffffff;color:#a31515">&quot;&quot;</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.RaisePropertyChanged(property);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The overriden method just calls its base method and passes in the parameter. But thanks to .net 4.5 and the attribute we can now use the CallerMemberName attribute and Resharper’s alt-enter magic in MVVM Light while still having the ViewModelBase.</p>  <p><img src="http://i39.tinypic.com/2gud4jd.jpg" /></p>    <p>And the result of that action is like you would suspect</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:da3cac00-a96c-4e75-bd5c-0e43d9f330bc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> _name;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Name</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _name; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _name) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_name = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">RaisePropertyChanged();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <h2>Conclusion</h2>  <p>In this post I’ve shown a quick fix I use to make two of my favorite bits play together nicely without changing any of the native implementations, I still use the ViewModelBase way of notifying when a property changed and I can make use of Resharper to quickly write those properties.</p>]]></content>
      <post-name type="text"><![CDATA[Making Resharper and MVVM Light’s ViewModelBase play nice]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <comments>
        <comment id="14471ffb-ad5d-4979-9da9-de3edac63d70" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T12:08:26" date-modified="2013-07-02T12:08:26" approved="true" user-name="Laurent Bugnion" user-email="laurent@galasoft.ch" user-ip="85.3.156.201" user-url="">
          <title type="text"><![CDATA[re: Making Resharper and MVVM Light’s ViewModelBase play nice]]></title>
          <content type="text"><![CDATA[Hi,

First let me say that there are more ways to raise PropertyChanged in V4 of MVVM Light. You can do RaisePropertyChanged(() =&gt; PropertyName) which is a strongly typed way (and plays nice with Intellisense, and the Rename feature of R#). You can also do Set(...) which lets you raise PropertyChanged in less lines than before.

Regarding CallerMemberName attribute, the next version of MVVM Light supports that (will be V4.2, ETA this summer). I just have a few more things to check and implement before I do a release.

On a side note, your captcha is crazy hard to read. Had to reload a few times before I found one that I can read ;)

Cheers
Laurent]]></content>
        </comment>
        <comment id="4848648f-2a83-4803-8630-d32af7d82466" parentid="14471ffb-ad5d-4979-9da9-de3edac63d70" date-created="2013-07-02T12:13:52" date-modified="2013-07-02T12:13:52" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="81.83.148.116" user-url="">
          <title type="text"><![CDATA[re: Making Resharper and MVVM Light’s ViewModelBase play nice]]></title>
          <content type="text"><![CDATA[Hi Laurent,

I know about the ()=&gt;PropertyName (it&#39;s featured in one of my previous posts) and I love it :) but callermembername is easier, glad to hear that it will be part of 4.2.

Resharper still needs the NotifyPropertyChangedInvocator attribute for the &quot;To property with change notification&quot; option, that&#39;s the main reason I started looking for something like this solution, it&#39;s just faster to write autoproperties and let R# transform them.

About the captcha, I had to do something like this, I was getting about 30 spammessages per day... :)]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="fc9c66c7-61c5-47b7-a698-767dc2a02736" date-created="2013-06-21T08:06:29" date-modified="2013-06-21T08:09:42" approved="true" post-url="/blog/post/2013/06/21/Community-day-2013.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Community day 2013]]></title>
      <content type="text"><![CDATA[<p><img src="http://www.communityday.be/data/2013/long.png" /></p>  <p>Yesterday was the day for Community day 2013, already the seventh edition. A bunch of user groups working together to create a great agenda of presentations by community, for community.</p>  <p>This seventh edition was in my opinion the best one so far, the quality of the talks I followed was incredible and I’ve learned quite a lot.</p>  <p>I also did my own talk on SignalR and Windows Phone 8. Here you can find my slidedeck.</p>  <p><iframe height="400" marginheight="0" src="http://www.slideshare.net/slideshow/embed_code/23270467" frameborder="0" width="476" marginwidth="0" scrolling="no"></iframe></p>  <p>&#160;</p>  <p>And my demos can be found here (this includes the chat demo, the leap motion demo and the Photobeamer clone.</p>  <p><iframe height="120" src="https://skydrive.live.com/embed?cid=5A345BB15E973473&amp;resid=5A345BB15E973473%2129840&amp;authkey=AJNly6ke_rJoG9E" frameborder="0" width="98" scrolling="no"></iframe></p>  <p>As mentioned during my talk, the photobeamer clone is something I did a blogpost on a while back, for those interested the post can be found <a href="http://www.spikie.be/blog/post/2013/01/21/Copying-Nokia&rsquo;s-Photobeamer-with-SignalR-and-WP8.aspx" target="_blank">here</a></p>  <p>I had a blast at Community day 2013 and I’m already looking forward to the next edition!</p>]]></content>
      <post-name type="text"><![CDATA[Community day 2013]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="e42bd5bb-a440-4306-9671-1010ade4e827" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="e96ada6a-e768-4392-a18e-c2f0d6f81016" />
        <category ref="3ea3cc57-12ac-4425-90cc-635093df9f95" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
    </post>
    <post id="128e7a42-b5e5-4c78-9d17-4c6e8c5ff482" date-created="2013-06-17T10:35:23" date-modified="2013-06-17T10:36:17" approved="true" post-url="/blog/post/2013/06/17/Test-your-WP8-app-on-two-emulators-simultaneously.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Run your WP8 app on two emulators simultaneously]]></title>
      <content type="text"><![CDATA[<p>I’m currently working on a Windows Phone 8 project that requires two devices. Those devices talk to each other through a SignalR service. Thanks to Hyper-V I’m able to test/debug this project on two instances of the Windows Phone 8 emulator (I usually pick the WVGA and WVGA 512MB versions). What I used to do is deploy the XAP to one emulator and debug it on the second. I need to do this every time I change the app, I got bored of doing this manually so it was about time to get this automated.</p>  <p>Since Visual Studio 2012 builds the app everytime its codebase changes I can use the post-build script to do this, after all the app should only install itself on both emulators when it’s changed (I did spent time looking for a solution to let the script run every time I hit the debug button but it looks like there’s no way to do this in VS2012). </p>  <p>The point of the post-build script is to fire up the emulator when needed, deploy the app and run it. Visual Studio 2012 debug will fire up the second emulator, deploy the app there and launch it with debug, meaning that only one emulator will have a debugger attached.</p>  <h2>Choosing the emulator for the script</h2>  <p>Microsoft has provided a command line tool for deploying xap files, both onto a device and onto the emulators. Before we can start using it we’ll need to know the correct index of the emulator that we want the script to use. Copy-paste this script into a textfile and save as a .bat file, double click it and you should see a list of all available emulators on your machine (provided that you have the Windows Phone 8 SDK installed of course).</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b07452a6-8352-4402-9468-f0f7011e78d0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">cd </span><span style="background:#ffffff;color:#a31515">&quot;%ProgramFiles(x86)%&#92;Microsoft SDKs&#92;Windows Phone&#92;v8.0&#92;Tools&#92;XAP Deployment&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">XapDeployCmd.exe /EnumerateDevices</span></li> <li><span style="background:#ffffff;color:#000000">pause</span></li> </ol> </div> </div> </div>  <p><a href="http://i39.tinypic.com/hvec79.jpg" target="_blank"><img src="http://i39.tinypic.com/hvec79.jpg" width="422" height="214" /></a></p>  <p>XapDeployCmd.exe is the commandline tool for everything related to XAP deployments. More information on the tool can be found on <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff402565(v=vs.105).aspx#BKMK_commandline" target="_blank">MSDN</a></p>  <p>Choose the emulator of your choose from the list and remember its index.</p>  <h2>Building the script</h2>  <p>Time to start building the script. In your Windows Phone 8 project, go to the project properties to the Build Events tab. In the Post-build event command line box enter this script.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:30340163-a385-4d7c-8bcd-c88c00725b38" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">cd %ProgramFiles(x86)%&#92;Microsoft SDKs&#92;Windows Phone&#92;v8.0&#92;Tools&#92;XAP Deployment</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">XapDeployCmd.exe /installlaunch $(TargetDir)$(ProjectName)_$(ConfigurationName)_$(PlatformName).xap /targetdevice:1</span></li> </ol> </div> </div> </div>  <p>The first line of the script navigates the command line to the folder where the XapDeployCmd lives (this is the default install path, the tool comes with the WP8 SDK). The second line launches the tool and passes the necessary parameters. the installaunch parameter states that the app should install (or update) the app and launch it when finished. After the installaunch parameter we need to state the path to the xap file, by default (when using the debug configuration in VS2012) it’s in the bin/debug folder and is called something like MyWPApp_debug_anycpu.xap. To make the script easy to transfer over I’ve used variables instead of hardcoding the path and the xap name. Here’s a quick rundown.</p>  <table cellspacing="0" cellpadding="2" width="601" border="1"><tbody>     <tr>       <td valign="top" width="200"><strong>Variable</strong></td>        <td valign="top" width="399"><strong>Meaning</strong></td>     </tr>      <tr>       <td valign="top" width="200">$(TargetDir)</td>        <td valign="top" width="399">the full path to the outputdirectory (for example: c:\users\nico\documents\Projects\MyWPApp\bin\debug\)          <br />          <br />Keep in mind that the last “\” is always included when using this variable</td>     </tr>      <tr>       <td valign="top" width="200">$(ProjectName)</td>        <td valign="top" width="399">The name of the project (didn’t see that one coming, did you? <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_22.png" />) (for example: MyWPApp)</td>     </tr>      <tr>       <td valign="top" width="200">$(ConfigurationName)</td>        <td valign="top" width="399">The used configuration, for example ”release” or “debug”</td>     </tr>      <tr>       <td valign="top" width="200">$(PlatformName)</td>        <td valign="top" width="399">The selected CPU architecture, for example “AllCpu”, “ARM”, “x86”</td>     </tr>   </tbody></table>  <p>With these <strike>powers</strike> variables combined we get the full path to the xap file. The last parameter specifies the to use emulator by passing in the index that we determined at the beginning of this post.</p>  <p>And that’s it. Rebuild your solution and watch the emulator start app, deploy and launch your app. Now every time that you change the code of the app and hit the debug button it will build and deploy to both emulators. One of the emulators should have those debug numbers on the side, making it easy to recognize which one has the debugger attached.</p>  <h2>Conclusion</h2>  <p>Using a very simple post-build script and the in the WP8 included XapDeployCmd tool it’s very easy to deploy an application to two devices simultaneously. This isn’t needed very often but when building something that connects users to each other (like a chat application or a multiplayer game) it can save you quite some hassle. Just make sure that your script uses another emulator version than Visual Studio 2012.</p>  <p>&#160;</p>  <p><script type="text/javascript">// <![CDATA[
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
// ]]]]><![CDATA[></script><script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">// <![CDATA[

// ]]]]><![CDATA[></script></p>]]></content>
      <post-name type="text"><![CDATA[Run your WP8 app on two emulators simultaneously]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="41bcc586-adb9-4e16-9b8a-c527d090a7bc" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="025f7fea-19d1-442c-8dc4-f0e43e6dc577" date-created="2013-06-19T13:01:09" date-modified="2013-06-19T13:01:09" approved="true" url="http://www.silverlightshow.net/news/Run-your-Windows-Phone-8-app-on-two-emulators-simultaneously.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="cf0f7ab9-44cc-4d92-99e4-205aca35d9a1" date-created="2013-06-14T10:43:49" date-modified="2013-06-14T10:43:58" approved="true" post-url="/blog/post/2013/06/14/Error-tracking-with-RayGun-and-free-t-shirts!.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Error tracking with RayGun and free t-shirts!]]></title>
      <content type="text"><![CDATA[<p>I received a mail from Mindscape stating that their product called Raygun was coming along nicely and if I was interested in trying it out and blogging my finding. I would receive a bunch of t-shirts to hand out during user group events. So here’s me, writing my findings of RayGun (which is actually a cool product) and hoping to receive free t-shirts, the things I do for community <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_21.png" /></p>  <h2>RayGun</h2>  <p>So what is RayGun? RayGun plugs into your apps and sends errors to the server. You as the developer receive an email stating that a new error has been found. </p>  <p><a href="http://i41.tinypic.com/352hnyc.jpg" target="_blank"><img src="http://i41.tinypic.com/352hnyc.jpg" width="351" height="164" /></a></p>  <p>What’s great here is that you can resolve the error here with one click, the second link will open the error details on the site and immediately change its status to Resolved.</p>  <p>If you view the error you get all the information that you expect from a service like Raygun. Information about the device that the error occurred on, the used resolution (always 800x480 for Windows Phone as that is the base resolution, all apps are upscaled from there but it still reports as 800x480) and of course the complete stacktrace. </p>  <p><a href="http://i42.tinypic.com/6prck1.jpg" target="_blank"><img src="http://i42.tinypic.com/6prck1.jpg" width="382" height="128" /></a></p>  <p><a href="http://i44.tinypic.com/dxzaqv.jpg" target="_blank"><img src="http://i44.tinypic.com/dxzaqv.jpg" width="152" height="98" /></a></p>  <p>You can even view RAW data in JSON format.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:20d95e30-c6fb-4e3c-815b-88377bd7daf2" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li>{ &quot;MachineName&quot;: &quot;RM-821_eu_belgium_464&quot;, &quot;Error&quot;: { &quot;Data&quot;: [], &quot;ClassName&quot;: &quot;System.Exception&quot;, &quot;Message&quot;: &quot;Exception: raygun test&quot;, &quot;StackTrace&quot;: [ { &quot;LineNumber&quot;: 0, &quot;ClassName&quot;: &quot; at RayGunDemo.MainPage.ButtonBase_OnClick(Object sender, RoutedEventArgs e)&quot; }, { &quot;LineNumber&quot;: 0, &quot;ClassName&quot;: &quot; at System.Windows.Controls.Primitives.ButtonBase.OnClick()&quot; }, { &quot;LineNumber&quot;: 0, &quot;ClassName&quot;: &quot; at System.Windows.Controls.Button.OnClick()&quot; }, { &quot;LineNumber&quot;: 0, &quot;ClassName&quot;: &quot; at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)&quot; }, { &quot;LineNumber&quot;: 0, &quot;ClassName&quot;: &quot; at System.Windows.Controls.Control.OnMouseLeftButtonUp(Control ctrl, EventArgs e)&quot; }, { &quot;LineNumber&quot;: 0, &quot;ClassName&quot;: &quot; at MS.Internal.JoltHelper.FireEvent(IntPtr unmanagedObj, IntPtr unmanagedObjArgs, Int32 argsTypeIndex, Int32 actualArgsTypeIndex, String eventName)&quot; } ] }, &quot;Environment&quot;: { &quot;ProcessorCount&quot;: 0, &quot;OSVersion&quot;: &quot;Win32NT 8.0.10211.0&quot;, &quot;WindowBoundsWidth&quot;: 480, &quot;WindowBoundsHeight&quot;: 800, &quot;CurrentOrientation&quot;: &quot;PortraitUp&quot;, &quot;TotalPhysicalMemory&quot;: 0, &quot;AvailablePhysicalMemory&quot;: 0, &quot;TotalVirtualMemory&quot;: 0, &quot;AvailableVirtualMemory&quot;: 0, &quot;DiskSpaceFree&quot;: [], &quot;DeviceName&quot;: &quot;RM-821_eu_belgium_464&quot;, &quot;UtcOffset&quot;: 0, &quot;Locale&quot;: &quot;Nederlands (België)&quot; }, &quot;Client&quot;: { &quot;Name&quot;: &quot;Raygun4Net&quot;, &quot;Version&quot;: &quot;Mindscape.Raygun4Net.WindowsPhone, Version=1.0.5.0, Culture=neutral, PublicKeyToken=null&quot;, &quot;ClientUrl&quot;: &quot;https://github.com/MindscapeHQ/raygun4net&quot; } }</li> </ol> </div> </div> </div>      <p>You can add comments to errors, assign people to them, all in all RayGun feels very complete. The mail arrived immediately after the error was thrown, shows up nicely on the dashboard, both the Windows Phone emulator and my Lumia 920 over 3G reported the error perfectly.</p>  <h2>Implementing RayGun</h2>  <p>Implementing RayGun in your app is very straigthforward, go to <a href="http://www.raygun.io">http://www.raygun.io</a> and register for a trial account (pricing can be found here <a title="http://raygun.io/pricing" href="http://raygun.io/pricing">http://raygun.io/pricing</a>). Once your account is registered you arrive at a page that tells you the steps to integrate RayGun with your app.</p>  <p>Nifty feature here is that your api key is integrated in the sample code that they give you, so it’s just copy/paste. It may sound stupid but I really liked that sense of detail.</p>  <p>First thing we need to do is add RayGun through NuGet.</p>  <p><a href="http://i39.tinypic.com/2w2g3dh.jpg" target="_blank"><img src="http://i39.tinypic.com/2w2g3dh.jpg" width="307" height="205" /></a></p>  <p>Bit weird here is that a readme file pops open stating that for Windows Phone I need to Reference the &quot;Mindscape.Raygun4Net.WindowsPhone.dll but NuGet is smart enough to reference the correct DLL depending on the platform that you’re developing for.</p>  <p>Second step is adding a property of the RayGunClient to App.xaml.cs and instantiating it with the api key.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:133a595d-1f94-4d29-a3c0-3faed8ee899c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RaygunClient</span><span style="background:#ffffff;color:#000000"> RaygunClient { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Constructor for the Application object.</span></li> <li><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> App()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RaygunClient = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RaygunClient</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;&lt;your key here&gt;&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>And for the initial setup there’s one step left. In the Application_UnhandledException method add the actual call to the RayGun servers (line 4).</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4407ec41-2816-45cd-b3f8-df09270b156d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">// Code to execute on Unhandled Exceptions</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Application_UnhandledException(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">ApplicationUnhandledExceptionEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">RaygunClient.Send(e);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Debugger</span><span style="background:#ffffff;color:#000000">.IsAttached)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// An unhandled exception has occurred; break into the debugger</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Debugger</span><span style="background:#ffffff;color:#000000">.Break();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <br />And from now on, any unhandled exception is logged in RayGun and you’re notified immediately when they occur. Try it out by adding a button on your mainpage and set this as click event.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:39ed3185-dc27-475f-bfbd-aaf5166d7c28" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ButtonBase_OnClick(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">throw</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;raygun test&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Since the RayGunClient in this example is a static property in App.xaml.cs you can reuse it anywhere in your project. You can even start creating completely custom errorlogs by passing in a RayGunMessage instance in the Send method.</p>  <h2>Conclusion</h2>  <p>RayGun works as advertised, no problem there at all. The dashboard looks great, is easy to navigate and shows all the necessary information. Crash reports arrive really fast and have nice little details like a one-click link to resolve an error. Small mistake in the readme file that opens when adding the NuGet package can be forgiven (who reads readme files anyway?)</p>  <p>Will it be a great success? I don’t know. There’s quite a lot of competition out there, services that offer the same stuff as Mindscape does with RayGun but often times they are either free or provide a limited free service for hobby developers. Personally, I feel that MindScape should include a free price plan as well, limited in such a way that it’s only suitable for hobby projects of course since everyone needs to make a living. But those hobby developers can create buzz around the product so that professionals will pick up on it as well.</p>  <p>By the way, this post only talks about the Windows Phone part of RayGun but it supports a wide array of platforms like ASP.net, JavaScript, PHP, Ruby on rails, Java and ColdFusion.</p>  <p>So all in all, great product, works as advertised! If you want a t-shirt come to the next MADN user group event after the summer break and hopefully we’ll have some to hand out!</p>  <p><a href="http://www.mindscapehq.com/blog/index.php/2013/03/05/get-an-awesome-raygun-t-shirt/" target="_blank"><img src="http://www.mindscapehq.com/blog/wp-content/uploads/2013/02/Double-T-shirts1.jpg" width="299" height="228" /></a></p>]]></content>
      <post-name type="text"><![CDATA[Error tracking with RayGun and free t-shirts!]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="cbf45a1d-9eb2-4287-b180-ff638c513bbc" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:11:02" date-modified="2013-06-19T19:11:02" approved="false" user-name="Dorthea" user-email="dortheawolf@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[Nice answers in return of this issue with genuine arguments and telling everything about that.

Visit my website - Michael Kors Purses ( Dorthea - http://www.iaaccs.com/michaelkorsoutlet.html )]]></content>
        </comment>
        <comment id="33ed7fa4-54d3-4ec1-a0fc-f55e1e7607b5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:11:15" date-modified="2013-06-19T19:11:15" approved="false" user-name="iaaccs.com" user-email="marietta_shields@peacemail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[What&#39;s Happening i am new to this, I stumbled upon this I&#39;ve discovered It absolutely helpful and it has helped me out loads. I&#39;m hoping to give a contribution &amp; assist other customers like its aided me. Good job.

my web page Louis Vuitton Handbags ( iaaccs.com - http://www.iaaccs.com/louisvuitton.html )]]></content>
        </comment>
        <comment id="2660ada3-8cfa-41ea-beb7-77c2fdd52442" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:12:34" date-modified="2013-06-19T19:12:34" approved="false" user-name="Michael Kors bags" user-email="carolcalderon@zoho.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[I loved as much as you will receive carried out right here. The sketch is attractive, your authored subject matter stylish. nonetheless, you command get bought an edginess over that you wish be delivering the following. unwell unquestionably come more formerly again since exactly the same nearly very often inside case you shield this increase.

Feel free to visit my web site ::  Michael Kors bags - http://www.avlogbook.com/michael-kors-handbags.html ]]></content>
        </comment>
        <comment id="687f64f9-7a65-49d7-b034-69345bca454b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:43:27" date-modified="2013-06-19T19:43:27" approved="false" user-name="Louis Vuitton Official Website" user-email="sondraforney@live.de" user-ip="184.154.82.166" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[Saved as a favorite, I like your site!

Also visit my web blog:  Louis Vuitton Official Website - http://www.avlogbook.com/louis-vuitton-outlet.html ]]></content>
        </comment>
        <comment id="ea0af959-cab1-4185-b83f-1b29d67960c1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T22:05:47" date-modified="2013-06-25T22:05:47" approved="false" user-name="Michael Kors Outlet Store" user-email="frankiekraus@yahoo.de" user-ip="108.178.29.214" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[Hey I know this is off topic but I was wondering if you knew of any widgets I could add to my blog that automatically tweet my newest twitter updates. I&#39;ve been looking for a plug-in like this for quite some time and was hoping maybe you would have some experience with something like this. Please let me know if you run into anything. I truly enjoy reading your blog and I look forward to your new updates.

My homepage ::  Michael Kors Outlet Store - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="326fe33c-bd82-4732-8cad-aee9768b16b0" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T00:35:52" date-modified="2013-06-26T00:35:52" approved="false" user-name="Louis Vuitton Belts" user-email="tasha-devine@arcor.de" user-ip="74.221.217.200" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[I am regular reader, how are you everybody? This article posted at this site is truly pleasant.

my weblog:  Louis Vuitton Belts - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="714abe43-03dc-4361-a8ae-b3070a7fa4b5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T13:23:02" date-modified="2013-06-26T13:23:02" approved="false" user-name="Louis Vuitton Outlet" user-email="maryannreyna@googlemail.com" user-ip="184.154.82.166" user-url="">
          <title type="text"><![CDATA[re: Error tracking with RayGun and free t-shirts!]]></title>
          <content type="text"><![CDATA[Whoa! This blog looks exactly like my old one! It&#39;s on a totally different topic but it has pretty much the same page layout and design. Superb choice of colors!

Here is my web-site -  Louis Vuitton Outlet - http://www.avlogbook.com/louis-vuitton-outlet.html ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="d68038b5-27ec-480a-a75e-503e3c1b4699" date-created="2013-05-31T20:35:00" date-modified="2013-06-04T07:39:49" approved="true" post-url="/blog/post/2013/05/31/IIS-Express-and-the-Windows-Phone-8-emulator.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[IIS Express and the Windows Phone 8 emulator]]></title>
      <content type="text"><![CDATA[<p>As an app developer you&rsquo;re bound to run into a situation where you&rsquo;re building both an app and a mobile website or REST based service. That means that you&rsquo;re testing the ASP.net project in IIS Express while using the Windows Phone 8 emulator, since the emulator behaves like a separate device on the network you can&rsquo;t use localhost to contact your IIS Express server.</p>
<p>There are a few ways to tackle this problem, you can finish the web project first and deploy it to a webserver. If your WP8 emulator is configured correctly it should have internet access and will be able to connect to your server just fine. A second option is to install an IIS server in your network and deploy to there from Visual Studio. But the most easy option would be to use the IIS Express server that comes with Visual Studio. That&rsquo;s certainly an option but requires some (small) configuration tweaks.</p>
<h2>First things first</h2>
<p>We&rsquo;ll need a webproject of course to test this. I&rsquo;ll create a very very basic ASP.net WebAPI project and a very basic Windows Phone 8 app that will run in the emulator. I could have made my point with a simple hello world website and the mobile browser but that&rsquo;s just boring.</p>
<p>Visual Studio 2012 ships with ASP.net MVC WebAPI, think REST services made ridiculously easy, to start a project select the MVC4 web template in Visual Studio 2012 and give it a name.</p>
<p><a href="http://i44.tinypic.com/6jd1fs.jpg" target="_blank"><img src="http://i44.tinypic.com/6jd1fs.jpg" alt="" width="435" height="301" /></a>&nbsp;</p>
<p>Once you click OK a second dialog will show up and that one holds the option to start a WebAPI project.</p>
<p><a href="http://i42.tinypic.com/5vw5rl.jpg" target="_blank"><img src="http://i42.tinypic.com/5vw5rl.jpg" alt="" width="435" height="394" /></a></p>
<p>What this gives you is an MVC project with an API controller. This behaves much like the normal controller that you&rsquo;re used to from MVC but instead of returning a view it returns data in a JSON format (serializing happens with JSON.net by the way, not with the .net serializer). I&rsquo;m not going to dive very deep in WebAPI, there are a lot of bloggers out there that know way more about this stuff than I do. We&rsquo;ll be using the default GET method from the ValuesController.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:33d22f4f-f4fe-4012-85b9-43107269095c" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #008000;">// GET api/values</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #2b91af;">IEnumerable</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt; Get()</span></li>
<li><span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">[] { </span><span style="background: #ffffff; color: #a31515;">"value1"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #a31515;">"value2"</span><span style="background: #ffffff; color: #000000;"> };</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>This just returns a collection of two strings.</p>
<p>Next step is adding a Windows Phone 8 project to the solution (a simple basic project started from the normal template). Now we have two projects in one solution that both need to start up. We could launch the api without debugging and launch the WP8 app in debug mode or we can set them both to launch at debug by selecting multiple startup projects in the solution properties.</p>
<p><a href="http://i43.tinypic.com/opzg5s.jpg" target="_blank"><img src="http://i43.tinypic.com/opzg5s.jpg" alt="" width="429" height="270" /></a></p>
<p>You can easily see that the settings have applied successfully if no project in the solution is bold anymore.</p>
<p>Okay, time to hook them up. We&rsquo;ll need two things, the IP address of the pc running IIS Express and the port that the ASP.net project will use. Getting the IP address should be easy, just enter ipconfig in a command prompt. To find out the port, navigate to the properties of the ASP.net project.</p>
<p><a href="http://i41.tinypic.com/353ee8j.jpg" target="_blank"><img src="http://i41.tinypic.com/353ee8j.jpg" alt="" width="496" height="269" /></a></p>
<p>In the Web tab of the properties you can see the project url for the website, that url contains the port that will be used.</p>
<p>Time for some coding, in the Windows Phone app, add a constant that holds the url to the website.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:59305ae1-2943-482e-ac0f-f876afb3a774" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">const</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> Url = </span><span style="background: #ffffff; color: #a31515;">"http://192.168.0.116:7145/"</span><span style="background: #ffffff; color: #000000;">;</span></li>
</ol></div>
</div>
</div>
<p>And the code to fetch the REST data</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:948dc13a-d6ea-4ab5-831f-78ba65bcaf1c" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> FetchData()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">WebClient</span><span style="background: #ffffff; color: #000000;"> client = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">WebClient</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">client.DownloadStringCompleted += ClientOnDownloadStringCompleted;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">client.DownloadStringAsync(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">Uri</span><span style="background: #ffffff; color: #000000;">(Url + </span><span style="background: #ffffff; color: #a31515;">"api/values"</span><span style="background: #ffffff; color: #000000;">));</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>The callback will use Json.net (added through NuGet) to deserialize the values into a List&lt;string&gt; that is then set as the ItemsSource of a LongListSelector.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c292825c-521c-4e94-9e77-a7657cc19ef8" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ClientOnDownloadStringCompleted(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">DownloadStringCompletedEventArgs</span><span style="background: #ffffff; color: #000000;"> downloadStringCompletedEventArgs)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (downloadStringCompletedEventArgs.Error == </span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> values = </span><span style="background: #ffffff; color: #2b91af;">JsonConvert</span><span style="background: #ffffff; color: #000000;">.DeserializeObject&lt;</span><span style="background: #ffffff; color: #2b91af;">List</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt;&gt;(downloadStringCompletedEventArgs.Result);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">ValueList.ItemsSource = values;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>All in all pretty easy but this won&rsquo;t work because IIS Express is bound to localhost only by default, we&rsquo;ll need to change the config to allow external connections.</p>
<p>The configuration of IIS Express can be found in the applicationhost.config xml file found in %userprofile%\documents\IISExpress\config (just copy-paste this path into the Windows 8 start screen and press enter)</p>
<p>Open the XML file and search for the name of your ASP.net project. It should look something like this</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:58e8acbf-ad7d-45e3-8611-3a8c32c0a481" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #000000;">&lt;site name=</span><span style="background: #ffffff; color: #a31515;">"IisExpressDemo"</span><span style="background: #ffffff; color: #000000;"> id=</span><span style="background: #ffffff; color: #a31515;">"13"</span><span style="background: #ffffff; color: #000000;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;application path=</span><span style="background: #ffffff; color: #a31515;">"/"</span><span style="background: #ffffff; color: #000000;"> applicationPool=</span><span style="background: #ffffff; color: #a31515;">"Clr4IntegratedAppPool"</span><span style="background: #ffffff; color: #000000;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;virtualDirectory path=</span><span style="background: #ffffff; color: #a31515;">"/"</span><span style="background: #ffffff; color: #000000;"> physicalPath=</span><span style="background: #ffffff; color: #a31515;">"c:\users\nico\documents\visual studio 2012\Projects\IisExpressDemo\IisExpressDemo"</span><span style="background: #ffffff; color: #000000;"> /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;/application&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;bindings&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;binding protocol=</span><span style="background: #ffffff; color: #a31515;">"http"</span><span style="background: #ffffff; color: #000000;"> bindingInformation=</span><span style="background: #ffffff; color: #a31515;">"*:7145:localhost"</span><span style="background: #ffffff; color: #000000;"> /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;/bindings&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">&lt;/site&gt;</span></li>
</ol></div>
</div>
</div>
<p>Line 6 contains the binding, copy this line and paste it underneath, change localhost with the IP address of your pc, like this</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0530aa62-80ce-41e1-86c3-7fc0715d108f" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #000000;">&lt;site name=</span><span style="background: #ffffff; color: #a31515;">"IisExpressDemo"</span><span style="background: #ffffff; color: #000000;"> id=</span><span style="background: #ffffff; color: #a31515;">"13"</span><span style="background: #ffffff; color: #000000;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;application path=</span><span style="background: #ffffff; color: #a31515;">"/"</span><span style="background: #ffffff; color: #000000;"> applicationPool=</span><span style="background: #ffffff; color: #a31515;">"Clr4IntegratedAppPool"</span><span style="background: #ffffff; color: #000000;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;virtualDirectory path=</span><span style="background: #ffffff; color: #a31515;">"/"</span><span style="background: #ffffff; color: #000000;"> physicalPath=</span><span style="background: #ffffff; color: #a31515;">"c:\users\nico\documents\visual studio 2012\Projects\IisExpressDemo\IisExpressDemo"</span><span style="background: #ffffff; color: #000000;"> /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;/application&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;bindings&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;binding protocol=</span><span style="background: #ffffff; color: #a31515;">"http"</span><span style="background: #ffffff; color: #000000;"> bindingInformation=</span><span style="background: #ffffff; color: #a31515;">"*:7145:localhost"</span><span style="background: #ffffff; color: #000000;"> /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;binding protocol=</span><span style="background: #ffffff; color: #a31515;">"http"</span><span style="background: #ffffff; color: #000000;"> bindingInformation=</span><span style="background: #ffffff; color: #a31515;">"*:7145:192.168.0.116"</span><span style="background: #ffffff; color: #000000;"> /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&lt;/bindings&gt;</span></li>
<li><span style="background: #ffffff; color: #000000;">&lt;/site&gt;</span></li>
</ol></div>
</div>
</div>
<p>Close the IIS Express server if it&rsquo;s still running and run the project.</p>
<p>Now there&rsquo;s a pretty big chance that you&rsquo;ll see this.</p>
<p><img src="http://i44.tinypic.com/ekq8hh.jpg" alt="" /></p>
<p>Visual Studio 2012 needs to be started as administrator to allow IIS Express to create bindings for external connections, so if you get this error, close and restart Visual Studio 2012 as an administrator.</p>
<p>Run the project again and the Windows Phone application should be able to fetch the data from the API.</p>
<p><img src="http://i43.tinypic.com/ab5zli.jpg" alt="" /></p>
<p>&nbsp;</p>
<h2>Conclusion</h2>
<p>In this post I&rsquo;ve talked about opening up your IIS Express development server to allow external connections. This is needed to allow the Windows Phone 8 emulator to connect to websites or APIs hosted locally. It&rsquo;s basically two steps</p>
<ul>
<li>Add the IP address of your pc to the IIS config</li>
<li>Launch Visual Studio as administrator to be able to set the binding</li>
</ul>
<p>&nbsp;</p>
<p>
<script type="text/javascript">// <![CDATA[
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
// ]]]]><![CDATA[></script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">// <![CDATA[

// ]]]]><![CDATA[></script>
</p>]]></content>
      <post-name type="text"><![CDATA[IIS Express and the Windows Phone 8 emulator]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="68f0e7bf-def2-4217-9ad6-03e88ac6e32b" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
      </categories>
      <comments>
        <comment id="bbb85367-78f3-42a8-bde2-14e07cc45215" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:10:32" date-modified="2013-06-19T19:10:32" approved="false" user-name="Kandi" user-email="kandihatley@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[you&#39;re in point of fact a just right webmaster. The site loading velocity is incredible. It kind of feels that you&#39;re doing any distinctive trick. Also, The contents are masterpiece. you&#39;ve done a excellent job on this matter!

Feel free to visit my web-site - Michael Kors Purses * Kandi - http://www.iaaccs.com/michaelkorsoutlet.html *]]></content>
        </comment>
        <comment id="13460dc1-57dd-4b10-9c1b-2c2e38d277e2" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:11:01" date-modified="2013-06-19T19:11:01" approved="false" user-name="Louis Vuitton Bags" user-email="adolph.patterson@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[Excellent post but I was wondering if you could write a litte more on this subject? I&#39;d be very grateful if you could elaborate a little bit further. Cheers!

Here is my website;  Louis Vuitton Bags - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="8be31c33-3690-4046-9a81-af013f679ce5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:12:16" date-modified="2013-06-19T19:12:16" approved="false" user-name="Michael Kors Outlet" user-email="kerrie.goolsby@live.de" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[May I simply say what a comfort to uncover someone that truly knows what they are discussing on the web. You actually realize how to bring a problem to light and make it important. More people have to read this and understand this side of your story. It&#39;s surprising you&#39;re not more popular because you certainly have the gift.

my web page -  Michael Kors Outlet - http://www.avlogbook.com/michael-kors-handbags.html ]]></content>
        </comment>
        <comment id="e2c08872-677e-4c7b-a8b0-aaf38fadc5cd" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:42:43" date-modified="2013-06-19T19:42:43" approved="false" user-name="Louis Vuitton Outlet" user-email="raymondsewell@aol.com" user-ip="184.154.82.166" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[Hi there, I discovered your site via Google whilst searching for a comparable subject, your site came up, it seems to be great. I&#39;ve bookmarked it in my google bookmarks.
Hi there, simply changed into aware of your weblog via Google, and found that it is truly informative. I&#39;m going to watch out for brussels. I&#39;ll be grateful in the event you proceed this in future. Numerous people shall be benefited from your writing. Cheers!

Also visit my blog post:  Louis Vuitton Outlet - http://www.avlogbook.com/louis-vuitton-outlet.html ]]></content>
        </comment>
        <comment id="37262f6c-3cf9-4a0e-b82f-fd4689736b8c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-23T23:19:04" date-modified="2013-06-23T23:19:04" approved="false" user-name="children&amp;#39;s designer bedding" user-email="roxanalevine@bigstring.com" user-ip="37.59.247.42" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[I do agree with all of the ideas you&#39;ve presented for your post. They are very convincing and will definitely work. Still, the posts are very brief for beginners. Could you please prolong them a little from subsequent time? Thank you for the post.

My homepage:  children&#39;s designer bedding - http://www.glejme.com/moodle/user/view.php?id=160066&amp;course=1 ]]></content>
        </comment>
        <comment id="12cdb915-37be-41d9-a601-039ce74ecfaa" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T22:21:06" date-modified="2013-06-25T22:21:06" approved="false" user-name="Michael Kors Outlet" user-email="valarienunes@t-online.de" user-ip="173.232.104.158" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[Your way of explaining the whole thing in this piece of writing is genuinely nice, all be able to effortlessly know it, Thanks a lot.

My site;  Michael Kors Outlet - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="79e1a6ed-54d5-4cd1-809c-3b480dbd2be6" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T04:21:39" date-modified="2013-06-28T04:21:39" approved="false" user-name="reviews of steam mops" user-email="adriene_rausch@freenet.de" user-ip="173.255.161.62" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[This is really something!

my blog  reviews of steam mops - http://thesteammop.info/ ]]></content>
        </comment>
        <comment id="0827419f-92d5-4fc7-8a69-d6f5c3647625" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T04:46:22" date-modified="2013-06-28T04:46:22" approved="false" user-name="best meat grinder" user-email="conrad.overstreet@zoho.com" user-ip="173.255.161.62" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[Hmm, good job!

Also visit my homepage ::  best meat grinder - http://themeatgrinders.info/ ]]></content>
        </comment>
        <comment id="ada2185b-7c67-486d-a2d2-3991c991af46" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T07:46:46" date-modified="2013-06-28T07:46:46" approved="false" user-name="best digital pianos 2013" user-email="berndmatlock@aol.com" user-ip="173.255.161.62" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[Hmm, good job!

Look into my site  best digital pianos 2013 - http://ethedigitalpianos.info/ ]]></content>
        </comment>
        <comment id="041299db-ed54-4f90-9e00-43ddf13d74e9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T09:01:36" date-modified="2013-07-01T09:01:36" approved="false" user-name="SM-110 Function" user-email="darrellaquino@web.de" user-ip="186.96.252.194" user-url="">
          <title type="text"><![CDATA[re: IIS Express and the Windows Phone 8 emulator]]></title>
          <content type="text"><![CDATA[My name is Darrell, and I live in Maine. I merely wanted to say your article is absolutely interesting!

Feel free to surf to my weblog -  SM-110 Function - http://sm-110-finger-pulse-oximeter.tumblr.com/post/27489330078/how-does-the-sm-110-finger-pulse-oximeter-work ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="15b92f70-48c6-4be8-9de9-36ac35e30af0" date-created="2013-06-03T11:45:43" date-modified="2013-06-03T11:45:43" approved="true" url="http://www.silverlightshow.net/news/IIS-Express-and-the-Windows-Phone-8-emulator.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

IIS Express and the Windows Phone 8 emulator]]></title>
        </trackback>
        <trackback id="f56fa683-e970-4f3b-a443-ca213acd8c9b" date-created="2013-06-03T13:51:27" date-modified="2013-06-03T13:51:27" approved="true" url="http://blog.answermyquery.com/2013/06/iis-express-and-the-windows-phone-8-emulator/">
          <title type="text"><![CDATA[Pingback from blog.answermyquery.com

IIS Express and the Windows Phone 8 emulator | Answer My Query]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="b5324f6d-8ad9-4bb4-92f2-75a0b1b3e613" date-created="2013-05-16T11:16:00" date-modified="2013-06-04T07:40:15" approved="true" post-url="/blog/post/2013/05/16/Extending-the-Windows-Phone-pivot.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Extending the Windows Phone pivot]]></title>
      <content type="text"><![CDATA[<p>As I was working on a Windows Phone 8 project I needed a pivot that could hide its title, giving back some screen real-estate when needed. The basic pivot that is included in the Windows Phone SDK doesn&rsquo;t have this kind of behavior so it was a great opportunity to try out custom controls in Windows Phone. I&rsquo;ve build custom controls in XAML before but never based on an existing one, so fun times ahead. Let me start by showing a side-by-side comparison between both views of my pivot.</p>
<p><a href="http://i39.tinypic.com/14ucrja.jpg" target="_blank"><img src="http://i39.tinypic.com/14ucrja.jpg" alt="" /></a></p>
<p>don&rsquo;t mind the overlapping textblock and button, point is that when the button is clicked, the title of the pivot disappears.</p>
<h2>Building a XAML custom control</h2>
<p>It&rsquo;s quite easy to build a custom control in XAML as long as you follow the guidelines. It requires you to add a folder called Themes and in the folder a file called generic.xaml. The generic.xaml file is a resource dictionary, no code behind file is needed. Do follow the naming conventions exactly or your control won&rsquo;t work. Next step is adding a class that inherits from ContentControl (or a control that already inherits from ContentControl). The project for my ExtendedPivot looks like this</p>
<p><img src="http://i41.tinypic.com/30svhpu.jpg" alt="" /></p>
<p>The project type is a WP8 class library containing two custom controls, one for the pivot and one for the pivot items.</p>
<h2>Extending the pivot</h2>
<p>Since I only want to add a functionality to an existing control, the Pivot, my ExtendedPivot class inherits from Pivot instead of CustomControl.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:db0feaa4-9d0e-40a3-afcd-ef38f89016c5" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">ExtendedPivot</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">Pivot</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">static</span><span style="background: #ffffff; color: #0000ff;">readonly</span><span style="background: #ffffff; color: #2b91af;">DependencyProperty</span><span style="background: #ffffff; color: #000000;"> HeaderVisibilityProperty =</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">DependencyProperty</span><span style="background: #ffffff; color: #000000;">.Register(</span><span style="background: #ffffff; color: #a31515;">"HeaderVisibilityProperty"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #0000ff;">typeof</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">Visibility</span><span style="background: #ffffff; color: #000000;">), </span><span style="background: #ffffff; color: #0000ff;">typeof</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">ExtendedPivot</span><span style="background: #ffffff; color: #000000;">), </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">PropertyMetadata</span><span style="background: #ffffff; color: #000000;">(</span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;">));</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #2b91af;">Visibility</span><span style="background: #ffffff; color: #000000;"> HeaderVisibility</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">get</span><span style="background: #ffffff; color: #000000;"> { </span><span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">Visibility</span><span style="background: #ffffff; color: #000000;">)GetValue(HeaderVisibilityProperty); }</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">set</span><span style="background: #ffffff; color: #000000;"> { SetValue(HeaderVisibilityProperty, </span><span style="background: #ffffff; color: #0000ff;">value</span><span style="background: #ffffff; color: #000000;">); }</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> ExtendedPivot()</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">DefaultStyleKey =&nbsp;&nbsp;</span><span style="background: #ffffff; color: #0000ff;">typeof</span><span style="background: #ffffff; color: #000000;">(</span><span style="background: #ffffff; color: #2b91af;">ExtendedPivot</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>We&rsquo;ll start with the constructor, Line 14 is necessary when developing a custom control, it sets the style of the control to the style defined in generic.xaml (we&rsquo;ll get to that style in a minute). Lines 6 &ndash; 10 are a property that will be used by the DependencyProperty. The DependencyProperty (lines 3-4) is a property that we can bind a value to when using the control in a project, it might seem a bit overwhelming at first but there&rsquo;s a great snippet in VS2012 to easily write them. Basically, the parameters for the Register function are a name, the type of the property, the owner type (type of the control where you&rsquo;re declaring the DP) and some metadata.</p>
<p>The get and set method of the normal property use the DP to get and set values through databinding.</p>
<h2>generic.xaml</h2>
<p>This is the style for the ExtendedPivot as declared in generic.xaml</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:37eb1689-dea5-4c5d-81a7-aa149503eea0" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Style</span><span style="background: #ffffff; color: #ff0000;"> TargetType</span><span style="background: #ffffff; color: #0000ff;">="local:ExtendedPivot"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #ff0000;"> Property</span><span style="background: #ffffff; color: #0000ff;">="Margin"</span><span style="background: #ffffff; color: #ff0000;"> Value</span><span style="background: #ffffff; color: #0000ff;">="0" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #ff0000;"> Property</span><span style="background: #ffffff; color: #0000ff;">="Padding"</span><span style="background: #ffffff; color: #ff0000;"> Value</span><span style="background: #ffffff; color: #0000ff;">="0" /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #ff0000;"> Property</span><span style="background: #ffffff; color: #0000ff;">="Foreground"</span><span style="background: #ffffff; color: #ff0000;"> Value</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">StaticResource</span><span style="background: #ffffff; color: #ff0000;"> PhoneForegroundBrush}</span><span style="background: #ffffff; color: #0000ff;">" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #ff0000;"> Property</span><span style="background: #ffffff; color: #0000ff;">="Background"</span><span style="background: #ffffff; color: #ff0000;"> Value</span><span style="background: #ffffff; color: #0000ff;">="Transparent" /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #ff0000;"> Property</span><span style="background: #ffffff; color: #0000ff;">="ItemsPanel"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter.Value</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">ItemsPanelTemplate</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #0000ff;"> /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">ItemsPanelTemplate</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Setter.Value</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #ff0000;"> Property</span><span style="background: #ffffff; color: #0000ff;">="Template"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Setter.Value</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">ControlTemplate</span><span style="background: #ffffff; color: #ff0000;"> TargetType</span><span style="background: #ffffff; color: #0000ff;">="local:ExtendedPivot"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #ff0000;"> HorizontalAlignment</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> HorizontalAlignment}</span><span style="background: #ffffff; color: #0000ff;">"</span><span style="background: #ffffff; color: #ff0000;"> VerticalAlignment</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> VerticalAlignment}</span><span style="background: #ffffff; color: #0000ff;">"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid.RowDefinitions</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">RowDefinition</span><span style="background: #ffffff; color: #ff0000;"> Height</span><span style="background: #ffffff; color: #0000ff;">="Auto" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">RowDefinition</span><span style="background: #ffffff; color: #ff0000;"> Height</span><span style="background: #ffffff; color: #0000ff;">="Auto" /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">RowDefinition</span><span style="background: #ffffff; color: #ff0000;"> Height</span><span style="background: #ffffff; color: #0000ff;">="*" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Grid.RowDefinitions</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #ff0000;"> Grid.RowSpan</span><span style="background: #ffffff; color: #0000ff;">="3"</span><span style="background: #ffffff; color: #ff0000;"> Background</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> Background}</span><span style="background: #ffffff; color: #0000ff;">" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">ContentControl</span><span style="background: #ffffff; color: #ff0000;"> Grid.Row</span><span style="background: #ffffff; color: #0000ff;">="0"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="24,17,0,-7"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> HorizontalAlignment</span><span style="background: #ffffff; color: #0000ff;">="Left"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Content</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> Title}</span><span style="background: #ffffff; color: #0000ff;">"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> ContentTemplate</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> TitleTemplate}</span><span style="background: #ffffff; color: #0000ff;">"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Visibility</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> HeaderVisibility}</span><span style="background: #ffffff; color: #0000ff;">" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">primitives</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">PivotHeadersControl</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="HeadersListElement"</span><span style="background: #ffffff; color: #ff0000;"> Grid.Row</span><span style="background: #ffffff; color: #0000ff;">="1" /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">ItemsPresenter</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="PivotItemPresenter"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Grid.Row</span><span style="background: #ffffff; color: #0000ff;">="2"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">TemplateBinding</span><span style="background: #ffffff; color: #ff0000;"> Padding}</span><span style="background: #ffffff; color: #0000ff;">" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">ControlTemplate</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Setter.Value</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Setter</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Style</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>Basically, I&rsquo;ve created a xaml page in some very basic Windows Phone project, right-clicked it, selected Edit Template &gt; Edit a copy. This gives you a copy of the template for the Pivot. I copied that template in the generic.xaml style. The ContentControl at Lines 23-28 show the title in the pivot. I added the Visiblity property here and bound it to the HeaderVisibility property in the ExtendedPivot class. To bind a property in a style you need to use the TemplateBinding keyword instead of the normal Binding one.</p>
<p>Don&rsquo;t forget to set TargetType to the type of your custom control.</p>
<h2>Using the custom control in an app</h2>
<p>The control is ready, now it&rsquo;s time to use it. Create a new Windows Phone app and reference the project or DLL of the custom control. This is the MainPage of the sample app.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:937c3d41-c571-4b67-8b03-138a7ce2cf23" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">phone</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">PhoneApplicationPage</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Class</span><span style="background: #ffffff; color: #0000ff;">="ExtendedPivot.MainPage"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">="http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">x</span><span style="background: #ffffff; color: #0000ff;">="http://schemas.microsoft.com/winfx/2006/xaml"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">control</span><span style="background: #ffffff; color: #0000ff;">="clr-namespace:ExtendedPivot.Control;assembly=ExtendedPivot.Control"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">d</span><span style="background: #ffffff; color: #0000ff;">="http://schemas.microsoft.com/expression/blend/2008"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">mc</span><span style="background: #ffffff; color: #0000ff;">="http://schemas.openxmlformats.org/markup-compatibility/2006"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">phone</span><span style="background: #ffffff; color: #0000ff;">="clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">shell</span><span style="background: #ffffff; color: #0000ff;">="clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> FontFamily</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">StaticResource</span><span style="background: #ffffff; color: #ff0000;"> PhoneFontFamilyNormal}</span><span style="background: #ffffff; color: #0000ff;">"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> FontSize</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">StaticResource</span><span style="background: #ffffff; color: #ff0000;"> PhoneFontSizeNormal}</span><span style="background: #ffffff; color: #0000ff;">"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Foreground</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">StaticResource</span><span style="background: #ffffff; color: #ff0000;"> PhoneForegroundBrush}</span><span style="background: #ffffff; color: #0000ff;">"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Orientation</span><span style="background: #ffffff; color: #0000ff;">="Portrait"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> SupportedOrientations</span><span style="background: #ffffff; color: #0000ff;">="Portrait"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> shell</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">SystemTray.IsVisible</span><span style="background: #ffffff; color: #0000ff;">="True"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> mc</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Ignorable</span><span style="background: #ffffff; color: #0000ff;">="d"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">&lt;!--&nbsp;&nbsp;LayoutRoot is the root grid where all page content is placed&nbsp;&nbsp;--&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="LayoutRoot"</span><span style="background: #ffffff; color: #ff0000;"> Background</span><span style="background: #ffffff; color: #0000ff;">="Transparent"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">&lt;!--&nbsp;&nbsp;Pivot Control&nbsp;&nbsp;--&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">control</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">ExtendedPivot</span><span style="background: #ffffff; color: #ff0000;"> HeaderVisibility</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">Binding</span><span style="background: #ffffff; color: #ff0000;"> Visibility}</span><span style="background: #ffffff; color: #0000ff;">"</span><span style="background: #ffffff; color: #ff0000;"> Title</span><span style="background: #ffffff; color: #0000ff;">="MY APPLICATION"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">control</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">ExtendedPivotItem</span><span style="background: #ffffff; color: #ff0000;"> Header</span><span style="background: #ffffff; color: #0000ff;">="item 1"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">TextBlock</span><span style="background: #ffffff; color: #ff0000;"> Text</span><span style="background: #ffffff; color: #0000ff;">="item1" /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Button</span><span style="background: #ffffff; color: #ff0000;"> Click</span><span style="background: #ffffff; color: #0000ff;">="ButtonBase_OnClick"</span><span style="background: #ffffff; color: #ff0000;"> Content</span><span style="background: #ffffff; color: #0000ff;">="button" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">control</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">ExtendedPivotItem</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">control</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">ExtendedPivotItem</span><span style="background: #ffffff; color: #ff0000;"> Header</span><span style="background: #ffffff; color: #0000ff;">="item 2"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">TextBlock</span><span style="background: #ffffff; color: #ff0000;"> Text</span><span style="background: #ffffff; color: #0000ff;">="item2" /&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">control</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">ExtendedPivotItem</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">control</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">ExtendedPivot</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">phone</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">PhoneApplicationPage</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>Line 4 defines the namespace that holds the ExtendedPivot. Line 20 puts the control on the actual page. Notice that we bind the HeaderVisibility property of our control. I defined the datacontext of this page in code behind to be of type MainViewModel. MainViewModel implements INotifyPropertyChanged and only holds one property of type Visibility, that property is bound to the ExtendedPivot&rsquo;s HeaderVisibility.</p>
<p>The Button in the pivot will switch the HeaderVisibility between Collapsed and Visible, this happens in the code behind of this page.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:86e0e5f2-43e0-487e-b3ec-e2e74701f27f" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">partial</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">MainPage</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">PhoneApplicationPage</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">MainViewModel</span><span style="background: #ffffff; color: #000000;"> _mainViewModel;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Constructor</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> MainPage()</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">InitializeComponent();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_mainViewModel = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">MainViewModel</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">DataContext = _mainViewModel;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ButtonBase_OnClick(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">RoutedEventArgs</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (_mainViewModel.Visibility == </span><span style="background: #ffffff; color: #2b91af;">Visibility</span><span style="background: #ffffff; color: #000000;">.Collapsed)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_mainViewModel.Visibility = </span><span style="background: #ffffff; color: #2b91af;">Visibility</span><span style="background: #ffffff; color: #000000;">.Visible;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">else</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_mainViewModel.Visibility = </span><span style="background: #ffffff; color: #2b91af;">Visibility</span><span style="background: #ffffff; color: #000000;">.Collapsed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>Not really the best way of writing a Windows Phone app but it&rsquo;s just for making the point <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_20.png" alt="Glimlach" /></p>
<h2>Conclusion</h2>
<p>Extending a Windows Phone control isn&rsquo;t hard as long as you follow the naming conventions, adding some extra functionality is as easy as copying the xaml template and adding some dependency properties.</p>
<p>The sample code can be found on my <a href="http://sdrv.ms/YY0pW8" target="_blank">SkyDrive</a></p>
<p>&nbsp;</p>
<p>
<script type="text/javascript">// <![CDATA[
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
// ]]]]><![CDATA[></script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">// <![CDATA[

// ]]]]><![CDATA[></script>
</p>]]></content>
      <post-name type="text"><![CDATA[Extending the Windows Phone pivot]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="540177e8-fd15-4be6-b0ba-6f2c19913278" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="df208359-949c-4233-9269-4efc0c0066f6" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-05-16T12:14:42" date-modified="2013-05-16T12:14:42" approved="true" user-name="Kenneth" user-email="truyers.kenneth@gmail.com" user-ip="79.98.220.10" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[This seems a bit of overkill to just hide the header. 
You could just adapt the header-template using a style. That way you can apply it to a pivot-control just by applying the style.]]></content>
        </comment>
        <comment id="da923eba-ceaf-4eab-9cc0-01305cd7d774" parentid="df208359-949c-4233-9269-4efc0c0066f6" date-created="2013-05-16T12:32:13" date-modified="2013-05-16T12:32:13" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="94.224.105.173" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[Hi Kenneth, you are right that it works by applying a style as well. But I wanted a reusable control where the header could be easily switched off and on. Since I have some other extentions for this pivot in mind this was for me the best way to go. (and I needed an easy use-case for a blog post about extending existing controls :))]]></content>
        </comment>
        <comment id="57733116-c4c8-43ff-8242-0c182d72b797" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:10:12" date-modified="2013-06-19T19:10:12" approved="false" user-name="Louis Vuitton Handbags" user-email="andreakeener@gawab.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[Hey! I know this is kind of off-topic however I needed to ask. Does running a well-established website like yours require a massive amount work? I am brand new to running a blog however I do write in my diary on a daily basis. I&#39;d like to start a blog so I will be able to share my personal experience and views online. Please let me know if you have any suggestions or tips for new aspiring bloggers. Thankyou!

Feel free to surf to my web site ::  Louis Vuitton Handbags - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="4e556526-b202-4c49-829d-c6d97ed00ccc" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:10:12" date-modified="2013-06-19T19:10:12" approved="false" user-name="michael kors handbags" user-email="eliasseymore@arcor.de" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[Does your site have a contact page? I&#39;m having a tough time locating it but, I&#39;d like to shoot you an e-mail. I&#39;ve got some ideas for your blog you might be interested in hearing. Either way, great site and I look forward to seeing it grow over time.

Look into my web-site  michael kors handbags - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="6f1b5461-0f8f-468d-9bcb-a3ac5628078c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:12:00" date-modified="2013-06-19T19:12:00" approved="false" user-name="Michael Kors Outlet" user-email="rolando-riddell@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[This is a topic that&#39;s near to my heart... Best wishes! Where are your contact details though?

Here is my weblog ::  Michael Kors Outlet - http://www.avlogbook.com/michael-kors-handbags.html ]]></content>
        </comment>
        <comment id="3ea87f3a-3af9-469a-b308-b4e8e6f2418c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:42:26" date-modified="2013-06-19T19:42:26" approved="false" user-name="mouse click the up coming webpage" user-email="elvaholiday@web.de" user-ip="184.154.82.166" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[Hello, yup this post is in fact good and I have learned lot of things from it on the topic of blogging. thanks.

Visit my weblog ... Louis Vuitton Handbags Outlet -  mouse click the up coming webpage - http://www.avlogbook.com/louis-vuitton-outlet.html  -]]></content>
        </comment>
        <comment id="438fefbd-3516-4986-a2ca-76ac44be0f7a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T02:47:05" date-modified="2013-06-26T02:47:05" approved="false" user-name="Michael Kors Purses" user-email="dianegreenwood@gmail.com" user-ip="96.127.149.171" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[I don&#39;t know if it&#39;s just me or if perhaps everybody else experiencing issues with your site. It appears like some of the written text on your content are running off the screen. Can somebody else please provide feedback and let me know if this is happening to them as well? This may be a issue with my browser because I&#39;ve had this happen before. Many thanks

Feel free to surf to my web page -  Michael Kors Purses - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="864d6722-ec09-472c-8b8d-0f2226549023" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T02:53:18" date-modified="2013-06-26T02:53:18" approved="false" user-name="Louis Vuitton Handbags" user-email="soniachamberlin@gmail.com" user-ip="184.154.24.187" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[Good answers in return of this issue with firm arguments and describing everything concerning that.

Feel free to visit my blog post:  Louis Vuitton Handbags - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="07f82e1e-1fcf-41bf-9fc4-f349df8d840a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T19:37:58" date-modified="2013-06-26T19:37:58" approved="false" user-name="Michael Kors Bags" user-email="melisa.baptiste@inbox.com" user-ip="108.163.250.78" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[If some one wishes to be updated with newest technologies therefore he must be pay a visit this website and be up to date daily.

My page -  Michael Kors Bags - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="ba9f6198-aa11-4269-8a4e-73b026313291" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T05:44:24" date-modified="2013-06-28T05:44:24" approved="false" user-name="Michael Kors Outlet Online" user-email="jacelyn_knight@zoho.com" user-ip="5.34.247.104" user-url="">
          <title type="text"><![CDATA[re: Extending the Windows Phone pivot]]></title>
          <content type="text"><![CDATA[I drop a leave a response when I appreciate a article on a blog or if I have something to valuable to contribute to the conversation. It&#39;s a result of the passion displayed in the article I looked at. And on this post Nico&#39;s digital footprint | Extending the Windows Phone pivot. I was actually excited enough to create a thought :-P I do have a few questions for you if it&#39;s allright. Could it be only me or do a few of these remarks appear like written by brain dead people? :-P And, if you are posting at additional places, I&#39;d like to follow anything fresh you have to post. Would you list every one of all your community pages like your twitter feed, Facebook page or linkedin profile?

Take a look at my website ::  Michael Kors Outlet Online - http://www.avlogbook.com/michael-kors-handbags.html ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="57b451f1-82ac-4eed-8b0d-5b0b5ef11712" date-created="2013-05-17T15:06:59" date-modified="2013-05-17T15:06:59" approved="true" url="http://www.silverlightshow.net/news/Extending-the-Windows-Phone-pivot.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

Extending the Windows Phone pivot]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="174e7725-f81f-44ce-ab2d-527c9dd33942" date-created="2013-05-14T15:22:00" date-modified="2013-06-04T07:40:27" approved="true" post-url="/blog/post/2013/05/14/Presenting-at-Multi-mania.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Presenting at Multi-mania]]></title>
      <content type="text"><![CDATA[<p>Today I delivered a session at Europe&rsquo;s biggest free multimedia conference. The session was an introductory session on Windows Phone 8. As promised during the session, here are the slides</p>
<p><iframe style="margin-bottom: 5px; border-top: #ccc 1px solid; border-right: #ccc 1px solid; border-bottom: #ccc 0px solid; border-left: #ccc 1px solid;" src="http://www.slideshare.net/slideshow/embed_code/15590378" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" width="427" height="356"> </iframe></p>
<div style="margin-bottom: 5px;"><strong><a title="Discovering the wp8 sdk" href="http://www.slideshare.net/nicovermeir/discovering-the-wp8-sdk" target="_blank">Discovering the wp8 sdk</a> </strong>from <strong><a href="http://www.slideshare.net/nicovermeir" target="_blank">Nico Vermeir</a></strong></div>
<p>The demos can be found on my <a href="http://sdrv.ms/17ZnSGX" target="_blank">SkyDrive</a></p>
<p>In case you&rsquo;re interested in the session but couldn&rsquo;t make it to Multi-mania, I&rsquo;ve delivered this talk before as an MSDN webcast and there&rsquo;s a recording of that session.</p>
<p><iframe style="height: 540px; width: 960px;" src="http://channel9.msdn.com/(A(bHEwY2UNzQEkAAAAYmZmZGFkNjgtZTBlMS00ODFhLTg0NTctOWQ5NWYwMDkyNjQ0u5Xc2R8J08gHEBVo58ddiNUwFTk1))/posts/Exploring-the-Windows-Phone-8-SDK/player?w=960&amp;h=540" frameborder="0" scrolling="no"></iframe></p>
<p>&nbsp;</p>
<p>
<script type="text/javascript">// <![CDATA[
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
// ]]]]><![CDATA[></script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">// <![CDATA[

// ]]]]><![CDATA[></script>
</p>]]></content>
      <post-name type="text"><![CDATA[Presenting at Multi-mania]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="f016512c-1ad9-4a28-ab23-13e5ef3086b7" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
    </post>
    <post id="a01625c4-b817-48c3-80fc-d60ddb12d17b" date-created="2013-04-30T08:14:30" date-modified="2013-04-30T08:14:30" approved="true" post-url="/blog/post/2013/04/30/Taking-over-MSDN-BeLux.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Taking over MSDN BeLux]]></title>
      <content type="text"><![CDATA[<p>The Belgian MSDN team started an initiative a few weeks ago. They give the password to the MSDNBeLux Twitter account to someone from the community, that person gets to tweet about his favorite Microsoft technology for an entire week.</p>  <p>This week it’s my turn, so if you follow the MSDN Belux Twitter account, expect to see some Windows Phone related tweets popping up!</p>]]></content>
      <post-name type="text"><![CDATA[Taking over MSDN BeLux]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
      </categories>
    </post>
    <post id="c2cc3aa1-8c03-4bb3-bc66-a07f49905fda" date-created="2013-04-25T11:48:01" date-modified="2013-04-25T11:48:59" approved="true" post-url="/blog/post/2013/04/25/Porting-a-real-win8-app-to-WP8-part-3.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Porting a real win8 app to WP8–part 3]]></title>
      <content type="text"><![CDATA[<p>It’s been a good while since I last worked on porting Comic Cloud from Windows 8 to Windows Phone. If you can still remember, the goal was to maximize code reuse by using PCL wherever possible.</p>  <p>Part 3 will be the last part in this series, I’m currently holding a fully functional Windows Store app and a Windows Phone 8 app that can navigate pages and sent a search query to the api using a shared service layer. Theoretically everything is shared between the two platforms except the views, which makes sense. But it still required quite a lot of tinkering to get it to work.</p>  <h2>PCL is improving</h2>  <p>Microsoft is working hard on bringing as many libraries to PCL as they possibly can. In part 2 of the series I already mentioned the portable HttpClient, that library finally gave us a uniform way of doing HTTP requests on multiple platforms. Between part 2 and this part Microsoft has released the PCL version of their Azure Mobile Services SDK (beware! this one has breaking changes if you’re coming over from the platform specific SDK).</p>  <h2>Changes in my project</h2>  <p>I decided not to use the PCL version of WAMS yet because it has breaking changes and it doesn’t help me get rid of some platform specific projects, so no real use there yet.</p>  <p>What I wanted to achieve for demoing purpose was to get the search functionality working on the phone. The search function on the Windows Store app uses a <a href="http://msdn.microsoft.com/en-us/library/dd267312.aspx" target="_blank">BlockingCollection (MSDN link)</a> This is a thread safe collection, meaning I can safely prefetch data from one thread while loading data on the other thread. My entire search service is relying on this class (it’s an implementation of the consumer/producer pattern by the way), only problem: Windows Phone doesn’t have the BlockingCollection class. So I could either abstract the search service, change it entirely or implement my own version of the BlockingCollection. The last option seemed like the hardest one to do so I went for it. I’m not entirely sure if I got the exact same functionality of the real BlockingCollection (it does lack some methods and properties, I only implemented what I needed for my app) but here it is</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:70f65b5f-f288-44bf-8945-f40e2816b6a8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">BlockingCollection</span><span style="background:#ffffff;color:#000000">&lt;T&gt; : </span><span style="background:#ffffff;color:#2b91af">Queue</span><span style="background:#ffffff;color:#000000">&lt;T&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> _locker = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Queue</span><span style="background:#ffffff;color:#000000">&lt;T&gt; _itemQ;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _canAddItems;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> BlockingCollection()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_itemQ = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Queue</span><span style="background:#ffffff;color:#000000">&lt;T&gt;();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_canAddItems = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> EnqueueItem(T item)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">lock</span><span style="background:#ffffff;color:#000000"> (_locker)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">_itemQ.Enqueue(item); </span><span style="background:#ffffff;color:#008000">// We must pulse because we&#39;re</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Monitor</span><span style="background:#ffffff;color:#000000">.Pulse(_locker); </span><span style="background:#ffffff;color:#008000">// changing a blocking condition.</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> TryTake(</span><span style="background:#ffffff;color:#0000ff">out</span><span style="background:#ffffff;color:#000000"> T item, </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> millisecondsTimeout, CancellationToken cancellationToken)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">cancellationToken.ThrowIfCancellationRequested();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_canAddItems)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">lock</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>                <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">item = Dequeue();</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">}</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000">item = </span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(T);</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>                <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">item = </span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(T);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> TryAdd(T item, </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> millisecondsTimeout, CancellationToken cancellationToken)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">cancellationToken.ThrowIfCancellationRequested();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_canAddItems)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">lock</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000">Enqueue(item);</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>                <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000">)</span></li> <li>                <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>                <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CompleteAdding()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_canAddItems = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>It’s basically a Queue with some lock statements, it does work for me but I’m not responsible for any accidents that might occur <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_19.png" /></p>  <h2>Sharing ViewModels</h2>  <p>All my viewmodels are in a PCL library, managed to get that to work in part 1. The ViewModelLocator can’t be made portable since some using statements are different and the WP8 version might need some other classes then the win8 version. I decided to add the Windows Store ViewModelLocator as a link into the Windows Phone 8 project, adding in some pre-processor directives made it work like a charm (I make this sound easy but it did take some time to get it just right).</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9edd7779-42ce-405d-a2f6-079e4e0f07a8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> ComicDB.Framework;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> ComicDB.SDKBroker;</span></li> <li><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> ComicDB.View;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> GalaSoft.MvvmLight;</span></li> <li><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> GalaSoft.MvvmLight.Ioc;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> Microsoft.Practices.ServiceLocation;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">#if</span><span style="background:#ffffff;color:#000000"> !WINDOWS_PHONE</span></li> <li><span style="background:#ffffff;color:#808080">using ComicDB.Framework.WinRT;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#808080">using ComicDB.SDKBroker.WinRT;</span></li> <li><span style="background:#ffffff;color:#0000ff">#else</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> ComicDB.Framework.WP8;</span></li> <li><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> ComicDB.SDKBroker.WP8;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">#endif</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">namespace</span><span style="background:#ffffff;color:#000000"> ComicDB.ViewModel</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ViewModelLocator</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//SimpleIoc.Default.Register&lt;IDataService, DesignDataService&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">#if</span><span style="background:#ffffff;color:#000000"> !WINDOWS_PHONE</span></li> <li>                <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;ComicDB.Framework.Interface.INavigationService, ComicDB.Framework.WinRT.NavigationService&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">#else</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;ComicDB.Framework.Interface.</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000">, ComicDB.Framework.WP8.</span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">#endif</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">Service</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IMessageApi</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">MessageApi</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IFrameworkApi</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">FrameworkApi</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDispatcher</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">Dispatcher</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">INetworkApi</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NetworkApi</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//register views</span></li> <li><span style="background:#ffffff;color:#0000ff">#if</span><span style="background:#ffffff;color:#000000"> !WINDOWS_PHONE</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;IMainPage, MainPage&gt;();</span></li> <li>            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;IVolumeDetailPage, VolumeDetailPage&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;ICharacterDetailPage, CharacterDetailPage&gt;();</span></li> <li>            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;ICollectionPage, CollectionPage&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;IDetailPage, DetailPage&gt;();</span></li> <li>            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;IIssueDetailPage, IssueDetailPage&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;ILocationDetailPage, LocationDetailPage&gt;();</span></li> <li>            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;INewsFeedPage, NewsFeedPage&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;IPersonDetailPage, PersonDetailPage&gt;();</span></li> <li>            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;IStoryArcDetailPage, StoryArcDetailPage&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#808080">SimpleIoc.Default.Register&lt;ITeamDetailPage, TeamDetailPage&gt;();</span></li> <li><span style="background:#ffffff;color:#0000ff">#endif</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//register viewmodels</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">VolumeDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">CharacterDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">TeamDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IssueDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">SearchViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">DetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">StoryArcDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">LocationDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonDetailViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">CollectionViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">NewsFeedViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000"> Main</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.Current.GetInstance&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//... all other VM properties follow here, left out for demo purpose</span></li> </ol> </div> </div> </div>  <p>The pre-processor directives make the class look a bit dirty but it does get the job done.</p>  <p>At this point the WP8 app started and showed me the mainpage, with the mainviewmodel being its datacontext. Now I wanted to add an appbar with a searchbutton, a few problems there:</p>  <ul>   <li>the default appbar is not bindable (solved with Cimbalino) </li>    <li>the mainviewmodel doesn’t have a command to navigate to the searchpage since Windows Store uses the Search charm </li> </ul>  <p>I decided to take the quick and dirty solution here so I added a normal appbar with a button and a navigation statement in code behind. The SearchPage has SearchViewModel as datacontext. In Windows Store it was normal for the SearchText property to be immediately holding a value since it came from the Search charm, not the case in WP8. Small change to the viewmodel so that it doesn’t fire its Search function when SearchText is empty or null. This was the result after all my hard work</p>  <p><a href="http://i37.tinypic.com/igwzlh.jpg" target="_blank"><img src="http://i37.tinypic.com/igwzlh.jpg" width="518" height="303" /></a>&#160;</p>  <p>Mission accomplished!</p>  <h2>Conclusion</h2>  <p>PCL still has a long way to go but it is improving, and for some cases it can actually already be very useful (for example to share model classes over different platforms).</p>  <p>I would however advice against going for maximum code reuse, it all sounds great but the reality is very different. I had to make a lot of decisions, change quite a lot of architecture and even add missing classes (like the BlockingCollection).</p>  <p>My advice if you want to build a multiplatform app: use PCL to share your model, maybe even some small framework with helper classes, but build a custom implementation of service layers and viewmodels for each platform, it will save you a lot of hassle and probably even time. If you do decide to go for maximum code reuse, make sure that you really really think about it when you design your architecture, make sure that every little thing has an abstraction better one interface too many than having to rewrite a class.</p>  <p>Here’s a comparing screenshot between the solution before and after adding the WP8 project and refactoring everything.</p>  <p><a href="http://i37.tinypic.com/n1uphu.jpg" target="_blank"><img src="http://i37.tinypic.com/n1uphu.jpg" width="360" height="189" /></a></p>  <p><script type="text/javascript"><!--
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script><script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>]]></content>
      <post-name type="text"><![CDATA[Porting a real win8 app to WP8–part 3]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="81e4515f-9482-48d4-83be-9800e6f3e100" />
        <category ref="cd0e8753-7f49-46cc-b4ed-293f72eb73c7" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="721ee7e8-2654-4994-aedb-9be0dcf36fda" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-04-28T14:01:22" date-modified="2013-04-28T14:01:22" approved="true" user-name="Zubair Ahmed" user-email="zubairdotnet@hotmail.com" user-ip="94.205.250.30" user-url="">
          <title type="text"><![CDATA[re: Porting a real win8 app to WP8–part 3]]></title>
          <content type="text"><![CDATA[Very nice article, this looks like something really useful for me when I start porting my own app. Bookmarked.]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="2dd302fd-1d63-45ec-8d52-dae0e04a7d6f" date-created="2013-04-17T07:55:17" date-modified="2013-04-17T07:57:39" approved="true" post-url="/blog/post/2013/04/17/MSDN-webcast-SignalR-and-WP8-slides-and-demos.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[MSDN webcast SignalR and WP8 slides and demos]]></title>
      <content type="text"><![CDATA[<p>I had the pleasure of presenting an MSDN webcast on SignalR and Windows Phone 8 yesterday. I had a great time presenting and believe it or not, all demos actually worked! (it was live coding)</p>  <p>The stream was recorded and will be available on Channel 9 soon, in the meantime you can download the demos <a href="http://sdrv.ms/YSWol6" target="_blank">here</a> (the chat application in the download also has a Windows 8 client as an added bonus).</p>  <p>This slides are on SlideShare.</p> <br /> <iframe height="400" marginheight="0" src="http://www.slideshare.net/slideshow/embed_code/18973642" frameborder="0" width="476" marginwidth="0" scrolling="no"></iframe><script type="text/javascript"><!--
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script><script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>]]></content>
      <post-name type="text"><![CDATA[MSDN webcast SignalR and WP8 slides and demos]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="a32f3d48-8cb6-4bb0-81e3-59bd37a2678b" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="3ea3cc57-12ac-4425-90cc-635093df9f95" />
        <category ref="f016512c-1ad9-4a28-ab23-13e5ef3086b7" />
      </categories>
    </post>
    <post id="0db1415e-9a19-4536-a589-502efb17a015" date-created="2013-04-12T13:22:00" date-modified="2013-04-16T09:01:29" approved="true" post-url="/blog/post/2013/04/12/10-things-you-might-have-missed-about-MVVM-Light.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[10 things you might have missed about MVVM Light]]></title>
      <content type="text"><![CDATA[<p>Ever since I started playing with XAML based technologies (which actually isn&rsquo;t that long ago) I&rsquo;ve been looking into the MVVM (Model &ndash; View &ndash; ViewModel) pattern. I stumbled across MVVM Light pretty soon and liked the way it worked. Turns out I&rsquo;m not the only one that likes it, there&rsquo;s a whole set of developers, both hobby and professional, that really love this set of libraries. MVVM Light is, according to the author, not a framework but a set of libraries that take care of the plumbing to set up an MVVM structure and provide some extra helper classes to make life easier.</p>
<p>MVVM Light has changed a lot in its history, some elements were dragged out, others dragged in. Fact remains that it&rsquo;s a fast, easy to use and lightweight framework. The author, Laurent Bugnion, does a great job of listening to the people that use MVVM Light, incorporating requested features and helping developers out. While talking to some of my fellow developers I&rsquo;ve noticed a few times that there are certain elements of MVVM Light that others hadn&rsquo;t heard of, and the same goes in the other direction. I&rsquo;ve learned a lot of new things about MVVM Light just from talking with other users. Thinking about that gave me the idea of this blogpost and since those &ldquo;10 things about&hellip;&rdquo; posts seem to be popular, this was my chance. So here are my top 10 hidden gems of MVVM Light that you might have missed.</p>
<h2>1. The MVVM Light installer</h2>
<p>This one might seem a bit obvious, but in this NuGet driven world we would forget the added benefit of an installer. MVVM Light has an MSI installer that not only installs the binaries on your drive but it also provides project and itemtemplates in Visual Studio, along with a list of snippets. In case the Visual Studio 2012 update 2 removed your templates, reinstall the VSIX from C:\Program Files (x86)\Laurent Bugnion (GalaSoft)\Mvvm Light Toolkit\Vsix that should put the project templates back in place.</p>
<p><a href="http://i48.tinypic.com/15wbh94.jpg" target="_blank"><img src="http://i48.tinypic.com/15wbh94.jpg" alt="" width="409" height="283" /></a></p>
<h2>2. Constructor injection</h2>
<p>This one is just awesome, and is actually a feature that can be found in most DI frameworks. MVVM Light uses SimpleIoc to register viewmodels and service classes at application launch (or during the app lifetime). Constructor injection means that you can specify a parameter in a class his constructor. When that class gets instantiated SimpleIoc will try to find a registered class of the same type as the parameter, when it finds one, that instance will get injected as the parameter of the constructor. Here&rsquo;s an example, let&rsquo;s say that in the ViewModelLocator, we register a navigation service.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:18154e96-5e91-47fd-9de3-0c8e97666d37" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INavigationService</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NavigationService</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
</ol></div>
</div>
</div>
<p>We state here that we want to register an INavigationService in the IOC container, when it creates the instance we want it to be of type NavigationService. This &ldquo;record&rdquo; in the IOC container doesn&rsquo;t have an instance yet, it gets instantiated when we fetch it from the container the first time. There are some occasions where you would want to create an instance of a class immediately when it gets registered. the Register&lt;T&gt; function of SimpleIoc has an overload to do just that.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b99ec395-3036-4e5c-9f21-7a42b0d1d52e" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INavigationService</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NavigationService</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
</ol></div>
</div>
</div>
<p>Just pass in true as a parameter and it will create an instance right there and then.</p>
<p>Now we want to use the NavigationService in the MainViewModel.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:419ab7a4-f687-48ea-908d-a1559553d3a8" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #808080;">///</span><span style="background: #ffffff; color: #808080;">&lt;summary&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #808080;">///</span><span style="background: #ffffff; color: #008000;"> Initializes a new instance of the MainViewModel class.</span></li>
<li><span style="background: #ffffff; color: #808080;">///</span><span style="background: #ffffff; color: #808080;">&lt;/summary&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> MainViewModel(</span><span style="background: #ffffff; color: #2b91af;">INavigationService</span><span style="background: #ffffff; color: #000000;"> navigationService)</span></li>
<li><span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>SimpleIoc will search for a registered class of type INavigationService and will inject it in this constructor. This saves us the hassle of manually contacting the IOC container and requesting the correct instance.</p>
<p>WARNING: do be careful with this, the order in which you register your classes with the IOC container can be important, especially when using the overload to create instances. If I would create the MainViewModel before the NavigationService is registered I would get a nullreference exception. So be aware of that.</p>
<h2>3. SimpleIoc to simple? replace it!</h2>
<p>The SimpleIoc library works great and is a cool, lightweight addition to MVVM Light, but it is actually really lightweight. It is a very realistic scenario that for larger apps the SimpleIoc just won&rsquo;t do (or you&rsquo;re like me and want to try out how hard it is to replace it with another one). In this example I&rsquo;m going to replace SimpleIoc with AutoFac, another well known and very powerful IOC service.</p>
<p>First of all, we&rsquo;re going to need the AutoFac libraries and the extra library that allows us to use the ServiceLocator, just like SimpleIoc does. So either from the package manager console or from the UI, add the CommonServiceLocator extra for AutoFac, the AutoFac libraries are a dependency so they&rsquo;ll get installed as well. I&rsquo;m using a brand new Windows Phone 8 project for this, started from the MVVM Light project template.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:faeef52f-718c-42a8-ab5d-2b97ea97b9f5" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li>Install-Package Autofac.Extras.CommonServiceLocator</li>
</ol></div>
</div>
</div>
<p>The only place we&rsquo;ll need to change some code is in the ViewModelLocator.</p>
<p>This is the new ViewModelLocator constructor, I&rsquo;ve put the old SimpleIoc code in comments so it&rsquo;s easy to compare</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:442d38a5-67da-4977-b6a2-a278e426cb88" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">static</span><span style="background: #ffffff; color: #000000;"> ViewModelLocator()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> container = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">ContainerBuilder</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//ServiceLocator.SetLocatorProvider(() =&gt; SimpleIoc.Default);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">ServiceLocator</span><span style="background: #ffffff; color: #000000;">.SetLocatorProvider(() =&gt; </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">AutofacServiceLocator</span><span style="background: #ffffff; color: #000000;">(container.Build()));</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">ViewModelBase</span><span style="background: #ffffff; color: #000000;">.IsInDesignModeStatic)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//SimpleIoc.Default.Register&lt;IDataService, Design.DesignDataService&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">container.RegisterType&lt;Design.</span><span style="background: #ffffff; color: #2b91af;">DesignDataService</span><span style="background: #ffffff; color: #000000;">&gt;().As&lt;</span><span style="background: #ffffff; color: #2b91af;">IDataService</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">else</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">container.RegisterType&lt;</span><span style="background: #ffffff; color: #2b91af;">DataService</span><span style="background: #ffffff; color: #000000;">&gt;().As&lt;</span><span style="background: #ffffff; color: #2b91af;">IDataService</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//SimpleIoc.Default.Register&lt;MainViewModel&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">container.RegisterType&lt;</span><span style="background: #ffffff; color: #2b91af;">MainViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>And that&rsquo;s it, we declare a ContainerBuilder, set it as the LocatorProvider. The container is then used to register everything we need. The SimpleIoc overload that creates an instance upon registering would look something like this in AutoFac.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f5ccea80-41b3-4b52-8ee5-ae44e98533ee" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #000000;">container.RegisterInstance(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">DataService</span><span style="background: #ffffff; color: #000000;">()).As&lt;</span><span style="background: #ffffff; color: #2b91af;">IDataService</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
</ol></div>
</div>
</div>
<p>That&rsquo;s it, constructor injection should still work exactly like before with SimpleIoc.</p>
<h2>4. Built-in messages</h2>
<p>MVVM Light has something called the messenger, it registers classes as listeners and can send messages to them. This is commonly used to do communication between viewmodels. Generally I would create a message class for each type of message that I want to send, but MVVM Light has some build in messages that we can use.</p>
<p><strong>GenericMessage&lt;T&gt;(T content)</strong> A message that can contain whatever of type T.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:06b7c11a-e552-479b-9139-1c28fd1c30be" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #2b91af;">Messenger</span><span style="background: #ffffff; color: #000000;">.Default.Send(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">GenericMessage</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #a31515;">"my message"</span><span style="background: #ffffff; color: #000000;">));</span></li>
</ol></div>
</div>
</div>
<pre><strong>NotificationMessage(string notification)</strong>a message that contains a notification. this might be<br />used to send a notification to a notification factory that will show the message in the preferred way.</pre>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f034dfd1-2c0e-4e00-88f7-a49cf45e6e34" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">try</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//try something</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #008000;">}</span></li>
<li><span style="background: #ffffff; color: #0000ff;">catch</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">Exception</span><span style="background: #ffffff; color: #000000;"> ex)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">Messenger</span><span style="background: #ffffff; color: #000000;">.Default.Send(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">NotificationMessage</span><span style="background: #ffffff; color: #000000;">(ex.Message));</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>There&rsquo;s also a <strong>NotificationMessage&lt;T&gt;(T notification)</strong> should you need it.</p>
<p>The next one is NotificationMessageAction(string notification, Action callback) basically the same as the NotificationMessage but you can add a callback action that will fire once the message is received. This one also has the generic implementation just like NotificationMessage.</p>
<pre><strong>DialogMessage(string content, Action&lt;MessageBoxResult&gt; callback) <br /></strong>This message is meant to ask the user to input something and it will return the result of that input in the <br />MessageBoxResult. MessageBoxResult is an enum that lives in System.Windows</pre>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5bf3dc72-80ae-46c4-a66f-dd1d7a2ffb14" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">enum</span><span style="background: #ffffff; color: #2b91af;">MessageBoxResult</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">None = 0,</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">OK = 1,</span></li>
<li>&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Cancel = 2,</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Yes = 6,</span></li>
<li>&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">No = 7,</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>&nbsp;</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bfb9b26c-2087-4d93-b16e-501f5be15d72" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #2b91af;">Messenger</span><span style="background: #ffffff; color: #000000;">.Default.Send(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">DialogMessage</span><span style="background: #ffffff; color: #000000;">(</span><span style="background: #ffffff; color: #a31515;">"Are you sure?"</span><span style="background: #ffffff; color: #000000;">, result =&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (result == </span><span style="background: #ffffff; color: #2b91af;">MessageBoxResult</span><span style="background: #ffffff; color: #000000;">.Yes)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//do something</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}));</span></li>
</ol></div>
</div>
</div>
<p>The DialogMessage class inherits from GenericMessage&lt;string&gt;</p>
<pre><strong>PropertyChangedMessage(T oldValue, T newValue, string propertyName)</strong>
The PropertyChangedMessage is meant to use like the RaisePropertyChanged implementation. This is great when multiple <br />viewmodels need to respond to a changed property.</pre>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e5fc6761-b01d-4d43-8506-39ff8b85538d" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> WelcomeTitle</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">get</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #000000;"> _welcomeTitle;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">set</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (_welcomeTitle == </span><span style="background: #ffffff; color: #0000ff;">value</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">Messenger</span><span style="background: #ffffff; color: #000000;">.Default.Send(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">PropertyChangedMessage</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt;(_welcomeTitle, </span><span style="background: #ffffff; color: #0000ff;">value</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #a31515;">"WelcomeTitle"</span><span style="background: #ffffff; color: #000000;">));</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_welcomeTitle = </span><span style="background: #ffffff; color: #0000ff;">value</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">RaisePropertyChanged(WelcomeTitlePropertyName);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>Be careful when registering listeners, try to use as many different types of messages as makes sense. You don&rsquo;t want a wrong listener to receive a message because it happens to listen to the same type of message. To register a listener do this:</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:35fe87f6-5074-4e70-abb8-6fea55f48600" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #2b91af;">Messenger</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">PropertyChangedMessage</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt;&gt;(</span><span style="background: #ffffff; color: #0000ff;">this</span><span style="background: #ffffff; color: #000000;">, message =&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> a = message.NewValue;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//do something</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">} );</span></li>
</ol></div>
</div>
</div>
<h2>5. Portable libraries</h2>
<p>MVVM Light is available on every XAML based platform. And it comes with a portable version now. The portable version is a separate library on NuGet.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4b35931c-7128-457a-8475-4f7fedf7eb9b" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li>Install-Package Portable.MvvmLightLibs</li>
</ol></div>
</div>
</div>
<p>If you decide to use the portable version, make sure that every project in your solution that needs the MVVM Light libraries references the portable version. It does not work together with the &ldquo;normal&rdquo; MVVM Light libraries. When you use the PCL version, you can put your viewmodels in a separate, portable library and share them over, for example, a Windows Store and a Windows Phone app.</p>
<h2>6. Event to Command behavior</h2>
<p>MVVM Light has an ICommand implementation called RelayCommand that can be used to bind commands to actions. Like for example a button in XAML has a Command property that can be bound to an ICommand on its datacontext, so that when the button is clicked the ICommand will fire. Unfortunately not every XAML UI element has a bindable command property for every event that they can trigger and that&rsquo;s where EventToCommand comes into play. With EventToCommand you can bind any event from a XAML UI element to an ICommand in the viewmodel.</p>
<p>First we&rsquo;ll need two namespaces in our XAML page</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7df46613-d113-4e4a-a5b8-fa8a46fad4c4" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div class="le-pavsc-container">
<div class="le-pavsc-titleblock">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #ff0000;">xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">i</span><span style="background: #ffffff; color: #0000ff;">="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"</span></li>
<li class="le-pavsc-even"><span style="background: #ffffff; color: #ff0000;">xmlns</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">command</span><span style="background: #ffffff; color: #0000ff;">="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WP8"</span></li>
</ol></div>
</div>
</div>
<p>Let&rsquo;s say that we want to use the Tap event on a stackpanel.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3073c2c6-de85-4298-8758-965e96bc9cc6" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">StackPanel</span><span style="background: #ffffff; color: #ff0000;"> Grid.Row</span><span style="background: #ffffff; color: #0000ff;">="0"</span><span style="background: #ffffff; color: #ff0000;"> Orientation</span><span style="background: #ffffff; color: #0000ff;">="Horizontal"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">i</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">Interaction.Triggers</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">i</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">EventTrigger</span><span style="background: #ffffff; color: #ff0000;"> EventName</span><span style="background: #ffffff; color: #0000ff;">="Tap"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">command</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">EventToCommand</span><span style="background: #ffffff; color: #ff0000;"> Command</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">Binding</span><span style="background: #ffffff; color: #ff0000;"> GoToCommand}</span><span style="background: #ffffff; color: #0000ff;">"</span><span style="background: #ffffff; color: #ff0000;"> CommandParameter</span><span style="background: #ffffff; color: #0000ff;">="Edit" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">i</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">EventTrigger</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">i</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">Interaction.Triggers</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>Line 3 specifies the event that we want to handle, note that this is a string so be aware of typos. Line 4 binds the actual command and can even pass a parameter to the ICommand implementation.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:88867710-e602-4e9f-9dd6-5149c9629845" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">RelayCommand</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt; _goToCommand;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #2b91af;">RelayCommand</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt; GoToCommand</span></li>
<li><span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">get</span><span style="background: #ffffff; color: #000000;"> { </span><span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #000000;"> _goToCommand jQuery15206875578026641675_1366095632942 (_goToCommand = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">RelayCommand</span><span style="background: #ffffff; color: #000000;">&lt;</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">&gt;(NavigateAway)); }</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>The NavigateAway method has this signature</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3d610a1c-5722-4087-bdc9-b93c8fa95962" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> NavigateAway(</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> parameter)</span></li>
</ol></div>
</div>
</div>
<p>The parameter will be the word &ldquo;Edit&rdquo; in this case as that&rsquo;s what we&rsquo;ve specified in the XAML. We can even pass the eventargs from the event to the Command by changing line 4 from the XAML snippet to this</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:74f4dc59-1e2c-4f5f-981d-fe911d92b507" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">command</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #a31515;">EventToCommand</span><span style="background: #ffffff; color: #ff0000;"> PassEventArgsToCommand</span><span style="background: #ffffff; color: #0000ff;">="True"</span><span style="background: #ffffff; color: #ff0000;"> Command</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">Binding</span><span style="background: #ffffff; color: #ff0000;"> GoToCommand}</span><span style="background: #ffffff; color: #0000ff;">"</span><span style="background: #ffffff; color: #0000ff;"> /&gt;</span></li>
</ol></div>
</div>
</div>
<p>Windows Store applications don&rsquo;t have these behaviors out of the box so you won&rsquo;t be able to use EventToCommand there unless you install the Win8nl toolkit from NuGet. Joost Van Schaik has build his own implementation of behaviors in WinRT and thanks to his efforts (and of some other people that have helped in the project) we can now use EventToCommand in WinRT.</p>
<h2>7. DispatcherHelper</h2>
<p>Since .net 4.5 we have the await/async keywords and being the good little citizens that we are we do a lot of stuff async now. That means if we want to update something that lives on the UI thread we&rsquo;ll need the Dispatcher class to marshall our action to that thread. Normally we don&rsquo;t have access to the Dispatcher from our viewmodel classes. MVVM Light contains a DispatcherHelper that will execute an action on the UI thread when needed.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:870ba6fd-080b-461e-99ea-c55b9b13f9de" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #2b91af;">DispatcherHelper</span><span style="background: #ffffff; color: #000000;">.CheckBeginInvokeOnUI(() =&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//do something </span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">});</span></li>
</ol></div>
</div>
</div>
<p>The DispatcherHelper gets initialized in the App.xaml.cs in the InitializePhoneApplication method (in a WP8 project that is).</p>
<p>DispatcherHelper also has a RunAsync method. The difference with the CheckBeginInvokeOnUI is that the CheckBeginInvokeOnUI will first check if it&rsquo;s already on the UI thread, if it is it will just execute the action, if it isn&rsquo;t it will call the RunAsync method.</p>
<h2>8. Blendable</h2>
<p>MVVM Light has complete Blend support, meaning you can drag and drop properties from the viewmodel onto the view to generate a binding, or you can generate design time data based on the datacontext and so on. I&rsquo;m really not that good in Blend so I&rsquo;m not going into detail about this one, just remember that MVVM Light was build with Blend in mind.</p>
<h2>9. Open Source</h2>
<p>This one you probably knew but MVVM Light is completely open source. <a title="http://mvvmlight.codeplex.com/" href="http://mvvmlight.codeplex.com/">http://mvvmlight.codeplex.com/</a> is the place to be if you want to dive into the source code.</p>
<h2>10. Laurent is on Twitter and he&rsquo;s a nice guy <img class="wlEmoticon wlEmoticon-smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_18.png" alt="Glimlach" /></h2>
<p>Laurent Bugnion, the founder of MVVM Light, is on Twitter! <a title="https://twitter.com/LBugnion" href="https://twitter.com/LBugnion">https://twitter.com/LBugnion</a> he&rsquo;s a great guy to chat with and very eager to help out anyone who needs help.</p>
<h2>&nbsp;</h2>
<h2>Conclusion</h2>
<p>MVVM Light is a great library with a few hidden gems. In this article I&rsquo;ve discussed 8 very interesting ones that can make your life as a developer easier. I&rsquo;ve included two more extra items because 10 is a prettier number than 8 <img class="wlEmoticon wlEmoticon-smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_18.png" alt="Glimlach" /></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<script type="text/javascript">// <![CDATA[
google_ad_client = "ca-pub-2343948435149147";
/* spikie.be underpost */
google_ad_slot = "9230774310";
google_ad_width = 468;
google_ad_height = 60;
// ]]]]><![CDATA[></script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">// <![CDATA[

// ]]]]><![CDATA[></script>]]></content>
      <post-name type="text"><![CDATA[10 things you might have missed about MVVM Light]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="934a64b5-99c0-4b9e-85d6-e495495043b4" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-04-13T14:51:59" date-modified="2013-04-13T14:51:59" approved="true" user-name="Matt" user-email="matt@roguecode.co.za" user-ip="41.133.184.101" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Wow, never knew No. 7. 
Thanks!]]></content>
        </comment>
        <comment id="9d2b1862-072a-4935-8424-b2c186bfe5d7" parentid="934a64b5-99c0-4b9e-85d6-e495495043b4" date-created="2013-04-13T15:21:04" date-modified="2013-04-13T15:21:04" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="78.20.136.190" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[my pleasure, glad it helped :)]]></content>
        </comment>
        <comment id="0e60d4b6-520d-4c06-8148-02d01eac456e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-04-15T14:21:24" date-modified="2013-04-15T14:21:24" approved="true" user-name="Laurent Bugnion" user-email="laurent@galasoft.ch" user-ip="207.173.177.130" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Very cool article, appreciate it very much! Thanks Nico.

Laurent]]></content>
        </comment>
        <comment id="78aacbd3-6467-4367-9f26-797ae5c1841d" parentid="0e60d4b6-520d-4c06-8148-02d01eac456e" date-created="2013-04-15T14:24:54" date-modified="2013-04-15T14:24:54" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="81.83.203.74" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[It&#39;s my pleasure Laurent, thank you for building and maintaining such a great set of tools!]]></content>
        </comment>
        <comment id="009b2cbb-8a95-463d-a243-86b07821be59" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-04-24T18:18:32" date-modified="2013-04-24T18:18:32" approved="true" user-name="VVv" user-email="vovansuper@mail.ru" user-ip="193.167.228.171" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Well known features, but nicely summedup :)]]></content>
        </comment>
        <comment id="4758c4ee-414b-4d27-8a2a-652597b81c9e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-17T16:22:44" date-modified="2013-06-17T16:22:44" approved="false" user-name="how to get back with your ex" user-email="brockfaust@gmail.com" user-ip="66.248.193.182" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hello There. I found your blog using msn. This is a very well written article. I&#39;ll make sure to bookmark it and come back to read more of your useful info. Thanks for the post. I will certainly comeback.

Also visit my blog post ::  how to get back with your ex - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="7a5080a8-a014-4587-b17b-2903e9590590" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:09:46" date-modified="2013-06-19T19:09:46" approved="false" user-name="Michael Kors Outlet Store" user-email="georgegore@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I&#39;d like to find out more? I&#39;d care to find out more details.

Here is my website ::  Michael Kors Outlet Store - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="4be8a5c3-bb28-40bb-a2cf-c07ae2ce6092" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:10:00" date-modified="2013-06-19T19:10:00" approved="false" user-name="Louis Vuitton Belts" user-email="charisvernon@googlemail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hello! I&#39;ve been reading your weblog for a while now and finally got the bravery to go ahead and give you a shout out from  Kingwood Tx! Just wanted to tell you keep up the excellent work!

Here is my web blog ::  Louis Vuitton Belts - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="42f9a608-8541-415b-9aa0-c7bff477475a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:11:42" date-modified="2013-06-19T19:11:42" approved="false" user-name="www.avlogbook.com" user-email="unamayers@bigstring.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I like reading through a post that can make men and women think. Also, thank you for permitting me to comment!

Feel free to surf to my blog - Michael Kors Outlet Online -  www.avlogbook.com - http://www.avlogbook.com/michael-kors-handbags.html  -]]></content>
        </comment>
        <comment id="d76267c1-0627-48bd-8552-99dd09834fd9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:42:15" date-modified="2013-06-19T19:42:15" approved="false" user-name="Louis Vuitton Handbags Outlet" user-email="lucinda.dowling@gmail.com" user-ip="184.154.82.166" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[That is really attention-grabbing, You&#39;re an excessively skilled blogger. I have joined your feed and look forward to in search of extra of your magnificent post. Additionally, I&#39;ve shared your site in my social networks

my blog post  Louis Vuitton Handbags Outlet - http://www.avlogbook.com/louis-vuitton-outlet.html ]]></content>
        </comment>
        <comment id="8624b87c-664e-41a8-b266-cae799765760" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-21T01:37:03" date-modified="2013-06-21T01:37:03" approved="false" user-name="black bridesmaid dresses" user-email="rosariacamarillo@gmail.com" user-ip="192.119.148.193" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[It seems like they carry eternal appeal and always look great on different silhouettes. It is accentuated with a thicker black belt, complete with a stylish floral appliqu. The Short Crinkle Chiffon Dress with Ruffle Neckline will flatter all of your friends with its flowing fabric and precious, feminine design.

My weblog ...  black bridesmaid dresses - http://www.weddingdressguide.info/category/bridesmaiddresses/ ]]></content>
        </comment>
        <comment id="04ebfd40-1fed-43d9-8518-a8f7d00b5313" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T13:24:15" date-modified="2013-06-22T13:24:15" approved="false" user-name="things to say to Get an ex back" user-email="franciscostephen@petml.com" user-ip="66.248.202.243" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hello, i read your blog from time to time and i own a similar one and i was just wondering if you get a lot of spam responses? If so how do you reduce it, any plugin or anything you can recommend? I get so much lately it&#39;s driving me crazy so any support is very much appreciated.

my site:  things to say to Get an ex back - http://www.youtube.com/user/ExBackSecretFormula ]]></content>
        </comment>
        <comment id="8a58d51b-157f-48c6-bede-574cd7fd54e8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T14:51:25" date-modified="2013-06-22T14:51:25" approved="false" user-name="what can i say to get my ex back" user-email="larhonda_herrington@googlemail.com" user-ip="66.248.193.41" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Every weekend i used to pay a visit this web page, because i want enjoyment, as this this site conations truly good funny material too.

Also visit my web blog:  what can i say to get my ex back - http://casimiram.beeplog.com/349995_1944826.htm ]]></content>
        </comment>
        <comment id="35708890-b7f0-402a-8831-096ffa12d75c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T18:59:34" date-modified="2013-06-22T18:59:34" approved="false" user-name="how to get a ex back" user-email="alfie-lapointe@bigstring.com" user-ip="66.248.193.174" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Good way of telling, and nice paragraph to get information about my presentation topic, which i am going to present in college.

Here is my webpage -  how to get a ex back - http://www.youtube.com/watch?v=v_cbPd-pf9I ]]></content>
        </comment>
        <comment id="e818bad5-326f-413b-b064-ed765e5a3706" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T23:30:18" date-modified="2013-06-22T23:30:18" approved="false" user-name="Shay" user-email="shaymosley@t-online.de" user-ip="66.248.193.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Greetings from California! I&#39;m bored at work so I decided to browse your website on my iphone during lunch break. I really like the information you present here and can&#39;t wait to take a look when I get home. I&#39;m amazed at how quick your blog loaded on my mobile .. I&#39;m not even using WIFI, just 3G .. Anyhow, fantastic blog!

my website :: how to get back with your ex [ Shay - http://www.youtube.com/watch?v=tzNVZ9l5QBM ]]]></content>
        </comment>
        <comment id="7318cd0e-c8e9-487b-97a4-b48f02525aba" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-23T09:41:47" date-modified="2013-06-23T09:41:47" approved="false" user-name="how to get your ex back" user-email="dane-luis@gmx.de" user-ip="66.248.193.174" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Aw, this was a really nice post. Spending some time and actual effort to generate a great article… but what can I say… I put things off a lot and never manage to get anything done.

Feel free to surf to my site ::  how to get your ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="3b9de308-2444-4965-844f-9b4d6c7d9e4c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-23T22:15:36" date-modified="2013-06-23T22:15:36" approved="false" user-name="words To say to get your ex back" user-email="jaimemeza@arcor.de" user-ip="192.119.151.216" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hi! Do you use Twitter? I&#39;d like to follow you if that would be ok. I&#39;m absolutely enjoying your blog and look forward to new posts.

Here is my blog -  words To say to get your ex back - http://blogs.albawaba.com/jenslevi/140499/2013/06/14/686782-tom-daniels-how-to-get-your-ex-back-. ]]></content>
        </comment>
        <comment id="05c5590a-f60b-467e-a1b1-4e8d594620d8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T00:34:26" date-modified="2013-06-26T00:34:26" approved="false" user-name="Michael Kors Outlet" user-email="stepanieoverby@gmail.com" user-ip="74.221.217.200" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I every time used to study post in news papers but now as I am a user of web thus from now I am using net for articles or reviews, thanks to web.

Visit my web site ...  Michael Kors Outlet - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="df198cea-c63c-4a5f-b33c-bd0d0ac69b32" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T01:41:26" date-modified="2013-06-26T01:41:26" approved="false" user-name="Louis Vuitton Handbags" user-email="philiptorrence@gmail.com" user-ip="74.221.217.200" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Its like you read my mind! You appear to know so much about this, like you wrote the book in it or something. I think that you could do with some pics to drive the message home a little bit, but other than that, this is great blog. An excellent read. I&#39;ll certainly be back.

Here is my web page ::  Louis Vuitton Handbags - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="c8b8bac3-9495-46a3-8e4e-e1f0d94db26d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T04:47:33" date-modified="2013-06-28T04:47:33" approved="false" user-name="how do you get an ex back" user-email="arlie_paterson@aol.com" user-ip="66.248.193.182" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I like the valuable information you provide in your articles. I&#39;ll bookmark your blog and check again here regularly. I am quite sure I will learn many new stuff right here! Good luck for the next!

My page:  how do you get an ex back - http://www.youtube.com/watch?v=v_cbPd-pf9I ]]></content>
        </comment>
        <comment id="1250ec40-1d39-45b7-b203-63dc9988c907" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T05:52:18" date-modified="2013-06-28T05:52:18" approved="false" user-name="how to get your ex back" user-email="lorabest@googlemail.com" user-ip="66.248.202.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Excellent weblog right here! Additionally your website a lot up fast! What host are you the use of? Can I am getting your affiliate hyperlink on your host? I want my web site loaded up as fast as yours lol

my blog ::  how to get your ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="c756bf7d-715c-40c5-b2f4-541ad79c77e4" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T10:07:24" date-modified="2013-06-28T10:07:24" approved="false" user-name="How do you get your Ex Back" user-email="rashadbeaman@t-online.de" user-ip="66.248.202.73" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hi, just wanted to say, I enjoyed this blog post. It was inspiring. Keep on posting!

Look into my web blog ...  How do you get your Ex Back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="91ef4d39-e06d-43cd-a2d2-83adc74b31ae" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T12:21:47" date-modified="2013-06-28T12:21:47" approved="false" user-name="Erika" user-email="erikastoddard@freenet.de" user-ip="176.222.33.79" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Every weekend i used to go to see this web page, as i want enjoyment, as this this web site conations in fact pleasant funny data too.

my web site free 2d animation software download for windows xp ( Erika - http://www.softwaremania.net )]]></content>
        </comment>
        <comment id="28fb39cf-a752-46d8-84b6-10aa18e9d291" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T22:29:34" date-modified="2013-06-28T22:29:34" approved="false" user-name="Maureen" user-email="maureenmatthews@zoho.com" user-ip="66.248.202.73" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[If some one wishes to be updated with newest technologies therefore he must be go to see this web page and be up to date everyday.

my site :: how do you get your ex back ( Maureen - http://www.prlog.org/12146072-secrets-of-how-to-get-your-ex-back-re-ignited-relationships-programs-review-is-it-scam-or-real.html )]]></content>
        </comment>
        <comment id="2d4fbe0e-0e14-4417-8400-14b64e33c7a8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T04:58:55" date-modified="2013-06-29T04:58:55" approved="false" user-name="ways to get your ex back" user-email="garrett.wilkins@inbox.com" user-ip="66.248.193.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Appreciate the recommendation. Let me try it out.

my blog -  ways to get your ex back - http://www.youtube.com/watch?v=tzNVZ9l5QBM ]]></content>
        </comment>
        <comment id="05ecd32b-9feb-4ba9-b031-c8ecee7f5463" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T08:24:38" date-modified="2013-06-29T08:24:38" approved="false" user-name="how to Get back with your ex" user-email="cornell-muhammad@web.de" user-ip="192.119.151.32" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hello There. I found your blog the usage of msn. This is an extremely smartly written article. I will make sure to bookmark it and come back to learn more of your useful information. Thanks for the post. I&#39;ll certainly comeback.

Also visit my webpage -  how to Get back with your ex - http://vimeo.com/69285875 ]]></content>
        </comment>
        <comment id="6da4d3b2-975d-4357-8b2b-1b1a8bae5b45" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T22:00:03" date-modified="2013-06-29T22:00:03" approved="false" user-name="win ur ex back" user-email="dorisberrios@wildmail.com" user-ip="66.248.193.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hey! I know this is somewhat off topic but I was wondering if you knew where I could find a captcha plugin for my comment form? I&#39;m using the same blog platform as yours and I&#39;m having trouble finding one? Thanks a lot!

Feel free to visit my web page:  win ur ex back - http://www.youtube.com/v/sKOUWevwRgI ]]></content>
        </comment>
        <comment id="04d427b4-248b-40dc-a1ec-6f980ee6d43d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T02:45:24" date-modified="2013-06-30T02:45:24" approved="false" user-name="ways to get your Ex back" user-email="ashleighrandolph@bigstring.com" user-ip="66.248.193.174" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Valuable information. Fortunate me I found your site by chance, and I&#39;m shocked why this twist of fate didn&#39;t took place in advance! I bookmarked it.

Feel free to surf to my blog:  ways to get your Ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="02afd7fc-1f62-46ed-b21a-8f950e779d37" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T03:56:45" date-modified="2013-06-30T03:56:45" approved="false" user-name="Katharina" user-email="katharinaowens@gmail.com" user-ip="66.248.193.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Way cool! Some very valid points! I appreciate you writing this article and the rest of the site is really good.

my web page how to get ex back -  Katharina - http://www.youtube.com/user/ExBackSecretFormula  -]]></content>
        </comment>
        <comment id="7e357623-56c5-489e-8d5c-230220bd7563" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T04:20:31" date-modified="2013-06-30T04:20:31" approved="false" user-name="ways to get your ex back" user-email="ignacioedmondson@aol.com" user-ip="66.248.202.73" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hi there, all is going nicely here and ofcourse every one is sharing facts, that&#39;s genuinely fine, keep up writing.

Feel free to surf to my web blog;  ways to get your ex back - http://nathanielhartne.tblog.com/post/1970461861 ]]></content>
        </comment>
        <comment id="52105c3f-4f83-455b-9334-d131fd8bd26c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T05:49:04" date-modified="2013-06-30T05:49:04" approved="false" user-name="ways to get your ex back" user-email="aracely.delong@yahoo.de" user-ip="192.119.151.32" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I have been exploring for a little for any high quality articles or weblog posts in this kind of house . Exploring in Yahoo I eventually stumbled upon this web site. Reading this information So i am satisfied to express that I have an incredibly just right uncanny feeling I discovered just what I needed. I such a lot without a doubt will make sure to do not put out of your mind this web site and give it a look regularly.

My blog;  ways to get your ex back - http://www.prlog.org/12146072-secrets-of-how-to-get-your-ex-back-re-ignited-relationships-programs-review-is-it-scam-or-real.html ]]></content>
        </comment>
        <comment id="bd9a00bd-19d8-4001-aac3-f874f951416d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T05:51:43" date-modified="2013-06-30T05:51:43" approved="false" user-name="how to get a ex back" user-email="traceemontague@yahoo.de" user-ip="192.119.151.32" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I know this site presents quality depending articles and additional data, is there any other web site which provides these information in quality?

Also visit my site ::  how to get a ex back - http://www.prlog.org/12146072-secrets-of-how-to-get-your-ex-back-re-ignited-relationships-programs-review-is-it-scam-or-real.html ]]></content>
        </comment>
        <comment id="b20af29a-dd6f-4c6c-a668-6c98e9f06c3c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T11:46:05" date-modified="2013-06-30T11:46:05" approved="false" user-name="how to win back your ex" user-email="gordonruss@live.com" user-ip="66.248.202.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[With havin so much written content do you ever run into any issues of plagorism or copyright violation? My website has a lot of completely unique content I&#39;ve either authored myself or outsourced but it appears a lot of it is popping it up all over the web without my agreement. Do you know any methods to help stop content from being ripped off? I&#39;d certainly appreciate it.

my homepage;  how to win back your ex - http://www.youtube.com/watch?v=v_cbPd-pf9I ]]></content>
        </comment>
        <comment id="8679ffdf-d5be-4d28-a65b-6d6c09dc0662" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T03:32:29" date-modified="2013-07-01T03:32:29" approved="false" user-name="how do you get your ex back" user-email="katrice.ritter@gmail.com" user-ip="66.248.193.41" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[magnificent submit, very informative. I wonder why the opposite specialists of this sector don&#39;t realize this. You must continue your writing. I&#39;m confident, you have a great readers&#39; base already!

Here is my webpage ...  how do you get your ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="b45ce8bd-ca5c-4ef6-abb4-a4d39d257f4e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T04:14:01" date-modified="2013-07-01T04:14:01" approved="false" user-name="Eusebia" user-email="eusebiadowning@gmail.com" user-ip="66.248.193.182" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Wow, marvelous weblog layout! How long have you been blogging for? you made blogging look easy. The full glance of your website is great, let alone the content!

Have a look at my web blog - how can you get an ex back -  Eusebia - http://www.prlog.org/12146072-secrets-of-how-to-get-your-ex-back-re-ignited-relationships-programs-review-is-it-scam-or-real.html  -]]></content>
        </comment>
        <comment id="7e537dd7-bdba-4edd-adbd-4c40619fee23" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T05:37:30" date-modified="2013-07-01T05:37:30" approved="false" user-name="ways to get your ex back" user-email="lorettaolson@gmail.com" user-ip="66.248.202.73" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I have been surfing on-line greater than three hours these days, yet I by no means found any interesting article like yours. It is pretty value enough for me. In my opinion, if all website owners and bloggers made just right content material as you probably did, the web might be a lot more useful than ever before.

Here is my website;  ways to get your ex back - http://www.youtube.com/user/ExBackSecretFormula ]]></content>
        </comment>
        <comment id="3ab32079-5253-41e4-ba56-f1c689367cbb" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T04:16:15" date-modified="2013-07-02T04:16:15" approved="false" user-name="how to get your ex back" user-email="danielflournoy@gawab.com" user-ip="66.248.202.106" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I must thank you for the efforts you have put in penning this website. I&#39;m hoping to check out the same high-grade content by you in the future as well. In fact, your creative writing abilities has encouraged me to get my very own site now ;)

Also visit my site:  how to get your ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="f8b5cfd9-c9d4-49d8-84dc-c0abf7451867" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T06:08:42" date-modified="2013-07-02T06:08:42" approved="false" user-name="how to get a ex back" user-email="shoshanabuckley@gmx.de" user-ip="66.248.202.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Wonderful site you have here but I was curious if you knew of any forums that cover the same topics talked about in this article? I&#39;d really love to be a part of group where I can get feedback from other experienced individuals that share the same interest. If you have any recommendations, please let me know. Thanks a lot!

my webpage ::  how to get a ex back - http://www.youtube.com/watch?v=v_cbPd-pf9I ]]></content>
        </comment>
        <comment id="e915e108-ff86-4888-9ba0-b6cbb99d5ad2" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T08:46:39" date-modified="2013-07-02T08:46:39" approved="false" user-name="ways to Get Your ex back" user-email="christel_jennings@gmail.com" user-ip="66.248.202.243" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I absolutely love your site.. Great colors &amp; theme. Did you build this web site yourself? Please reply back as I&#39;m looking to create my own website and would like to learn where you got this from or just what the theme is named. Thank you!

My site ::  ways to Get Your ex back - http://nathanielhartne.tblog.com/post/1970483601 ]]></content>
        </comment>
        <comment id="004d5bc7-5167-48e4-9d7b-035e0722e814" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T09:42:09" date-modified="2013-07-02T09:42:09" approved="false" user-name="how to get your ex back" user-email="evaguthrie@t-online.de" user-ip="66.248.193.182" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hi there, for all time i used to check website posts here in the early hours in the morning, as i enjoy to gain knowledge of more and more.

Look into my homepage;  how to get your ex back - http://www.prlog.org/12146072-secrets-of-how-to-get-your-ex-back-re-ignited-relationships-programs-review-is-it-scam-or-real.html ]]></content>
        </comment>
        <comment id="df02edc5-45cc-4f25-999e-023e4c310a2b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T12:09:14" date-modified="2013-07-02T12:09:14" approved="false" user-name="Marisa" user-email="marisasantiago@gawab.com" user-ip="192.119.151.216" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Hey very nice blog!

Also visit my webpage: how do you get your ex back ( Marisa - http://www.youtube.com/user/ExBackSecretFormula )]]></content>
        </comment>
        <comment id="330201fd-6fa7-47f6-844e-bf87f7dd4e65" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T13:05:28" date-modified="2013-07-02T13:05:28" approved="false" user-name="how to get your ex back" user-email="houston.saldana@web.de" user-ip="66.248.193.182" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[This is my first time pay a quick visit at here and i am in fact pleassant to read all at one place.

Here is my web blog:  how to get your ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="5a44e9f3-87ba-46e5-be3d-8f52678ff803" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T20:08:55" date-modified="2013-07-02T20:08:55" approved="false" user-name="how to get ex back" user-email="marcelamonroe@googlemail.com" user-ip="66.248.193.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Thanks to my father who shared with me concerning this webpage, this weblog is genuinely awesome.

Also visit my website -  how to get ex back - http://www.youtube.com/user/ExBackSecretFormula ]]></content>
        </comment>
        <comment id="274b8d49-e8eb-46a0-ab74-18994289fd39" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T00:10:09" date-modified="2013-07-03T00:10:09" approved="false" user-name="how to win your ex back after a breakup" user-email="dickbearden@googlemail.com" user-ip="192.119.151.32" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[My family all the time say that I am killing my time here at web, however I know I am getting knowledge daily by reading such nice articles or reviews.

Here is my site ::  how to win your ex back after a breakup - http://nathanielhartne.tblog.com/post/1970456600 ]]></content>
        </comment>
        <comment id="54d0bd3f-fa40-4c90-8675-b28163733cc2" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T02:04:59" date-modified="2013-07-03T02:04:59" approved="false" user-name="how can you get your ex back" user-email="sofia.galvin@googlemail.com" user-ip="66.248.193.174" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[obviously like your web-site but you have to take a look at the spelling on several of your posts. A number of them are rife with spelling problems and I in finding it very bothersome to inform the truth however I&#39;ll definitely come again again.

Look at my weblog ::  how can you get your ex back - http://vimeo.com/67929523 ]]></content>
        </comment>
        <comment id="a9e16b1f-e06c-402c-9918-9226a3354c94" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T00:57:22" date-modified="2013-07-05T00:57:22" approved="false" user-name="Rosaria" user-email="rosaria-abrams@arcor.de" user-ip="66.248.202.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I am in fact grateful to the owner of this website who has shared this fantastic piece of writing at at this place.

Feel free to visit my weblog ... how can you get an ex back [ Rosaria - http://www.prlog.org/12146072-secrets-of-how-to-get-your-ex-back-re-ignited-relationships-programs-review-is-it-scam-or-real.html ]]]></content>
        </comment>
        <comment id="2eabda93-85e9-41c3-90f4-ff61999a9332" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T01:22:01" date-modified="2013-07-05T01:22:01" approved="false" user-name="things to say to get my Ex back" user-email="debdoran@zoho.com" user-ip="66.248.202.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Link exchange is nothing else except it is simply placing the other person&#39;s web site link on your page at suitable place and other person will also do same for you.

Visit my weblog ...  things to say to get my Ex back - http://www.youtube.com/user/ExBackSecretFormula ]]></content>
        </comment>
        <comment id="94e440dc-46d0-43d9-9d51-7b44cc5ba791" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T13:27:07" date-modified="2013-07-06T13:27:07" approved="false" user-name="ways to get your ex back" user-email="eloise.kish@gmx.net" user-ip="66.248.202.243" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[I read this paragraph fully regarding the difference of most up-to-date and preceding technologies, it&#39;s awesome article.

Here is my homepage -  ways to get your ex back - http://www.youtube.com/watch?v=tzNVZ9l5QBM ]]></content>
        </comment>
        <comment id="d828585d-3b52-46ae-8bf6-197e424eb590" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T20:43:34" date-modified="2013-07-06T20:43:34" approved="false" user-name="what to say to get your ex back" user-email="sherrill-dinkins@gmail.com" user-ip="66.248.193.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Whoa! This blog looks exactly like my old one! It&#39;s on a entirely different topic but it has pretty much the same layout and design. Outstanding choice of colors!

Here is my web blog;  what to say to get your ex back - http://www.youtube.com/user/ExBackSecretFormula ]]></content>
        </comment>
        <comment id="3dfa19e5-b282-4057-aeb4-7e256b098697" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-07T00:31:39" date-modified="2013-07-07T00:31:39" approved="false" user-name="how to get an ex back" user-email="nicholasmacklin@googlemail.com" user-ip="66.248.202.210" user-url="">
          <title type="text"><![CDATA[re: 10 things you might have missed about MVVM Light]]></title>
          <content type="text"><![CDATA[Please let me know if you&#39;re looking for a article writer for your weblog. You have some really good posts and I feel I would be a good asset. If you ever want to take some of the load off, I&#39;d really like to write some articles for your blog in exchange for a link back to mine. Please shoot me an e-mail if interested. Thanks!

My website ::  how to get an ex back - http://www.youtube.com/v/sKOUWevwRgI ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="3ade573a-494a-4988-8356-f4484df265c5" date-created="2013-04-15T12:09:20" date-modified="2013-04-15T12:09:20" approved="true" url="http://www.silverlightshow.net/news/10-things-you-might-have-missed-about-MVVM-Light.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

10 things you might have missed about MVVM Light]]></title>
        </trackback>
        <trackback id="98bf901e-7ab9-403d-91a8-9d31e0fe8930" date-created="2013-04-16T13:02:46" date-modified="2013-04-16T13:02:46" approved="true" url="http://www.win8resources.com/2013/04/16/10-things-you-might-have-missed-about-mvvm-light/">
          <title type="text"><![CDATA[Pingback from win8resources.com

10 things you might have missed about MVVM Light]]></title>
        </trackback>
        <trackback id="23969d96-bb3e-443f-bd1c-27473f1dd4b5" date-created="2013-05-30T19:22:01" date-modified="2013-05-30T19:22:01" approved="true" url="http://www.hostgatorcouponcodesite.com/sites-we-like-2/">
          <title type="text"><![CDATA[Pingback from hostgatorcouponcodesite.com

Sites We Like | Latest Official Hostgator Coupon Codes | Save more than $599 + 25% OFF + 1 Month FREE.]]></title>
        </trackback>
        <trackback id="8a98e3d2-d588-4f3e-88aa-a30ecc3b03c4" date-created="2014-06-30T15:35:27" date-modified="2014-06-30T15:35:27" approved="true" url="http://www.spikie.be/blog/post/2014/06/30/.aspx">
          <title type="text"><![CDATA[A practical guide to MVVM (Light)

A practical guide to MVVM (Light)]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="f6f76017-3145-4ee2-b147-f4b33cdbab8e" date-created="2013-04-05T09:16:22" date-modified="2013-04-05T09:17:57" approved="true" post-url="/blog/post/2013/04/05/WP8-Leap-Motion-and-a-glue-called-Sockets.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[WP8, Leap Motion and a glue called Sockets]]></title>
      <content type="text"><![CDATA[<iframe height="315" src="http://www.youtube.com/embed/_d6KuiuteIA" frameborder="0" width="560" allowfullscreen="allowfullscreen"></iframe>  <p>I’m one of the lucky few who got their hands on a Leap Motion developer device (check out the video above if you’ve never heard of the Leap Motion). It’s a pretty cool device that gives you motion tracking not unlike Kinect but limited to finger and hand movement instead of complete body tracking.</p>  <p>I had the device and needed something to play with and what’s cooler then combining a cool gadget with an awesome smartphone? So I decided to build a small proof-of-concept that would capture finger movement in a WPF application and translate that movement to a moving ellipse in a Windows Phone application.</p>  <p>The Leap Motion’s documentation got me to a moving ellipse in a WPF application pretty fast thanks to the samples and documentation found on their developer portal. It took me a bit more time to get the position of the ellipse send to the phone, I wanted to use Sockets for this (SignalR would be way easier but I didn’t want an extra service running, now I have peer to peer communication). </p>  <p>Here’s how I did it</p>  <h2>WPF and the Leap Motion</h2>  <p>First, the WPF project. This project will be the socket server and the app that captures the Leap Motion’s output. The application only has one page with this as XAML</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:34414dc8-4ef8-4390-a8c4-f52f55742883" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Window</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;LeapWpPoc.MainWindow&quot;</span></li> <li style="background: #f3f3f3">       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li>       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li style="background: #f3f3f3">       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Title</span><span style="background:#ffffff;color:#0000ff">=&quot;MainWindow&quot;</span></li> <li>       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Width</span><span style="background:#ffffff;color:#0000ff">=&quot;525&quot;</span></li> <li style="background: #f3f3f3">       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;350&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Canvas</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TheCanvas&quot;&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Ellipse</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TheEllipse&quot;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Left</span><span style="background:#ffffff;color:#0000ff">=&quot;211&quot;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Top</span><span style="background:#ffffff;color:#0000ff">=&quot;118&quot;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Width</span><span style="background:#ffffff;color:#0000ff">=&quot;70&quot;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;70&quot;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Fill</span><span style="background:#ffffff;color:#0000ff">=&quot;#FFFF0C00&quot;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Stroke</span><span style="background:#ffffff;color:#0000ff">=&quot;Black&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBlockStatus&quot;</span></li> <li style="background: #f3f3f3">                  <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Left</span><span style="background:#ffffff;color:#0000ff">=&quot;10&quot;</span></li> <li>                  <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Top</span><span style="background:#ffffff;color:#0000ff">=&quot;10&quot;</span></li> <li style="background: #f3f3f3">                  <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;Red&quot;</span></li> <li>                  <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Not connected&quot;</span></li> <li style="background: #f3f3f3">                  <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Canvas</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Window</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Let’s have a look at how to interact with the Leap Motion first.</p>  <p>First thing you need when working with the Leap Motion (apart from the actual device that is) is a reference to <strong>LeapCSharp.NET4.0.dll </strong>however, you’ll also need <strong>Leap.dll</strong> and <strong>LeapCSharp.dll. </strong>Now I find this a bit dirty and I sincerely hope that the Leap Motion team will find a way to fix this but those two libraries aren’t referencable in our project but they need to be present in the application’s directory or it won’t work. What I did is add them as an existing item to the project, set their build action to Content and Copy if newer, at least this way they will always get copied into the build directory of the application.</p>  <p>Next, you’ll needs a class that inherits from Listener (Listener is part of the Leap Motion SDK). Listener is a base class that provides a bunch of virtual methods like OnExit, OnDisconnect, OnConnect and OnFrame. Feel free to override those to add some logging or logic but I’m only using the OnFrame method here. Here’s my Listener class</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f5e7739a-870e-4408-8001-a41ab5e3a6f3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PocListener</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Listener</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EventHandler</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">FrameDetectedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; FrameDetected;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnFrame (</span><span style="background:#ffffff;color:#2b91af">Controller</span><span style="background:#ffffff;color:#000000"> controller)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Get the most recent frame and report some basic information</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> frame = controller.Frame ();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (FrameDetected != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">FrameDetected(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">FrameDetectedEventArgs</span><span style="background:#ffffff;color:#000000">(frame));</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The OnFrame method fires constantly, passing all the movement information, if any, in a frame. If my listener implementation detects a frame the FrameDetected event will fire, passing in the detected frame as an eventarg, FrameDetectedEventArgs is a very basic class that only passes the frame data to whoever is listening to the event.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bfd57217-5126-46d3-8345-747e739e5223" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">FrameDetectedEventArgs</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">EventArgs</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> Frame { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> FrameDetectedEventArgs(</span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> frame)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">Frame = frame;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Notice that the OnFrame method needs a Controller as parameter? Controller is the class from the Leap Motion API that talks to the device. I create a new instance of Controller and my Listener in the MainWindow constructor.</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5e8744d4-42a7-4711-9a87-a7b25b4e4950" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> _previousFrame;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> _currenFrame;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PocListener</span><span style="background:#ffffff;color:#000000"> _listener;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Controller</span><span style="background:#ffffff;color:#000000"> _controller;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketFactory</span><span style="background:#ffffff;color:#000000"> _socketFactory;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainWindow()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_listener = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PocListener</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_controller = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Controller</span><span style="background:#ffffff;color:#000000">();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Have the sample listener receive events from the controller</span></li> <li>    <span style="background:#ffffff;color:#000000">_controller.AddListener(_listener);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_listener.FrameDetected += ListenerOnFrameDetected;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>This is the constructor and some private fields, I need to keep track of both the current frame and the previous one to detect if there’s any change in the position of the hand or fingers. I also have an instance of PocListener (my own Listener class) and of Controller, both get instantiated in the constructor.Next I need to register my Listener in the Controller, that’s done on line 14 and then finally I attach an event handler to the FrameDetected event.</p>  <p>The event handler of the FrameDetected event will be responsible of checking if hands and fingers are detected.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:def5086a-32f7-456c-81e8-59fc338ce6d1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ListenerOnFrameDetected(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">FrameDetectedEventArgs</span><span style="background:#ffffff;color:#000000"> frameDetectedEventArgs)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_currenFrame = frameDetectedEventArgs.Frame;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!_currenFrame.Hands.Empty)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Get the first hand</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Hand</span><span style="background:#ffffff;color:#000000"> hand = _currenFrame.Hands[0];</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Check if the hand has any fingers</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">FingerList</span><span style="background:#ffffff;color:#000000"> fingers = hand.Fingers;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!fingers.Empty)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_previousFrame == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) _previousFrame = _currenFrame;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//check if the current frame is different from the last frame</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_currenFrame != _previousFrame)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//we only need one finger so we&#39;ll take the first one that&#39;s detected</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Finger</span><span style="background:#ffffff;color:#000000"> finger = fingers[0];</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> x = _previousFrame.Fingers[0].TipPosition.x - finger.TipPosition.x;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> y = _previousFrame.Fingers[0].TipPosition.y - finger.TipPosition.y;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//update the sphere&#39;s position</span></li> <li>                <span style="background:#ffffff;color:#000000">Dispatcher.BeginInvoke((</span><span style="background:#ffffff;color:#2b91af">Action</span><span style="background:#ffffff;color:#000000">)(() =&gt;</span></li> <li style="background: #f3f3f3">                                                <span style="background:#ffffff;color:#000000">{</span></li> <li>                                                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.SetTop(TheEllipse, </span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.GetTop(TheEllipse) + y);</span></li> <li style="background: #f3f3f3">                                                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.SetLeft(TheEllipse, </span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.GetLeft(TheEllipse) - x);</span></li> <li>                                                <span style="background:#ffffff;color:#000000">}));</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//set this frame as the previous one and get ready to receive a new frame</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">_previousFrame = _currenFrame;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First we check if the previous frame has the same information as the current frame, if it does there’s no need to update the ellipse’s position. </p>  <p>If a hand and fingers are detected I select the first detected finger, because that’s currently the only one I’m interested in. Since all the Leap Motion actions are happening on a separate thread I need to invoke the UI thread to update the ellipse’s position, that’s what’s happening on line 25. The position of a UIElement in a Canvas in XAML is set through attached properties (Canvas.Left=”177” for example) to set these in code we use Canvas.SetLeft. To determine the new location of the ellipse I take the X and Y positions of the first finger in the previous frame and substract the X and Y of the first finger in the current frame. The new Y value gets added to the Canvas.Top of the ellipse and the new X value gets subtracted&#160; from the Canvas.Left value. Last but not least I set the previousframe to the currentframe. </p>  <p>That’s all the code you need to get an ellipse moving in a canvas with the Leap Motion. So part 1 is a great success. Now onto the bigger challenge, getting a similar ellipse to move in a Windows Phone project.</p>  <h2>Windows Phone and sockets</h2>  <p>Implementing sockets to make devices talk to each other over the wire can be challenging but it’s also very rewarding and just plain fun once it works. I haven’t worked with sockets before so I had a real blast trying to figure this out and I went through the roof once that ellipse started moving on the Windows Phone emulator <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_17.png" />. Before we dive into the sockets, let’s have a quick look at the MainPage.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:645eb56c-d2e7-4c9b-b10f-29a96d70c5d1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Canvas</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TheCanvas&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Ellipse</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TheEllipse&quot;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Left</span><span style="background:#ffffff;color:#0000ff">=&quot;302&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Top</span><span style="background:#ffffff;color:#0000ff">=&quot;186&quot;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Width</span><span style="background:#ffffff;color:#0000ff">=&quot;70&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;70&quot;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Fill</span><span style="background:#ffffff;color:#0000ff">=&quot;#FFFF0C00&quot;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Stroke</span><span style="background:#ffffff;color:#0000ff">=&quot;Black&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBlockStatus&quot;</span></li> <li style="background: #f3f3f3">              <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Left</span><span style="background:#ffffff;color:#0000ff">=&quot;10&quot;</span></li> <li>              <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Canvas.Top</span><span style="background:#ffffff;color:#0000ff">=&quot;10&quot;</span></li> <li style="background: #f3f3f3">              <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;Red&quot;</span></li> <li>              <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Not connected&quot;</span></li> <li style="background: #f3f3f3">              <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Canvas</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>Exactly the same controls as in the WPF project, nothing spectacular here. Let’s have a look at the code behind the MainPage.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7f18e40f-abd8-47f8-a041-20f69765b64b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">partial</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MainPage</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketClient</span><span style="background:#ffffff;color:#000000"> _client;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> Port = 8000;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> IpAddress = </span><span style="background:#ffffff;color:#a31515">&quot;10.16.79.70&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Constructor</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainPage()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li>        <span style="background:#ffffff;color:#000000">_client = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketClient</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_client.OnConnected += (sender, args) =&gt; Dispatcher.BeginInvoke(() =&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">TextBlockStatus.Text = </span><span style="background:#ffffff;color:#a31515">&quot;Connected&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">TextBlockStatus.Foreground = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SolidColorBrush</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">Colors</span><span style="background:#ffffff;color:#000000">.Green);</span></li> <li>            <span style="background:#ffffff;color:#000000">});</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_client.OnMessageReceived += (sender, args) =&gt; Dispatcher.BeginInvoke(() =&gt; MoveBall(args.Response));</span></li> <li>        <span style="background:#ffffff;color:#000000">_client.Connect(IpAddress, Port);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_client.Receive();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> MoveBall(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> response)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">response = response.Replace(</span><span style="background:#ffffff;color:#a31515">&#39;,&#39;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#a31515">&#39;.&#39;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> coordinates = response.Split(</span><span style="background:#ffffff;color:#a31515">&#39;;&#39;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> y = </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">.Parse(coordinates[0]);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> x = </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">.Parse(coordinates[1]);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.SetTop(TheEllipse, y);</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.SetLeft(TheEllipse, x);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First some fields, don’t worry about the SocketClient class, we’ll get to that in a minute. Some constants holding the IP address and the port of the server (don’t forget to change this IP address to the address of your own pc!)</p>  <p>In the constructor we instantiate the SocketClient instance and handle its two events. The OnConnected event is going to change the text of the TextBlock to “Connected” and the OnMessageReceived event handler will move the ellipse.</p>  <p>The MoveBall() method will do the actual moving. The message that we will receive will be a string that has the Y and X of the ellipse in the WPF application seperated by a semicolon. The problem I had here was that instead of a dot to separate the decimals .NET had changed it into a comma (which is the default decimal sign in Belgium) so I need to change that back. I then split up the string using the semicolon as split character, parse the values into a float and set the ellipse to its new position. Let’s get serious and dive into the socket stuff now.</p>  <p>Sockets provide us with TCP and UDP communication, next to a whole bunch of other features. This app will use a TCP connection between WPF and a Windows Phone application. Since we’re currently looking at the Windows Phone app, let’s continue there. I’ve added a class called SocketClient that takes care of connection a socket, sending and receiving messages. Let’s start with the fields and constructor.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f1e7c86f-d048-4c8a-986a-e95eca5d4ca8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">// Cached Socket object that will be used by each call for the lifetime of this class</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> _socket;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#008000">// Signaling object used to notify when an asynchronous operation is completed</span></li> <li><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ManualResetEvent</span><span style="background:#ffffff;color:#000000"> _clientDone;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">// Define a timeout in milliseconds for each asynchronous call. If a response is not received within this</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#008000">// timeout period, the call is aborted.</span></li> <li><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> TimeoutMilliseconds = 5000;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">// The maximum size of the data buffer to use with the asynchronous socket methods</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> MaxBufferSize = 2048;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EventHandler</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">MessageReceivedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; OnMessageReceived;</span></li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EventHandler</span><span style="background:#ffffff;color:#000000"> OnConnected;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> SocketClient()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_clientDone = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ManualResetEvent</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>First field is the actual socket that we’ll be using, second one is a reset event that we can use to make a thread block while waiting for an event to fire. The timeout is the max amount of time that the reset event will block a thread. The buffersize is the size of the buffer for socket messages. The two events are fired when the app receives a socket message or when a socket connects.</p>  <p>The most important function of the SocketClient class that I’m building here is to connect two sockets.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d8c5d9d0-e518-4ae4-b916-7dec1271e496" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Connect(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> hostName, </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> portNumber)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> result = </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Empty;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create DnsEndPoint. The hostName and port are passed in to this method.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DnsEndPoint</span><span style="background:#ffffff;color:#000000"> hostEntry = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DnsEndPoint</span><span style="background:#ffffff;color:#000000">(hostName, portNumber);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create a stream-based, TCP socket using the InterNetwork Address Family. </span></li> <li>    <span style="background:#ffffff;color:#000000">_socket = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">AddressFamily</span><span style="background:#ffffff;color:#000000">.InterNetwork, </span><span style="background:#ffffff;color:#2b91af">SocketType</span><span style="background:#ffffff;color:#000000">.Stream, </span><span style="background:#ffffff;color:#2b91af">ProtocolType</span><span style="background:#ffffff;color:#000000">.Tcp);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create a SocketAsyncEventArgs object to be used in the connection request</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SocketAsyncEventArgs</span><span style="background:#ffffff;color:#000000"> socketEventArg = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketAsyncEventArgs</span><span style="background:#ffffff;color:#000000"> {RemoteEndPoint = hostEntry};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">socketEventArg.Completed += (sender, args) =&gt;</span></li> <li>                                        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                                            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Retrieve the result of this request</span></li> <li>                                            <span style="background:#ffffff;color:#000000">result = args.SocketError.ToString();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                                            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Signal that the request is complete, unblocking the UI thread</span></li> <li style="background: #f3f3f3">                                            <span style="background:#ffffff;color:#000000">_clientDone.Set();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                                            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (OnConnected == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                                            <span style="background:#ffffff;color:#000000">OnConnected(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EventArgs</span><span style="background:#ffffff;color:#000000">());</span></li> <li>                                        <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Sets the state of the event to nonsignaled, causing threads to block</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_clientDone.Reset();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Make an asynchronous Connect request over the socket</span></li> <li>    <span style="background:#ffffff;color:#000000">_socket.ConnectAsync(socketEventArg);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Block the UI thread for a maximum of TIMEOUT_MILLISECONDS milliseconds.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// If no response comes back within this time then proceed</span></li> <li>    <span style="background:#ffffff;color:#000000">_clientDone.WaitOne(TimeoutMilliseconds);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> result;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>The connect method takes in two parameters, the hostname (or IP address) and the portnumber of the socket we want to connect to. Based on these two parameters we create a DnsEndPoint that will be passed to the server socket as being the remote endpoint so that the server socket knows where to send his messages. Next we instantiate the Socket, stating that it’s using an internal IPv4 network, a stream socket and the TCP protocol. Now that we have a socket and an endpoint we’ll need some eventargs, those args will be passed onto the server. Once the connection succeeds (or fails) the Completed event on the SocketAsyncEventArgs will fire, in that event handler we’ll trigger the OnConnected event. With that in place we call the Reset() method on the ManualResetEvent to set the event to nonsignaled, call the ConnectAsync() method on the Socket and pass in the eventargs and finally blocking the thread for a certain time to allow the socket time to connect.</p>  <p>So now that our client can connect to a socket, let’s build something to send messages to the connected socket. From the Windows Phone 8 version it looks like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7c0f093d-a764-46b0-b077-2d2905c59935" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Send(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> data)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">data = data + </span><span style="background:#ffffff;color:#a31515">&quot;&lt;EOF&gt;&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_socket != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SocketAsyncEventArgs</span><span style="background:#ffffff;color:#000000"> socketEventArg = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketAsyncEventArgs</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">RemoteEndPoint = _socket.RemoteEndPoint,</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">UserToken = </span><span style="background:#ffffff;color:#0000ff">null</span></li> <li>            <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">socketEventArg.Completed += (sender, args) =&gt;</span></li> <li style="background: #f3f3f3">                                        <span style="background:#ffffff;color:#000000">{</span></li> <li>                                            <span style="background:#ffffff;color:#000000">_clientDone.Set();</span></li> <li style="background: #f3f3f3">                                        <span style="background:#ffffff;color:#000000">};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Add the data to be sent into the buffer</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] payload = </span><span style="background:#ffffff;color:#2b91af">Encoding</span><span style="background:#ffffff;color:#000000">.UTF8.GetBytes(data);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">socketEventArg.SetBuffer(payload, 0, payload.Length);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Sets the state of the event to nonsignaled, causing threads to block</span></li> <li>        <span style="background:#ffffff;color:#000000">_clientDone.Reset();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Make an asynchronous Send request over the socket</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socket.SendAsync(socketEventArg);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Block the UI thread for a maximum of TIMEOUT_MILLISECONDS milliseconds.</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// If no response comes back within this time then proceed</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_clientDone.WaitOne(TimeoutMilliseconds);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We get in the message as a parameter, at the end of the message I add “&lt;EOF&gt;” just to make sure that I only get the part that I need at the server side and that the message has been delivered in full. If at this point the socket is null then it isn’t connected yet. If it isn’t we once again instantiate SocketAsyncEventArgs. The data gets serialized into a byte array and set as a buffer in the eventargs. Set the ManualResetEvent to nonsignaled, start sending the message over the socket async and block the thread. </p>  <p>And last but not least there’s the code to receive messages on the socket.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:302ec5d1-addf-45c3-8658-572cb127a313" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Receive()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_socket != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SocketAsyncEventArgs</span><span style="background:#ffffff;color:#000000"> socketEventArg = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketAsyncEventArgs</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">RemoteEndPoint = _socket.RemoteEndPoint</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Setup the buffer to receive the data</span></li> <li>        <span style="background:#ffffff;color:#000000">socketEventArg.SetBuffer(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> Byte[MaxBufferSize], 0, MaxBufferSize);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">socketEventArg.Completed += (sender, args) =&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (args.SocketError == </span><span style="background:#ffffff;color:#2b91af">SocketError</span><span style="background:#ffffff;color:#000000">.Success)</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Retrieve the data from the buffer</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> response = </span><span style="background:#ffffff;color:#2b91af">Encoding</span><span style="background:#ffffff;color:#000000">.UTF8.GetString(args.Buffer, args.Offset, args.BytesTransferred);</span></li> <li>                    <span style="background:#ffffff;color:#000000">response = response.Trim(</span><span style="background:#ffffff;color:#a31515">&#39;&#92;0&#39;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (response.Contains(</span><span style="background:#ffffff;color:#a31515">&quot;&lt;EOF&gt;&quot;</span><span style="background:#ffffff;color:#000000">))</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">{</span></li> <li>                        <span style="background:#ffffff;color:#000000">response = response.Substring(0, response.IndexOf(</span><span style="background:#ffffff;color:#a31515">&quot;&lt;EOF&gt;&quot;</span><span style="background:#ffffff;color:#000000">));</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (OnMessageReceived != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>                            <span style="background:#ffffff;color:#000000">OnMessageReceived(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MessageReceivedEventArgs</span><span style="background:#ffffff;color:#000000">(response));</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">Receive();</span></li> <li>                <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>                <span style="background:#ffffff;color:#000000">_clientDone.Set();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Sets the state of the event to nonsignaled, causing threads to block</span></li> <li>        <span style="background:#ffffff;color:#000000">_clientDone.Reset();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Make an asynchronous Receive request over the socket</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socket.ReceiveAsync(socketEventArg);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Block the UI thread for a maximum of TIMEOUT_MILLISECONDS milliseconds.</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// If no response comes back within this time then proceed</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_clientDone.WaitOne(TimeoutMilliseconds);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>So the same story with the null check on the socket and creating of the SocketEventArgs. Once the Completed event fires we’ll check if the receive was successful&#160; and if the received message contains “&lt;EOF&gt;”, if it does we take everything before &lt;EOF&gt; and pass it in the MessageReceivedEventArgs that go with the MessageReceived event.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9d9b4c7e-6308-4346-977d-35da9a1c05ef" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MessageReceivedEventArgs</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">EventArgs</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Response { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MessageReceivedEventArgs(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> response)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">Response = response;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Once everthing is handled we call the Receive method again so it’s ready to start receiving the next message.</p>  <p>And that’s basically all the logic for a socket connection on the Windows Phone side of things. The only thing left to do in the app is change the MainPage’s constructor to initialize the SocketClient and add some fields.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1977ef61-9338-4503-80af-150a7716d6fd" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketClient</span><span style="background:#ffffff;color:#000000"> _client;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> Port = 8000;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> IpAddress = </span><span style="background:#ffffff;color:#a31515">&quot;10.16.79.70&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">// Constructor</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainPage()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li>    <span style="background:#ffffff;color:#000000">_client = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketClient</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_client.OnConnected += (sender, args) =&gt; Dispatcher.BeginInvoke(() =&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">TextBlockStatus.Text = </span><span style="background:#ffffff;color:#a31515">&quot;Connected&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">TextBlockStatus.Foreground = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SolidColorBrush</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">Colors</span><span style="background:#ffffff;color:#000000">.Green);</span></li> <li>        <span style="background:#ffffff;color:#000000">});</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_client.OnMessageReceived += (sender, args) =&gt; Dispatcher.BeginInvoke(() =&gt; MoveBall(args.Response));</span></li> <li>    <span style="background:#ffffff;color:#000000">_client.Connect(IpAddress, Port);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_client.Receive();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The constructor instantiates the SocketClient, attaches an handler to the OnConnected event to update the textbox with the connection status and handle the OnMessageReceived event to update the position of the ellipse. Don’t forget to update the IP address to the one from your own pc!</p>  <h2>Back to WPF!</h2>  <p>Now that our Windows Phone app is ready, it’s time to implement the socket server. As mentioned before, the WPF app that gets input from the Leap Motion will serve as socket server.</p>  <p>I’ve added a class to the WPF project called SocketFactory, it serves the same function as the SocketClient class in the Windows Phone project but from a server point of view. The way to build and use a socket in full blown .net 4.5 differs a bit from how we did it in Windows Phone. First we’ll need a state class, this contains a socket, the buffersize, a byte array to function as the buffer and a stringbuilder to recompose the message.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:07b9d0f9-cb05-4447-b980-722385a52c46" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">// State object for reading client data asynchronously</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StateObject</span></li> <li><span style="background:#ffffff;color:#2b91af">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Client  socket.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> WorkSocket = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Size of receive buffer.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> BufferSize = 1024;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Receive buffer.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] Buffer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[BufferSize];</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Received data string.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StringBuilder</span><span style="background:#ffffff;color:#000000"> Sb = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StringBuilder</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Next, we’ll need some fields in the SocketFactory class</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a6e23560-c58b-4063-b73a-732eab4e0f75" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">// Thread signal.</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ManualResetEvent</span><span style="background:#ffffff;color:#000000"> AllDone = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ManualResetEvent</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">);</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StateObject</span><span style="background:#ffffff;color:#000000"> _state;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EventHandler</span><span style="background:#ffffff;color:#000000"> OnConnected;</span></li> </ol> </div> </div> </div>  <p>And here’s the function to receive a connection request</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c2146494-233d-4962-8fda-5f55d44de61e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Start()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">IPHostEntry</span><span style="background:#ffffff;color:#000000"> ipHostInfo = </span><span style="background:#ffffff;color:#2b91af">Dns</span><span style="background:#ffffff;color:#000000">.GetHostEntry(</span><span style="background:#ffffff;color:#2b91af">Dns</span><span style="background:#ffffff;color:#000000">.GetHostName());</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">IPAddress</span><span style="background:#ffffff;color:#000000"> ipAddress = ipHostInfo.AddressList[3];</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">IPEndPoint</span><span style="background:#ffffff;color:#000000"> localEndPoint = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IPEndPoint</span><span style="background:#ffffff;color:#000000">(ipAddress, 8000);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> listener = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">AddressFamily</span><span style="background:#ffffff;color:#000000">.InterNetwork, </span><span style="background:#ffffff;color:#2b91af">SocketType</span><span style="background:#ffffff;color:#000000">.Stream, </span><span style="background:#ffffff;color:#2b91af">ProtocolType</span><span style="background:#ffffff;color:#000000">.Tcp);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Bind the socket to the local endpoint and listen for incoming connections.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">listener.Bind(localEndPoint);</span></li> <li>        <span style="background:#ffffff;color:#000000">listener.Listen(100);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">while</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Set the event to nonsignaled state.</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">AllDone.Reset();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Start an asynchronous socket to listen for connections.</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Console</span><span style="background:#ffffff;color:#000000">.WriteLine(</span><span style="background:#ffffff;color:#a31515">&quot;Waiting for a connection...&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">listener.BeginAccept(AcceptCallback, listener);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Wait until a connection is made before continuing.</span></li> <li>            <span style="background:#ffffff;color:#000000">AllDone.WaitOne();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (OnConnected == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">OnConnected(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EventArgs</span><span style="background:#ffffff;color:#000000">());</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Console</span><span style="background:#ffffff;color:#000000">.WriteLine(e.ToString());</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We declare a socket called listener, pass it the same parameters as we did for Windows Phone, stating that it’s local network, streaming and using the TCP protocol. We need to bind this socket to an IPEndPoint, to create an IPEndPoint we need an IPAddress and a port. Lines 3 and 4 are used to getting the computer’s IP address from its hostname. Once we have that we can bind the socket to the endpoint. Make sure that the port you set here is the same port you try to connect to in the Windows Phone app. Once the socket connects the callback fires, in the callback we start receiving data from the connected client.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a6af5766-433b-4616-b760-caf7050d1f7e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> AcceptCallback(</span><span style="background:#ffffff;color:#2b91af">IAsyncResult</span><span style="background:#ffffff;color:#000000"> ar)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Signal the main thread to continue.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">AllDone.Set();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Get the socket that handles the client request.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> listener = (</span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000">)ar.AsyncState;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> handler = listener.EndAccept(ar);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create the state object.</span></li> <li>    <span style="background:#ffffff;color:#000000">_state = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StateObject</span><span style="background:#ffffff;color:#000000"> { WorkSocket = handler };</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">handler.BeginReceive(_state.Buffer, 0, </span><span style="background:#ffffff;color:#2b91af">StateObject</span><span style="background:#ffffff;color:#000000">.BufferSize, 0, ReadCallback, _state);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Once data is received, the ReadCallback fires</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9dcf345e-c6d6-4114-afea-d64e9e56575c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ReadCallback(</span><span style="background:#ffffff;color:#2b91af">IAsyncResult</span><span style="background:#ffffff;color:#000000"> ar)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">StateObject</span><span style="background:#ffffff;color:#000000"> state = (</span><span style="background:#ffffff;color:#2b91af">StateObject</span><span style="background:#ffffff;color:#000000">)ar.AsyncState;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> handler = state.WorkSocket;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> bytesRead = handler.EndReceive(ar);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (bytesRead &gt; 0)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// There  might be more data, so store the data received so far.</span></li> <li>        <span style="background:#ffffff;color:#000000">state.Sb.Append(</span><span style="background:#ffffff;color:#2b91af">Encoding</span><span style="background:#ffffff;color:#000000">.ASCII.GetString(</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">state.Buffer, 0, bytesRead));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Check for end-of-file tag. If it is not there, read </span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// more data.</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> content = state.Sb.ToString();</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (content.IndexOf(</span><span style="background:#ffffff;color:#a31515">&quot;&lt;EOF&gt;&quot;</span><span style="background:#ffffff;color:#000000">) &gt; -1)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Console</span><span style="background:#ffffff;color:#000000">.WriteLine(</span><span style="background:#ffffff;color:#a31515">&quot;Read {</span><span style="background:#ffffff;color:#3cb371">0}</span><span style="background:#ffffff;color:#a31515"> bytes from socket. &#92;n Data : {</span><span style="background:#ffffff;color:#3cb371">1}</span><span style="background:#ffffff;color:#a31515">&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">content.Length, content);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Not all data received. Get more.</span></li> <li>            <span style="background:#ffffff;color:#000000">handler.BeginReceive(state.Buffer, 0, </span><span style="background:#ffffff;color:#2b91af">StateObject</span><span style="background:#ffffff;color:#000000">.BufferSize, 0, ReadCallback, state);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We can get the stateobject and socket from the IAsyncResult and we start reading until we encounter “&lt;EOF&gt;”, once everything is received we write it out in the output window. Now in this example the server won’t actually be receiving any messages, I’ve just put in this method in case you want to enhance it or have some use for the code.</p>  <p>What is important in this sample is the Send method, this will send a message over the connected socket to the client.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a7a95953-a45d-445e-8930-4cec5574cf54" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Send(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> data)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">Send(_state.WorkSocket, data);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Send(</span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> handler, </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> data)</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">data = data + </span><span style="background:#ffffff;color:#a31515">&quot;&lt;EOF&gt;&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Convert the string data to byte data using ASCII encoding.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] byteData = </span><span style="background:#ffffff;color:#2b91af">Encoding</span><span style="background:#ffffff;color:#000000">.ASCII.GetBytes(data);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Begin sending the data to the remote device.</span></li> <li>    <span style="background:#ffffff;color:#000000">handler.BeginSend(byteData, 0, byteData.Length, 0, SendCallback, handler);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>I’ve split up the Send into two methods, the public one just receives the message we want to send and passes it trough to the private one, also passing in the socket to use. This way the application itself doesn’t need to worry about selecting a socket, let the socketFactory deal with that. The Send method adds the end of file part to the message, serializes it into a byte array and sends it over the socket. Once the send is complete, the callback will fire.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c70bc3d2-3508-411f-95a7-73f21ec1a2d5" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SendCallback(</span><span style="background:#ffffff;color:#2b91af">IAsyncResult</span><span style="background:#ffffff;color:#000000"> ar)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Retrieve the socket from the state object.</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000"> handler = (</span><span style="background:#ffffff;color:#2b91af">Socket</span><span style="background:#ffffff;color:#000000">)ar.AsyncState;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">handler.EndSend(ar);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Console</span><span style="background:#ffffff;color:#000000">.WriteLine(e.ToString());</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>I’m not really doing anything in the callback, but this would be the perfect place to check for successful delivery and maybe notifying the UI thread to show a confirmation or something similar.</p>  <p>Now that our socket infrastructure is in place and we have a client updating a UI based on the received messages, it’s time to finish this sample by letting the server send the coordinates of the ellipse. In the MainWindow add a field for the socket factory. (line 5 is the extra field)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fa0824a6-58fc-4c46-a3fb-d32cb35bf128" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> _previousFrame;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Frame</span><span style="background:#ffffff;color:#000000"> _currenFrame;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PocListener</span><span style="background:#ffffff;color:#000000"> _listener;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Controller</span><span style="background:#ffffff;color:#000000"> _controller;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketFactory</span><span style="background:#ffffff;color:#000000"> _socketFactory;</span></li> </ol> </div> </div> </div>  <p>With the new field in place, replace (or update) the constructor to this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:658508c0-4a73-4dc2-8c87-a135f80ab4be" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainWindow()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_socketFactory = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SocketFactory</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_socketFactory.OnConnected += (sender, args) =&gt; Dispatcher.BeginInvoke((</span><span style="background:#ffffff;color:#2b91af">Action</span><span style="background:#ffffff;color:#000000">) (() =&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">TextBlockStatus.Text = </span><span style="background:#ffffff;color:#a31515">&quot;Connected&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">TextBlockStatus.Foreground = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SolidColorBrush</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">Colors</span><span style="background:#ffffff;color:#000000">.Green);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">.Run(() =&gt; _socketFactory.Start());</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_listener = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PocListener</span><span style="background:#ffffff;color:#000000">();</span></li> <li>    <span style="background:#ffffff;color:#000000">_controller = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Controller</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Have the sample listener receive events from the controller</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_controller.AddListener(_listener);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_listener.FrameDetected += ListenerOnFrameDetected;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Timer</span><span style="background:#ffffff;color:#000000"> timer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Timer</span><span style="background:#ffffff;color:#000000">(200);</span></li> <li>    <span style="background:#ffffff;color:#000000">timer.Elapsed += (sender, args) =&gt; Dispatcher.BeginInvoke((</span><span style="background:#ffffff;color:#2b91af">Action</span><span style="background:#ffffff;color:#000000">)(() =&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socketFactory.Send(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Format(</span><span style="background:#ffffff;color:#a31515">&quot;{</span><span style="background:#ffffff;color:#3cb371">0}</span><span style="background:#ffffff;color:#a31515">;{</span><span style="background:#ffffff;color:#3cb371">1}</span><span style="background:#ffffff;color:#a31515">&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.GetTop(TheEllipse), </span><span style="background:#ffffff;color:#2b91af">Canvas</span><span style="background:#ffffff;color:#000000">.GetLeft(TheEllipse)))));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">timer.Start();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>We instantiate the SocketFactory, attach an handler for the OnConnected event to update the UI. The SocketFactory’s Start method is queued on the thread pool to run async, this way the UI thread will remain responsive. The Leap Motion get’s initialized and we start a timer. This timer will make sure that every 200 milliseconds the coordinates of the ellipse are send over the socket to the client. The sending of the message needs to be done on the UI thread because we need the ellipse’s coordinates, and that ellipse lives on the UI thread.</p>  <p>Now, why use a timer? In the first version of this sample a message was send every time the ellipse moved, this resulted in really really really poor performance, messages were being send faster than they arrived causing all kinds of weird behavior. Sending it every 200 milliseconds makes it move quite well.</p>  <p>Everything is in place now, so run it and move the ellipse around with the Leap Motion!</p>  <h2>Conclusion</h2>  <p>In this post I’ve explained my adventure of connecting the Leap Motion to a Windows Phone application by using sockets. While not the easiest thing to set up or use, sockets are a really powerful way of communicating between applications no matter what platform they’re on (as long as that platform supports sockets).</p>  <p>The Leap Motion is a great device. It’s small, light, has a very small footprint on your system and is just plain fun to mess around with. I could’ve used anything for a socket example but making something move on screen, on two devices at the same time by just moving your hand has something magically. The Leap Motion is definitely on my list of awesome gadgets.</p>  <p>The code for this post can be found on my <a href="http://sdrv.ms/17grEfS" target="_blank">Skydrive</a></p>]]></content>
      <post-name type="text"><![CDATA[WP8, Leap Motion and a glue called Sockets]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="d2074c7b-2f4d-40b0-a4d4-f0f825db2c3d" />
        <category ref="e42bd5bb-a440-4306-9671-1010ade4e827" />
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
      </categories>
      <comments>
        <comment id="367b8420-c38b-4531-b57d-af297f0c9058" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T16:57:21" date-modified="2013-06-24T16:57:21" approved="false" user-name="Liza Curinto" user-email="liza98cutrintu@gmail.com" user-ip="121.54.96.8" user-url="">
          <title type="text"><![CDATA[re: WP8, Leap Motion and a glue called Sockets]]></title>
          <content type="text"><![CDATA[I&#39;m very glad I found your blog. Thanks for the sensible critique. I and my friends were just preparing to do a little analysis about this. I&#39;m very glad to see such good information being shared freely out there.

forex vps
http://forexvps24.com/]]></content>
        </comment>
        <comment id="1fb26ebd-c42d-4fb9-bb8d-19a556d7ed04" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T05:49:16" date-modified="2013-07-01T05:49:16" approved="false" user-name="how to get ex back" user-email="nadine.hunt@web.de" user-ip="192.119.151.216" user-url="">
          <title type="text"><![CDATA[re: WP8, Leap Motion and a glue called Sockets]]></title>
          <content type="text"><![CDATA[Excellent way of describing, and fastidious post to get data on the topic of my presentation topic, which i am going to convey in academy.

Stop by my web blog ::  how to get ex back - http://www.youtube.com/v/sKOUWevwRgI ]]></content>
        </comment>
        <comment id="1ae95098-3564-4b82-9aef-3fad3ed1ae36" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T19:24:28" date-modified="2013-07-06T19:24:28" approved="false" user-name="get my ex back" user-email="sofia-hurst@gmail.com" user-ip="192.119.151.216" user-url="">
          <title type="text"><![CDATA[re: WP8, Leap Motion and a glue called Sockets]]></title>
          <content type="text"><![CDATA[Excellent post. I was checking continuously this blog and I&#39;m impressed! Extremely helpful information specifically the last part :) I care for such info a lot. I was looking for this particular info for a long time. Thank you and good luck.

My site:  get my ex back - http://jillhogue.doggyblogg.se/ ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="3d344338-246f-44e1-8767-17abf66b15bf" date-created="2013-04-05T13:16:34" date-modified="2013-04-05T13:16:34" approved="true" url="http://www.silverlightshow.net/news/Windows-Phone-8-Leap-Motion-and-a-glue-called-Sockets.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

Windows Phone 8, Leap Motion and a glue called Sockets]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="7612695a-fd78-472b-8aa0-aec9e8fe8bd0" date-created="2013-03-28T20:41:25" date-modified="2013-03-28T20:42:04" approved="true" post-url="/blog/post/2013/03/28/Sessions-at-NxtGenUG.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Sessions at NxtGenUG]]></title>
      <content type="text"><![CDATA[<p>Last week I had the pleasure of travelling to the wonderful country of the United Kingdom (home of The Doctor!) to do some talks about Windows Azure Mobile Services and Windows Phone 8. I did a talk at the user group in Coventry and in Manchester. The response was great, a lot of people were impressed about the possibilities and the ease of use of WAMS. For those of you who’re interested, here’s my slide deck and the demo I build (live coding, didn’t fail, hooray for me <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_16.png" />).</p>  <p><a href="http://sdrv.ms/14rm0rr" target="_blank">Download the demo</a></p> <iframe style="margin-bottom: 5px; border-top: #ccc 1px solid; border-right: #ccc 1px solid; border-bottom: #ccc 0px solid; border-left: #ccc 1px solid" height="356" marginheight="0" src="http://www.slideshare.net/slideshow/embed_code/17820902" frameborder="0" width="427" marginwidth="0" scrolling="no" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen" allowfullscreen="allowfullscreen"> </iframe>  <div style="margin-bottom: 5px"><strong><a title="Eatings clouds from your couch" href="http://www.slideshare.net/nicovermeir/eatings-clouds-from-your-couch" target="_blank">Eatings clouds from your couch</a> </strong>from <strong><a href="http://www.slideshare.net/nicovermeir" target="_blank">Nico Vermeir</a></strong> </div>]]></content>
      <post-name type="text"><![CDATA[Sessions at NxtGenUG]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="dcadc47c-d872-4eff-b325-87e1a4b16ec6" />
      </categories>
    </post>
    <post id="e9337911-4f03-443a-8cbf-00afe202c84c" date-created="2013-03-13T13:00:00" date-modified="2013-03-13T13:32:35" approved="true" post-url="/blog/post/2013/03/13/Using-MyGet-for-those-common-classes.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Using MyGet for those common classes]]></title>
      <content type="text"><![CDATA[<p>Every .net developer, be it a mobile, web or windows developer, uses (or should use) NuGet. A big, and fast growing, gallery of useful (<a href="http://nuget.org/packages/DoTheMario/" target="_blank">and less useful but fun</a>) libraries. The problem I was having with NuGet is that for every project I needed to go search in that big gallery for the packages I wanted. Luckily someone had the same problem and decided to do something about it. And so MyGet was born.</p>
<p><a href="http://www.myget.org/" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto;" src="http://i50.tinypic.com/rjkxeu.jpg" alt="" /></a></p>
<p>The MyGet team sells MyGet as Nuget-as-a-service. You can create your own feed, drop in the NuGet packages you tend to use (even mirror them) and add the feed into your package manager. This way you get your own personal gallery, no more searching for the ones you need, those feeds are public by the way, everyone can use them. If you want a private feed you&rsquo;ll need to look at the MyGet price plans.</p>
<p>Getting started with MyGet is really easy, just go to <a href="http://www.myget.org">http://www.myget.org</a> log in with your Microsoft, Google, Yahoo, Facebook, OpenID, GitHub or StackOverflow account. After you login you can add feeds to your account.</p>
<p><a href="http://i45.tinypic.com/2n66oep.jpg" target="_blank"><img src="http://i45.tinypic.com/2n66oep.jpg" alt="" width="527" height="87" /></a></p>
<p>Creating a feed is as easy as giving it a name and a description and selecting the feed type (public, community or private). Once your feed is created you can start adding packages to it. To add a package enter the search term just like you would do when you use NuGet in Visual Studio, click the package you want and click Add.</p>
<p><a href="http://i45.tinypic.com/dqnmmb.jpg" target="_blank"><img src="http://i45.tinypic.com/dqnmmb.jpg" alt="" width="304" height="273" /></a></p>
<p>If you want, in the Add package dialog, you can select to mirror the package. This will copy the entire package from the NuGet feed into MyGet, meaning that you&rsquo;ll still be able to install the package when NuGet goes down. To give you an idea of how a feed could look like, here&rsquo;s some of the packages in my Windows Phone feed.</p>
<p><a href="http://i47.tinypic.com/2ltocw0.jpg" target="_blank"><img src="http://i47.tinypic.com/2ltocw0.jpg" alt="" width="310" height="348" /></a></p>
<p>To use your freshly created feed you&rsquo;ll need to add it as a package source in NuGet. Go to the Package Manager settings from the Visual Studio options menu (or open the Manage NuGet packages dialog in a project and click Settings). Here you can add a new package source.</p>
<p><a href="http://i45.tinypic.com/23r1mrs.jpg" target="_blank"><img src="http://i45.tinypic.com/23r1mrs.jpg" alt="" width="536" height="312" /></a></p>
<p>Once added, the new package source will show up in NuGet and you&rsquo;ll be able to install the packages from you own feed.</p>
<p><a href="http://i45.tinypic.com/jg1sfl.jpg" target="_blank"><img src="http://i45.tinypic.com/jg1sfl.jpg" alt="" width="542" height="361" /></a></p>
<p>Managing my own package feed has really reduced the time I used to spent searching and adding packages. But the MyGet team has been working hard on a really cool feature.</p>
<h2>Do the Wonka</h2>
<p>The MyGet team (all Belgian developers by the way &ndash; hooray for Belgium <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_15.png" alt="Smile" />) developed a feature they codenamed &ldquo;Wonka&rdquo;. It&rsquo;s currently in Beta but it&rsquo;s working great so far. This is what Wonka is all about</p>
<p><img src="http://i48.tinypic.com/63ya7q.jpg" alt="" /></p>
<p>They&rsquo;ve setup their own Build server, including support for building Windows Phone 8 libraries (thanks to the command line compiler in the WP8 SDK). Hearing about such a cool feature and hearing that it&rsquo;s in beta made me want to try it. And I started thinking, maybe I could put a bunch of classes that I tend to use in some form in multiple projects in one library and have that library in my feed.</p>
<p>The project itself is still very small but it will grow when I need extra functionality, it currently holds a Regex class to get rid of HTML tags in strings and a RestClient class that uses the portable HttpClient to do a Get operation. For reference, here are the classes.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7cb6aad4-69e5-4399-9dfd-d938508e7e0f" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">static</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">RegexHelper</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">static</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> RemoveHtmlTags(</span><span style="background: #ffffff; color: #0000ff;">this</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> text)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//add some layout</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">text = </span><span style="background: #ffffff; color: #2b91af;">Regex</span><span style="background: #ffffff; color: #000000;">.Replace(text, </span><span style="background: #ffffff; color: #a31515;">"&lt;br /&gt;"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #a31515;">"\n"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">text = </span><span style="background: #ffffff; color: #2b91af;">Regex</span><span style="background: #ffffff; color: #000000;">.Replace(text, </span><span style="background: #ffffff; color: #a31515;">"&lt;/p&gt;"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #a31515;">"\n"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//replace weird characters</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">text = </span><span style="background: #ffffff; color: #2b91af;">Regex</span><span style="background: #ffffff; color: #000000;">.Replace(text, </span><span style="background: #ffffff; color: #a31515;">"&amp;amp;"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #a31515;">"&amp;"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">text = </span><span style="background: #ffffff; color: #2b91af;">Regex</span><span style="background: #ffffff; color: #000000;">.Replace(text, </span><span style="background: #ffffff; color: #a31515;">"&amp;nbsp;"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #a31515;">" "</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//remove remaining HTML tags</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #2b91af;">Regex</span><span style="background: #ffffff; color: #000000;">.Replace(text, </span><span style="background: #ffffff; color: #a31515;">@"&lt;[^&gt;]*&gt;"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">.Empty);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:32457e6a-44ec-47fc-8d3e-026646d9d367" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">RestClient</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">IRestClient</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">HttpClient</span><span style="background: #ffffff; color: #000000;"> _client;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">async</span><span style="background: #ffffff; color: #2b91af;">Task</span><span style="background: #ffffff; color: #000000;">&lt;T&gt; Get&lt;T&gt;(CancellationToken cancellationToken, </span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> url, </span><span style="background: #ffffff; color: #0000ff;">bool</span><span style="background: #ffffff; color: #000000;"> includeResultProps = </span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">where</span><span style="background: #ffffff; color: #000000;"> T : </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #000000;">()</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">try</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_client = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">HttpClient</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> result = </span><span style="background: #ffffff; color: #0000ff;">await</span><span style="background: #ffffff; color: #000000;"> _client.GetAsync(url);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> json = </span><span style="background: #ffffff; color: #0000ff;">await</span><span style="background: #ffffff; color: #000000;"> result.Content.ReadAsStringAsync();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (!includeResultProps)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">JObject</span><span style="background: #ffffff; color: #000000;"> obj = </span><span style="background: #ffffff; color: #2b91af;">JObject</span><span style="background: #ffffff; color: #000000;">.Parse(json);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">json = obj[</span><span style="background: #ffffff; color: #a31515;">"results"</span><span style="background: #ffffff; color: #000000;">].ToString();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #2b91af;">JsonConvert</span><span style="background: #ffffff; color: #000000;">.DeserializeObject&lt;T&gt;(json);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">catch</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">JsonSerializationException</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #000000;"> T();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>The project contains Json.net and the portable HttpClient, both referenced through NuGet. Now we need a way for the build server to get a hold of these packages, we can accomplish this by enabling the NuGet package restore. Right-click the solution and you&rsquo;ll see the option right there.</p>
<p><a href="http://i46.tinypic.com/166jckj.jpg" target="_blank"><img src="http://i46.tinypic.com/166jckj.jpg" alt="" /></a></p>
<p>This will add a .nuget folder to your solution that you&rsquo;ll need to check-in into your source control.</p>
<p>So we have a working project with some classes that we would like to get into a NuGet package by using the MyGet build server. What we need to do is get this package into a repository. I used BitBucket for this because it has free private repositories. You can also add a GitHub or Codeplex repository.</p>
<p><a href="http://i45.tinypic.com/2zsbng5.jpg" target="_blank"><img src="http://i45.tinypic.com/2zsbng5.jpg" alt="" width="494" height="143" /></a></p>
<p>If you use the from BitBucket button it will ask you for permission to access your account on BitBucket and will show you a list of all your repositories hosted there. Select the one you need and click Add. Do take notice of the warning.</p>
<p><a href="http://i50.tinypic.com/2lve4j5.jpg" target="_blank"><img src="http://i50.tinypic.com/2lve4j5.jpg" alt="" width="504" height="142" /></a></p>
<p>Add the repository and click the edit button next to it. Enter your BitBucket credentials here so MyGet can access your private repository to fetch the sources. And that&rsquo;s it, you can now hit the Build button to fetch the sources and try to build them. In my case this immediately resulted in a big fat red Failed message. The problem here is something of a chicken-egg problem (a big thanks here to the MyGet team for helping me figuring this one out!). So here&rsquo;s the problem:</p>
<ul>
<li>The project file needs the package to run</li>
<li>The project file is needed for package restore</li>
<li>package needs package restore</li>
</ul>
<p>The solution here is to setup a build.bat in the solution folder. The MyGet build server will search for a build.bat to execute, if it doesn&rsquo;t find one it will just use the sln available.</p>
<p>With the build.bat file we first fetch the necessary packages and then build the solution</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e694d299-430a-49f0-9177-0e43622cfa67" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #000000;">@echo Off</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">set config=%1</span></li>
<li><span style="background: #ffffff; color: #000000;">if "%config%" == "" (</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">set config=Release</span></li>
<li><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li><span style="background: #ffffff; color: #000000;">set version=</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">if not "%PackageVersion%" == "" (</span></li>
<li>&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">set version=-Version %PackageVersion%</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">)</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">REM Run package restore</span></li>
<li><span style="background: #ffffff; color: #000000;">%nuget% install WindowsPhone\packages.config -OutputDirectory packages -Prerelease -NonInteractive</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li><span style="background: #ffffff; color: #000000;">REM Build solution</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">%WINDIR%\Microsoft.NET\Framework\v4.0.30319\msbuild WindowsPhone.sln /p:Configuration="%config%" /m /v:M /fl /flp:LogFile=msbuild.log;Verbosity=Normal /nr:false</span></li>
</ol></div>
</div>
</div>
<p>Add this to your solution in Visual Studio, make sure it&rsquo;s called build.bat and check it into your source control. Now it should build.</p>
<h2>Automating builds</h2>
<p>Next step to make everything even more awesome is to add a hook to BitBucket so that MyGet will fetch and build the sources everytime a commit is pushed into the repository. First you&rsquo;ll need the HTTP POST link from MyGet, you&rsquo;ll find it underneath your build source.</p>
<p><a href="http://i48.tinypic.com/2j4a88j.jpg" target="_blank"><img src="http://i48.tinypic.com/2j4a88j.jpg" alt="" width="621" height="144" /></a></p>
<p>Once you&rsquo;ve got that link, go to the BitBucket repository and click the Settings icon, in the Settings go to Services and add a POST service.</p>
<p><a href="http://i47.tinypic.com/124geiv.jpg" target="_blank"><img src="http://i47.tinypic.com/124geiv.jpg" alt="" width="390" height="140" /></a></p>
<p>Past the URL and save the service. Now everytime you push a commit to BitBucket a new build should get queued in MyGet (the page refreshes automatically to show the build process).</p>
<p><a href="http://i50.tinypic.com/2ecp7jq.jpg" target="_blank"><img src="http://i50.tinypic.com/2ecp7jq.jpg" alt="" width="392" height="107" /></a></p>
<p>And just like that we&rsquo;ve created a NuGet package in a MyGet feed with continuous delivery, how cool is this right? If I check my feed from Visual Studio my package shows up!</p>
<p><a href="http://i47.tinypic.com/zuoakm.jpg" target="_blank"><img src="http://i47.tinypic.com/zuoakm.jpg" alt="" width="404" height="269" /></a></p>
<h2>Conclusion</h2>
<p>In this post I&rsquo;ve explained how I use MyGet, a NuGet-as-a-service, to create a package feed with only the packages that are relevant for me. I&rsquo;ve also explained how I&rsquo;ve added my own library of classes that I use in multiple projects in that feed and setup continuous delivery so that the package gets updated with every commit that gets pushed to the repository.</p>
<p>Resources:</p>
<ul>
<li><a href="http://www.myget.org">http://www.myget.org</a></li>
<li><a title="http://blog.myget.org/" href="http://blog.myget.org/">http://blog.myget.org/</a></li>
</ul>
<p>A big shout out to the MyGet team for helping me getting started with their awesome service! <a title="http://www.myget.org/Home/Team" href="http://www.myget.org/Home/Team">http://www.myget.org/Home/Team</a></p>]]></content>
      <post-name type="text"><![CDATA[Using MyGet for those common classes]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="7b5710ca-3236-4d90-9370-2279a87385f0" />
        <category ref="6b55a22a-f640-46ef-a0da-0445c61d953c" />
        <category ref="58dfe641-4139-4473-8a52-4fa9a46841bc" />
        <category ref="81e4515f-9482-48d4-83be-9800e6f3e100" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="995ddc9a-9bb8-4327-9721-c76272bb0bed" date-created="2013-03-22T09:30:03" date-modified="2013-03-22T09:30:03" approved="true" url="http://blog.myget.org/post/2013/03/22/Whats-new-in-Build-Services.aspx">
          <title type="text"><![CDATA[Build services - an overview

Build services - an overview]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="9afb479a-81a9-45e3-aacc-4a2f73b0746a" date-created="2013-03-08T13:51:00" date-modified="2013-03-08T14:16:52" approved="true" post-url="/blog/post/2013/03/08/Porting-a-real-win8-app-to-WP8-part-2.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Porting a real win8 app to WP8–part 2]]></title>
      <content type="text"><![CDATA[<p><a href="http://www.spikie.be/blog/post/2013/02/27/Porting-a-real-win8-app-to-WP8&ndash;part-1.aspx" target="_blank">Porting a real win8 app to WP8 &ndash; part 1</a></p>
<p>In part one of my adventure I described the architecture of my app and how I managed to move all viewmodels into a PCL (portable class library) but I didn&rsquo;t use them yet. The main consensus of part one was that I needed to do quite some refactoring and add a lot of abstractions to the project in order to move over viewmodels to PCL projects. In part 2 I&rsquo;ll describe how I got the viewmodels to work and how I re-enabled page navigation in the Windows 8 version. And with a bit of luck in part 3 I&rsquo;ll be talking about the Windows Phone 8 version of this app.</p>
<h2>A small note on part 1</h2>
<p>I wasn&rsquo;t very happy with part 1 since I needed to create some extra layers and abstractions. Since then the Microsoft Techdays have come and gone and with that two very interesting sessions that made me rethink some stuff. The session were from Laurent Bugnion (<a href="http://www.galasoft.ch/" target="_blank">his blog</a>, <a href="http://www.twitter.com/lbugnion" target="_blank">his&nbsp;Twitter</a>)&nbsp;(the creator of the awesome MVVM Light toolkit) and Gill Cleeren (<a href="http://www.snowball.be" target="_blank">his blog</a>, <a href="http://www.twitter.com/gillcleeren" target="_blank">his Twitter</a>)&nbsp;(a Belgian Silverlight MVP, RD and Win8 enthusiast). From Laurent I learned some tips and tricks concerning the ViewModelLocator class and specifically how to correctly use it in a portable library (more on that in part 3 since I haven&rsquo;t implemented it yet). Gill gave a session on advanced MVVM tactics and one sentence kept vibrating in my mind &ldquo;an extra class doesn&rsquo;t cost a thing&rdquo; next to that his demo app was filled with layers of abstractions way beyond the extra layers I needed to add to get the project to build again. After that session I felt reassured that I was going down a pretty good path with the revised architecture I had build in part 1. If you want to take a look at that session yourself, the recording of the SilverlightShow version is available <a href="http://www.silverlightshow.net/video/Applied-MVVM-in-Win8-Webinar.aspx" target="_blank">here</a>.</p>
<h2>About part 2</h2>
<p>The last couple of days I found some spare time to mess around with the project again. I&rsquo;m now at the stage where the Windows Store app is using the portable ViewModels and the navigation is working properly. Those parts are what I&rsquo;ll discuss here.</p>
<h2>Using the ViewModels</h2>
<p>Having the portable ViewModels ready it was time to switch to them. I deleted every viewmodel that was still in my client project, except for the ViewModelLocator, that one will be moved later. I registered the new abstraction layers in the ViewModelLocator, making sure that this only happened at runtime, not at designtime and tried to build the app. I couldn&rsquo;t believe my eyes when I saw the message &ldquo;Build succeeded&rdquo;. I replaced the viewmodels in my client project with the ones in the portable library and it still builds! In case you&rsquo;re interested, this is what&rsquo;s getting registered in my ViewModelLocator at this time.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:25d8156b-2f93-48ae-b0f1-0930527ab843" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> ViewModelLocator()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">ServiceLocator</span><span style="background: #ffffff; color: #000000;">.SetLocatorProvider(() =&gt; </span><span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">ViewModelBase</span><span style="background: #ffffff; color: #000000;">.IsInDesignModeStatic)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Create design time view services and models</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//SimpleIoc.Default.Register&lt;IDataService, DesignDataService&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Create run time view services and models</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INavigationService</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NavigationService</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IService</span><span style="background: #ffffff; color: #000000;">, SDKBroker.WinRT.</span><span style="background: #ffffff; color: #2b91af;">Service</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IMessageApi</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">MessageApi</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IFrameworkApi</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">FrameworkApi</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IDispatcher</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">Dispatcher</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INetworkApi</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NetworkApi</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//register viewmodels</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">MainViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">VolumeDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">CharacterDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">TeamDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IssueDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">SearchViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">DetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">StoryArcDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">LocationDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">PersonDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">CollectionViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">NewsFeedViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>Everything in the else block gets registered only at runtime. The viewmodels themselves can get registered at designtime just in case I ever want to incorporate designtime test data (something I really should do actually). Notice that some ViewModel registrations get passed a boolean parameter? The Register method of SimpleIoc has an optional parameter stating whether or not the object should get instantiated immediately. Since some viewmodels are listening for messages from the Messenger class in MVVM Light they need their instance right of the bat so they can register as listeners.</p>
<p>I tried to run the app, it started and data was coming in, I could use the button to show the search charm but no navigation was working. That made sense since all navigation commands are now going to ISomePage instead of SomePage and those interfaces weren&rsquo;t doing anything yet. So I had to make every page implement the correct interface and put together a way to navigate to the correct page from the interface.</p>
<p>Implementing the interface is easy enough (they&rsquo;re all just empty interfaces). Next problem was that those interfaces are inside of a folder called View in the ViewModel PCL and they need to be known in the Framework.WinRT project (that&rsquo;s where the NavigationService lives). So I&rsquo;ve added another PCL called it ComicDB.View and moved all interfaces there. (I couldn&rsquo;t reference the ViewModel project in the Framework project, it would create a circular dependency). After adding all references everything was building again but still no navigation. To get this to work I changed the Navigate method on the NavigationService from this</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9c972e9e-3577-47a1-bb2c-f97f84e9c232" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">virtual</span><span style="background: #ffffff; color: #0000ff;">bool</span><span style="background: #ffffff; color: #000000;"> Navigate(</span><span style="background: #ffffff; color: #2b91af;">Type</span><span style="background: #ffffff; color: #000000;"> destination, </span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> parameter = </span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">try</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_rootFrame.Navigate(destination, parameter);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">catch</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">Exception</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">false</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>to this</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:38c4392b-5c4f-4238-bb1f-fd9253887a0b" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">virtual</span><span style="background: #ffffff; color: #0000ff;">bool</span><span style="background: #ffffff; color: #000000;"> Navigate(</span><span style="background: #ffffff; color: #2b91af;">Type</span><span style="background: #ffffff; color: #000000;"> destination, </span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> parameter = </span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">try</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">NavigateToPage(destination, parameter);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">catch</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">Exception</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">false</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> NavigateToPage(</span><span style="background: #ffffff; color: #2b91af;">Type</span><span style="background: #ffffff; color: #000000;"> destination, </span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> parameter)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">try</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//get the implementation for the view</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> instance = </span><span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.GetInstance(destination);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> type = instance.GetType();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_rootFrame.Navigate(type, parameter);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">catch</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">ActivationException</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//no registered type found, just navigate to the destination, maybe it's not an interface</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_rootFrame.Navigate(destination, parameter);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>The Navigate method passes everything to the NavigateToPage method that tries to resolve a registered instance of the passed in type, should this fail it throws an ActivationException, in that case just try to navigate. This allows us to navigate to pages that don&rsquo;t use any interface. Once we get the instance out of the IOC we get its type and pass that into the navigate command of the frame. Obviously, before this starts working we need to register the pages in the IOC and that happens in the ViewModelLocator.</p>
<p>So to finish this part 2 of, here&rsquo;s the complete constructor of my ViewModelLocator</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:654e69a9-d525-4053-a61e-6f9b7ea2994d" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> ViewModelLocator()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">ServiceLocator</span><span style="background: #ffffff; color: #000000;">.SetLocatorProvider(() =&gt; </span><span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #2b91af;">ViewModelBase</span><span style="background: #ffffff; color: #000000;">.IsInDesignModeStatic)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Create design time view services and models</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//SimpleIoc.Default.Register&lt;IDataService, DesignDataService&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Create run time view services and models</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INavigationService</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NavigationService</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IService</span><span style="background: #ffffff; color: #000000;">, SDKBroker.WinRT.</span><span style="background: #ffffff; color: #2b91af;">Service</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IMessageApi</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">MessageApi</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IFrameworkApi</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">FrameworkApi</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IDispatcher</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">Dispatcher</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INetworkApi</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NetworkApi</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//register views</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IMainPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">MainPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IVolumeDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">VolumeDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">ICharacterDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">CharacterDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">ICollectionPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">CollectionPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">DetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IIssueDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">IssueDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">ILocationDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">LocationDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">INewsFeedPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">NewsFeedPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IPersonDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">PersonDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IStoryArcDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">StoryArcDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">ITeamDetailPage</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">TeamDetailPage</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//register viewmodels</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">MainViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">VolumeDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">CharacterDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">TeamDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">IssueDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">SearchViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">DetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">StoryArcDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">LocationDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">PersonDetailViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">CollectionViewModel</span><span style="background: #ffffff; color: #000000;">&gt;();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">SimpleIoc</span><span style="background: #ffffff; color: #000000;">.Default.Register&lt;</span><span style="background: #ffffff; color: #2b91af;">NewsFeedViewModel</span><span style="background: #ffffff; color: #000000;">&gt;(</span><span style="background: #ffffff; color: #0000ff;">true</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>It registers all my api and service layers, all my views that have an interface and all viewmodels.</p>
<h2>Part 2 conclusion</h2>
<p>After a rough start in Part 1 it seems that this experiment has forced me to improve my code by making me add some abstractions. This makes for easier reusable code, both on the same platform as on other platforms. The DEV branch of my app project is once again a fully functional Windows Store app that reacts and behaves exactly as the one that&rsquo;s in the store right now. The next step is to refactor out the ViewModelLocator and then it should be about time to start work on the Windows Phone version. See you in part 3!</p>]]></content>
      <post-name type="text"><![CDATA[Porting a real win8 app to WP8–part 2]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="81e4515f-9482-48d4-83be-9800e6f3e100" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
      </categories>
    </post>
    <post id="2b8fdf7d-27ec-4c56-bcfd-810cf3a23f9e" date-created="2013-02-27T13:23:00" date-modified="2013-02-28T18:33:47" approved="true" post-url="/blog/post/2013/02/27/Porting-a-real-win8-app-to-WP8-part-1.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Porting a real win8 app to WP8–part 1]]></title>
      <content type="text"><![CDATA[<p>A few weeks ago the first version of my Windows 8 app (finally) hit the store <a href="http://apps.microsoft.com/windows/app/comic-cloud/b44fe28d-9754-4c98-bbca-3242c73b568a" target="_blank">(download it here)</a>.&nbsp; From the start I wanted to port this application to Windows Phone 8 as well but I didn&rsquo;t keep that in mind when developing the app. Some time ago, the portable HttpClient was released in a beta version and to me that was the perfect time to see how useful the portable class libraries (PCL) really are.</p>
<p>Most of the information available on the internet on sharing code between Windows Store and Windows Phone apps have those really small basic projects, good stuff to get started, but I want to port an entire, finished project to another platform. Perfect content for some blog posts so I&rsquo;ll be documenting my progress here on my blog, hopefully it will be to some use.</p>
<h2>The app</h2>
<p>The app is called Comic Cloud and is a continuation of my very first Windows Phone 7 app ever. It allows users to search for anything related to comic books (volumes, issues, artists, characters, locations, &hellip;) and provides a whole bunch of information on the topic. The data comes from a community driven website (think Wikipedia for comics) called ComicVine. They have a great REST API with great documentation so that was perfect. On the other hand, and this is new in the Windows 8 version, users can start tracking their own collection of comic books and keep track of which issues in their collection are already read. This data is saved on Azure by using the awesome Azure Mobile Services, authentication happens with the Microsoft Account (single sign-on). So researching and collection are the two keywords of the application. Since the API is REST based, I make extensive use of the HttpClient class to make the API calls.</p>
<h2>Architecture</h2>
<p>As for architecture, all libraries are Windows Store class libraries and then off course there&rsquo;s the app itself, written in C# and XAML. This image shows the projects and their dependencies.</p>
<p><img src="http://i47.tinypic.com/6qfdk7.jpg" alt="" /></p>
<p>(The app was called ComicDB in its begin stages, the namespaces stayed but the app title was changed to Comic Cloud)</p>
<p>The solution exists of five projects, first there&rsquo;s the app itself using MVVM Light, win8nl for winRT behaviors (written by Joost van Schaik), MarkedUp for analytics, Callisto for settings fly-out, the Live SDK for the User class and the Telerik RAD controls for their controls (obviously).</p>
<p>The Model project contains all classes, there&rsquo;s the ComicVine classes (thank God for paste JSON as class&hellip;) and some classes for RSS feeds and links.</p>
<p>Since I want to limit the amount of data stored in my WAMS database, I only save the userID and the link to the ComicVine API for each item. For that I needed a second version of some classes, that&rsquo;s what the DTO project is for.</p>
<p>The framework is a project that I can reuse in other projects without changing anything, all classes that are app independent. Things like the RestClient (providing generic CRUD functions), the GroupInfoList for grouped gridviews, navigationservice to navigate between pages and so on. The ComicVineHelper is an extension method that changes the casing of some object to be compatible with the way the ComicVine API works. All these classes are implementing interfaces, so that will be a big plus when I start porting.</p>
<p>The SDKBroker takes all the different services I use and puts them together in one big SDK that&rsquo;s easy to use from the app.</p>
<h2>The idea</h2>
<p>So the idea was to take all those libraries, put them in PCL libraries and reference them from both the Windows Store app and the Windows Phone app. Next to that I wanted to use the portable version of MVVM Light to share my viewmodels over both projects as well. Turns out that, as usual, a good idea is stopped by technical limitations.</p>
<h2>The problem</h2>
<p>The problem is the difference between Windows 8 and Windows Phone, they don&rsquo;t share their entire codebase. Meaning I can&rsquo;t reuse all my code in a PCL. Also the Azure Mobile Services SDK has no portable version, so same problem there.</p>
<p>The solution is abstractions, create an interface for every class that isn&rsquo;t compatible with the PCL projects and implement them in a platform specific library. The PCLs I&rsquo;m using only target .net 4.5, winRT and WP8 so a lot of problems are already taken care of by not selecting WP7.X compatibility.</p>
<h2>The road so far</h2>
<p>I wanted to start out by replacing MVVM Light with the PCL version. This turned out to be easier said than done, the initial project was started from the MVVM Light template so I threw out the references to MVVM Light and added the PCL version through NuGet. Visual Studio went quite mad and started throwing all sorts of weird build errors, I eventually found out that the win8nl library also includes the MVVM Light assemblies and those conflicted with the PCL versions. But I needed the win8nl assembly for the eventtocommand behaviors in WinRT so that posed a big problem. Luckily there&rsquo;s the winRTBehaviors assembly that contains the logic to do behaviors but it doesn&rsquo;t include the actual eventtocommand one. The solution was to go to the Codeplex site of win8nl and copy the behavior classes from there and put them in my framework project. One problem solved.</p>
<p>The next step was to add a PCL for the Framework and SDKBroker projects, the Model was already a PCL so that one could stay as it was. The PCL libs got named ComicDB.Framework and ComicDB.SDKBroker, they contain a combination of interfaces and classes. Everything that couldn&rsquo;t be made portable was abstracted into an interface and implemented in platform specific libraries called ComicDB.Framework.WinRT and ComicDB.SDKBroker.WinRT. The classes that needed abstraction were the NavigationService, Network helper, WAMS service class and Service helper. Thanks to the new portable HttpClient assembly I could copy my RestClient class to a PCL without any adjustments.</p>
<p>With some tinkering I got the project to build and run again and I saw that it was good. The time had come to move my ViewModels over to a PCL. I added a new PCL project called ComicDB.ViewModel (same namespace as my VMs already had) and added the portable MVVM Light version. The ViewModelLocator can&rsquo;t be moved since it needs to register all the correct interface implementations into the IOC container, so I&rsquo;ll have a separate Locator class for Win8 and WP8. As I started moving ViewModels I quickly ran into a navigational problem, my viewmodels have navigation logic and the pages they are navigating to aren&rsquo;t known in the PCL. To solve this I&rsquo;ve created an interface for every page and set that as navigational target, I don&rsquo;t know if this will work but I&rsquo;ll find out soon enough and put it in part 2 if this diary.</p>
<p>Navigational problem solved, on to the next one. Two of my viewmodels could show toast notifications, I use the notifications helper classes from MSDN to get this done but the notification classes aren&rsquo;t portable (and they really don&rsquo;t need to be since Windows Phone doesn&rsquo;t support in-app toasts, the C4F toolkit fixes that luckily) so I created an IMessageAPI interface that has a PopToast() method. In FrameWork.WinRT it shows a build-in toast just like the app used to do.</p>
<p>Hey remember that we have to do everything async now and that we can call the Dispatcher to execute something on the UI thread? Not happening in a PCL&hellip; MVVM Light contains a DispatcherHelper that checks if an action needs to be executed on the UI thread and actually executes it there when needed, except in the PCL version. So IDispatcher was born.</p>
<p>With that done I got my project to build again and to run but it&rsquo;s currently still using the old viewmodels, I expect a whole bunch of new problems when I try to change it to the PCL versions, but that will be for part 2.</p>
<h2>What&rsquo;s next</h2>
<p>In part 2 I hope to make the app use the PCL version of the viewmodels and I&rsquo;ll start working on the Windows Phone project.</p>
<h2>Conclusion</h2>
<p>PCL projects sound very good in theory but in reality they are a great PITA to work with. Portable HttpClient and portable MVVM Light make them useful but you&rsquo;ll have to right loads of extra code, abstractions and helper classes to get to something that looks like build once run on two platforms. I could&rsquo;ve given up and just rebuild everything in a separate solution for WP8 but I want to see how far I can take this and document it along the way.</p>
<p>That said, I have no idea when part 2 will be live, that depends on when I can gather the courage to reference the viewmodel project <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_14.png" alt="Smile" /></p>]]></content>
      <post-name type="text"><![CDATA[Porting a real win8 app to WP8–part 1]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="81e4515f-9482-48d4-83be-9800e6f3e100" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
      </categories>
      <comments>
        <comment id="8b3ab93f-e810-44d3-ba98-7332ee036334" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-03-21T18:53:33" date-modified="2013-03-21T18:53:33" approved="true" user-name="uterrell26" user-email="sofortklicken@gmail.com" user-ip="87.148.23.225" user-url="">
          <title type="text"><![CDATA[re: Porting a real win8 app to WP8–part 1]]></title>
          <content type="text"><![CDATA[You seem to know a great deal about this subject]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="34558d67-7505-40f3-8a0d-af0b5ebc2f6b" date-created="2013-02-19T18:00:44" date-modified="2013-02-19T18:01:39" approved="true" post-url="/blog/post/2013/02/19/MSDN-webcast-NFC-in-Windows-Phone-8.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[MSDN webcast: NFC in Windows Phone 8]]></title>
      <content type="text"><![CDATA[<p>Today I had the pleasure of delivering a webcast for MSDN on near-field-communication in Windows Phone 8. I did have some technical problems, those problems being my phone freezing for the very first time ever, not even able to shut it down. Great timing for something like that to happen, but I think my audience believed me when I told them that the code really works. For those still in doubt, I’ve uploaded the demo project and you can find it <a href="http://sdrv.ms/139UV6U" target="_blank">here (SkyDrive link).</a></p>  <p>The slides are available on SlideShare (embedded here) and the recording will soon be available on Channel9</p> <iframe style="margin-bottom: 5px; border-top: #ccc 1px solid; border-right: #ccc 1px solid; border-bottom: #ccc 0px solid; border-left: #ccc 1px solid" height="356" marginheight="0" src="http://www.slideshare.net/slideshow/embed_code/16627236" frameborder="0" width="427" marginwidth="0" scrolling="no" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen" allowfullscreen="allowfullscreen"> </iframe>  <div style="margin-bottom: 5px"><strong><a title="Nfc in wp8" href="http://www.slideshare.net/nicovermeir/nfc-in-wp8" target="_blank">Nfc in wp8</a> </strong>from <strong><a href="http://www.slideshare.net/nicovermeir" target="_blank">Nico Vermeir</a></strong> </div>  <p>And don’t worry, I do have a new blogpost coming up, I was on holiday last week and very busy this week (webcast, app-a-thons, actual project at work, …)</p>]]></content>
      <post-name type="text"><![CDATA[MSDN webcast: NFC in Windows Phone 8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="a32f3d48-8cb6-4bb0-81e3-59bd37a2678b" />
        <category ref="ef33a728-f509-4228-8b4c-06aca8964391" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="e96ada6a-e768-4392-a18e-c2f0d6f81016" />
      </categories>
      <comments>
        <comment id="8e5c9c51-0e26-4cab-96af-ebd2583293e6" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T01:01:54" date-modified="2013-06-22T01:01:54" approved="false" user-name="buy twitter followers" user-email="lauren-easton@gmail.com" user-ip="5.135.85.80" user-url="">
          <title type="text"><![CDATA[re: MSDN webcast: NFC in Windows Phone 8]]></title>
          <content type="text"><![CDATA[You actually make it appear so easy together with your presentation however I find this topic to be actually one thing that I feel I might by no means understand. It seems too complex and extremely broad for me. I&#39;m having a look forward in your next post, I&#39;ll attempt to get the grasp of it!

Also visit my webpage -  buy twitter followers - http://www.24-7press.com/Acquiring-A-Lot-More-Real-And-Tested-Myspace-Readers.htm ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="d592af01-2735-4441-8575-4ee9e34e89f2" date-created="2013-02-05T11:11:28" date-modified="2013-02-05T11:54:28" approved="true" post-url="/blog/post/2013/02/05/SQLite-in-Windows-Phone-8-The-sequel.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[SQLite in Windows Phone 8: The sequel]]></title>
      <content type="text"><![CDATA[<p>Read the first part: <a href="http://www.spikie.be/blog/post/2013/01/29/SQLite-in-Windows-Phone-8.aspx" target="_blank">SQLite with a bit of MVVM Light in Windows Phone 8</a></p>  <p>Last week I’ve blogged about using SQLite in an MVVM scenario in Windows Phone 8. Since, in my opinion, the post was already getting to an epic length I decided to leave out a part for this week.</p>  <p>I’ll try to keep it a bit shorter this time, should be able to. The part I left out was using relationships and foreign keys with SQLite and the sqlite-net library. I’ll be building upon the project of the previous post, so the task schedule thingy. What we’ll be doing is adding the possibility of creating subtasks so that a task can be divided into smaller tasks. Note that this is just a proof of concept (POC) it’s in no way a complete application and it will have some strange things but that’s the whole fun of a POC.</p>  <p>Let’s kick things off with the creation of a new class for holding the SubTasks.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:30f956df-47b2-4915-900f-714799b4ee9c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">Table</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;SubTask&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">INotifyPropertyChanged</span></li> <li><span style="background:#ffffff;color:#2b91af">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _id;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> _title;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> DateTime _date;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _taskId;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">PrimaryKey</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">AutoIncrement</span><span style="background:#ffffff;color:#000000">]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> Id</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _id; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _id) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_id = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Title</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _title; }</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _title) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">_title = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> DateTime Date</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _date; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">.Equals(_date)) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_date = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">Indexed</span><span style="background:#ffffff;color:#000000">]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> TaskId</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _taskId; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _taskId) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_taskId = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">OnPropertyChanged();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> PropertyChanged;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">NotifyPropertyChangedInvocator</span><span style="background:#ffffff;color:#000000">]</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">virtual</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnPropertyChanged([</span><span style="background:#ffffff;color:#2b91af">CallerMemberName</span><span style="background:#ffffff;color:#000000">] </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> propertyName = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> handler = PropertyChanged;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (handler != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) handler(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventArgs</span><span style="background:#ffffff;color:#000000">(propertyName));</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>By using attributes we define this class as being a column in the SQLite database and the property Id being a primary key with auto increment. This is all explained in more detail in the previous post. A new attribute here is Indexed on the TaskId property. That attribute states that that property will be an index, it will hold the primary key of the Task table.</p>  <p>Remember that the database was created in the App.xaml.cs? We’ll need to add a line there to create the SubTask table as well. If you haven’t shut down the emulator between the previous post and this one, or you’re testing on an actual device, you’ll need to remove the app so that the database is destroyed or the new table won’t get generated.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:416c136e-4414-47de-9608-121d4eac5dcd" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Application_Launching(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">LaunchingEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ApplicationData</span><span style="background:#ffffff;color:#000000">.Current.LocalFolder.GetFileAsync(</span><span style="background:#ffffff;color:#a31515">&quot;taskDB.db&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">Connection = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SQLiteAsyncConnection</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;taskDB.db&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">FileNotFoundException</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">CreateDB();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CreateDB()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">Connection = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SQLiteAsyncConnection</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;taskDB.db&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> Connection.CreateTableAsync&lt;</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> Connection.CreateTableAsync&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>I’ve added the complete snippet as reference, line 19 is the new one.</p>  <p>Next up is the view, this will be quite similar to the Mainpage, a pivot with two pages. One containing a form for adding a new subtask and one containing a list of all subtasks.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9a473b54-07e1-4f88-8bbb-b6c121e5f837" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.Resources</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Key</span><span style="background:#ffffff;color:#0000ff">=&quot;TaskListItemTemplate&quot;&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;Title&quot;</span></li> <li>                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> JumpListAlphabetStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Title}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;Date&quot;</span></li> <li>                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,0,0&quot;</span></li> <li style="background: #f3f3f3">                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Date}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Main task ID&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> TaskId}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.Resources</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#008000">&lt;!--  Buttons are defined using the behaviors in the Cimbalino toolkit to allow a bindable appbar  --&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.ApplicationBar</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBar</span><span style="background:#ffffff;color:#ff0000"> IsMenuEnabled</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span><span style="background:#ffffff;color:#ff0000"> IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.ApplicationBar</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#008000">&lt;!--  LayoutRoot is the root grid where all page content is placed  --&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;LayoutRoot&quot;</span><span style="background:#ffffff;color:#ff0000"> Background</span><span style="background:#ffffff;color:#0000ff">=&quot;Transparent&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">&lt;!--  Bindable Appbar buttons  --&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarBehavior</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarIconButton</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SaveNewSubTaskCommand</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li style="background: #f3f3f3">                                                                   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=OneTime}&quot;</span></li> <li>                                               <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> IconUri</span><span style="background:#ffffff;color:#0000ff">=&quot;/Assets/AppBar/save.png&quot;</span></li> <li style="background: #f3f3f3">                                               <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Save Task&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarBehavior</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;Auto&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;*&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Pivot</span><span style="background:#ffffff;color:#ff0000"> Title</span><span style="background:#ffffff;color:#0000ff">=&quot;SQLite POC&quot;</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;NewTask&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> CacheMode</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Null}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Header</span><span style="background:#ffffff;color:#0000ff">=&quot;new subtask&quot;&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Main task&quot; /&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ListPicker</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Tasks}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedTask</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;&gt;</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ListPicker.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Title}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ListPicker.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ListPicker</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Title&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBoxTitle&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;72&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> NewSubTask</span><span style="background:#ffffff;color:#0000ff">.Title,</span></li> <li>                                       <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Complete by&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">DatePicker</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> NewSubTask</span><span style="background:#ffffff;color:#0000ff">.Date,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot; /&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;AllTasks&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> CacheMode</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Null}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Header</span><span style="background:#ffffff;color:#0000ff">=&quot;all subtasks&quot;&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> TaskListItemTemplate}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SubTasks}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Pivot</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>The only new thing here is the ListPicker, it’s a control in the Windows Phone Toolkit (get it from NuGet) and it’s kind of like Windows Phone’s version of a combobox. The ItemTemplate is a TextBlock containing the Title of the Task.</p>  <p>If you want details on the bindings, read the previous post. The DataContext for this page binds to a SubTaskViewModel through the ViewModelLocator</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3570db0a-ebe8-41f3-b0ff-8b6c8a502e08" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SubTask</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> </ol> </div> </div> </div>  <p>And here’s the SubTaskViewModel</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ed03ebed-9900-477d-9022-d023f40461fa" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 3em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SubTaskViewModel</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> _dataService;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt; _subTasks;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt; SubTasks</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _subTasks;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (Equals(_subTasks, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">))</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">_subTasks = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SubTasks);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000"> _newSubTask;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt; _tasks;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> _selectedTask;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000"> NewSubTask</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _newSubTask;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_newSubTask == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_newSubTask = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; NewSubTask);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000"> SaveNewSubTaskCommand</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> () =&gt;</span></li> <li style="background: #f3f3f3">                                                <span style="background:#ffffff;color:#000000">{</span></li> <li>                                                    <span style="background:#ffffff;color:#000000">NewSubTask.TaskId = SelectedTask.Id;</span></li> <li style="background: #f3f3f3">                                                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataService.Save(NewSubTask);</span></li> <li>                                                    <span style="background:#ffffff;color:#000000">SubTasks.Add(NewSubTask);</span></li> <li style="background: #f3f3f3">                                                    <span style="background:#ffffff;color:#000000">NewSubTask = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000"> { Date = DateTime.Today };</span></li> <li>                                                <span style="background:#ffffff;color:#000000">});</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt; Tasks</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _tasks; }</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (Equals(_tasks, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">))</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">_tasks = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; Tasks);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> SelectedTask</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedTask; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (Equals(_selectedTask, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">))</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_selectedTask = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedTask);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> SubTaskViewModel(</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService, </span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_dataService = dataService;</span></li> <li>        <span style="background:#ffffff;color:#000000">SubTasks = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">NewSubTask = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000"> { Date = DateTime.Today };</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">GetData();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GetData()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">Tasks = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataService.LoadTasks();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">SubTasks = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataService.LoadSubTasks();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In this viewmodel we’ll have a list of both the Tasks and the SubTasks because we’ll have to select a Task to attach a SubTask to. The constructor loads in the NavigationService and the DataService from the Ioc container, Tasks and SubTasks get loaded and we’re good to go. Now the navigation isn’t really what it should be in this POC, because you have to go to a Task edit page, click the Add Subtask button and then select the Task you want to create a subtask for, it’s a bit of double work but I don’t care <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_13.png" />. </p>  <p>Remember the DataService? It’s the class that takes care of all the CRUD operations in our app, it’ll need to do the same for the subtasks. I’m a bit lazy, so I’ve only did the insert and read part. Here’s the read snippet</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ad77e610-edb9-4221-802d-ade4207eb703" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt;&gt; LoadSubTasks()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.Table&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt;().ToListAsync();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Exactly the same as for reading out the Tasks. Now, for saving I altered the SaveTask function to be generic.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f6fe99cc-5fc8-4e2d-bed1-aec93f85fac0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> Save&lt;T&gt;(T newTask)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.InsertAsync(newTask);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This function takes in basically anything and saves it in the DB, if you pass something in of a type that doesn’t have a table in the DB the app will crash, hard. So be careful how you use this and you might think of adding some error handling.</p>  <p>And there we are, a working SQLite proof of concept with relationships and everything. Since a picture says more than a thousand words, here are some screenshots.</p>  <p><em>The Edit Task screen with the Add subtask button</em></p>  <p><a href="http://i47.tinypic.com/34pgnz4.jpg" target="_blank"><img src="http://i47.tinypic.com/34pgnz4.jpg" width="186" height="310" /></a></p>  <p><em>The Add SubTask screen with all the Tasks in a listpicker</em></p>  <p><a href="http://i50.tinypic.com/33einty.jpg" target="_blank"><img src="http://i50.tinypic.com/33einty.jpg" width="194" height="323" /></a></p>  <p><em>List of SubTasks with the Task ID</em></p>  <p><a href="http://i49.tinypic.com/2w58xmo.jpg" target="_blank"><img src="http://i49.tinypic.com/2w58xmo.jpg" width="198" height="330" /></a></p>  <p>The entire project can be downloaded in a zip file <a href="http://sdrv.ms/WLKU02" target="_blank">here (Link to my SkyDrive)</a>.</p>]]></content>
      <post-name type="text"><![CDATA[SQLite in Windows Phone 8: The sequel]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="b02131cb-4742-4c07-bfaa-b905c8088508" />
      </categories>
      <comments>
        <comment id="22b53779-4147-42e3-b73b-5ecdc31fd9f0" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-03-26T14:32:16" date-modified="2013-03-26T14:32:16" approved="true" user-name="Tony" user-email="tpalumbo@clmx.com" user-ip="162.39.81.6" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Hi Nico,

Great read and helped me understand SQLite and list picker.  I have a question though.  How about the reverse logic.  Lets say I have a view called PartsView and its context is the viewmodel of PartsViewModel.  Lets say on the view, PartsView, there are my normal textboxes, (PartNumber, Color.....) but I also have a ListPicker that is for PartType.  In my PartModel I have a field called PartTypeID.  So then, the user in looking at the Parts view.  They enter, PartNumber, Color, then they tap on the textbox, &quot;Part Type&quot;, it opens a ListPicker in FullMode.  So then they select a PartType.  Lets say the part type they selected is &quot;Memory&quot;.  After they select it, it closes the FullMode ListPicker view and returns back to the PartsView and then they see the textbox, &quot;Part Type&quot; populated with &quot;Memory&quot;

I&#39;m assuming this is a parent child relationship, but do you have an example of that?  Kind of like on a Windows Form, where the user selects the item from a combo or dropdown box.

Thanks,

Tony]]></content>
        </comment>
        <comment id="e609f338-63b7-4d5b-b610-2721149c8e93" parentid="22b53779-4147-42e3-b73b-5ecdc31fd9f0" date-created="2013-03-27T11:52:31" date-modified="2013-03-27T11:52:31" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="213.246.197.69" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Hi Tony,

if I understand your question correctly you&#39;d want to add a property to your PartsViewModel for SelectedPartType and do a two-way binding on your listpicker&#39;s selectedItem property]]></content>
        </comment>
        <comment id="8611ec87-84ec-4366-bae8-d4ca981d0354" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-03-28T04:40:34" date-modified="2013-03-28T04:40:34" approved="true" user-name="Tony" user-email="tpalumbo@clmx.com" user-ip="71.71.252.205" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Yee sir.  Kind of like on a windows form that has a combo box.]]></content>
        </comment>
        <comment id="5f39c460-dc02-47c6-aa89-ee986e73f102" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T10:24:40" date-modified="2013-06-19T10:24:40" approved="false" user-name="online casino Bonuses" user-email="odessa_stinson@arcor.de" user-ip="159.253.137.83" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Also, consider the minimum wagers for the sites (particularly good for beginners) and the maximum bets allowed that experienced gamblers will find more challenging. With a powerful software platform, unbeatable support and hugely generous promotions and rewards, this site is destined for great heights. While these theories don&#39;t maintain any value, there are those that do hold water, so to speak.

My site -  online casino Bonuses - http://www.onlinecasinobonusman.com ]]></content>
        </comment>
        <comment id="ff384167-5947-41e1-9254-b17b671d4a61" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T18:41:25" date-modified="2013-06-19T18:41:25" approved="false" user-name="casino bonus man" user-email="coreylong@bigstring.com" user-ip="198.143.135.108" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[If you do not like the website or are not comfortable with the navigation then move on to another one. The variants have always been updated to promote high interest among gamers, to keep them thrilled. While these theories don&#39;t maintain any value, there are those that do hold water, so to speak.

Feel free to surf to my homepage -  casino bonus man - http://www.onlinecasinobonusman.com ]]></content>
        </comment>
        <comment id="c688dd32-189b-46d0-8c93-1b3e45f81e48" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T00:37:39" date-modified="2013-06-20T00:37:39" approved="false" user-name="meilleurs sites forex" user-email="wilford-sallee@yahoo.de" user-ip="66.248.202.183" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Having read this I believed it was rather enlightening. I appreciate you taking the time and effort to put this article together. I once again find myself spending a lot of time both reading and leaving comments. But so what, it was still worth it!

Review my weblog:  meilleurs sites forex - http://kathryn8620.wordpress.com/2013/06/17/how-to-deal-with-the-new-forex-regulations/ ]]></content>
        </comment>
        <comment id="a17b9a9b-e3ec-42e6-bd1e-9348bf5eff65" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T15:47:26" date-modified="2013-06-20T15:47:26" approved="false" user-name="www.onlinecasinobonusman.com" user-email="carincintron@gmail.com" user-ip="199.180.119.195" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[A large casino, whether the kind that you walk in to or the kind that you reach online, have no need to cheat you because the odds are in their favor. The flash games are an excellent choice for those people who are keen on online casino games, however, because of worries about installing and running the software may choose not to do so. First of all, the cost of getting there combined with the cost of staying nearby is perhaps reason alone to avoid this option.

Also visit my page online casino bonus man -  www.onlinecasinobonusman.com - http://www.onlinecasinobonusman.com  -]]></content>
        </comment>
        <comment id="cfd63b3a-8787-4a75-8731-10325143d72a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T17:59:43" date-modified="2013-06-20T17:59:43" approved="false" user-name="Online Casino bonus Man" user-email="chunredden@gmail.com" user-ip="199.119.227.220" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[This must-have software is the top and ideal choice for you because not only can you see live action unfold in front of you but you also see a live dealer running the show as though you were at a live venue. The flash games are an excellent choice for those people who are keen on online casino games, however, because of worries about installing and running the software may choose not to do so. This intends to frustrate the player to the point of just leaving and not claiming his or her win.

Also visit my homepage  Online Casino bonus Man - http://Www.Onlinecasinobonusman.com/ ]]></content>
        </comment>
        <comment id="a1bff148-8c90-409f-8b7e-789911dcd5bf" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-21T21:44:34" date-modified="2013-06-21T21:44:34" approved="false" user-name="forex" user-email="lewisbankston@gmail.com" user-ip="198.52.128.160" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[The day time&#39;s session &quot;ends&quot; at 5PM EST, however the actual marketplace does not seriously near. Currency trading basics are among the things you need to first learn if you are planning to venture on foreign exchange or  forex - http://www.snafu.co/blogs/38131/104326/news-on-rapid-solutions-for-fore  trading. You should know up front that online retail trading by individuals (.]]></content>
        </comment>
        <comment id="77b6219a-a5bb-4a74-adef-c885422f6346" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T10:35:08" date-modified="2013-06-22T10:35:08" approved="false" user-name="no closing cost refinance interest rate" user-email="terrellforsythe@gmail.com" user-ip="178.33.213.50" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Hey There. I found your weblog the use of msn. That is a very neatly written article. I will make sure to bookmark it and come back to read more of your helpful information. Thanks for the post. I will certainly return.

My weblog;  no closing cost refinance interest rate - http://vesopedia.ru/doku.php/profile_annistnkmhfrede ]]></content>
        </comment>
        <comment id="a4dfbfd4-5591-4b74-ad80-66a390ae2764" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T17:21:14" date-modified="2013-06-28T17:21:14" approved="false" user-name="invertir en forex" user-email="hayleyarsenault@mail-page.com" user-ip="178.32.226.184" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Obviously with any method the evidence is within the benefits. In additional, you can check account balance, equity, margin and leverage for calculating your lot size. Below is really a record of features to be sure your considered exchanging signal service offers.

Here is my web blog  invertir en forex - https://wikifarm.koumbit.net/wikigraphe/Immediate_Secrets_For_forex_Across_The_USA ]]></content>
        </comment>
        <comment id="36a9287d-eb4e-4568-a1da-e74a67abc58c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T06:47:49" date-modified="2013-06-29T06:47:49" approved="false" user-name="forex" user-email="pete-battles@gmail.com" user-ip="66.248.202.183" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Bill Poulos will be holding weekly coaching sessions to teach you how to use and apply the 2 trading methods using live trading examples. To delve a little further at a platform, it should have the facility to set stop losses, possibly trailing stops so that it can cater to the trader as their technique advances. Reducing the risks involved: A computerized  forex - http://documentation.onesolutioncms.com/index.php?id=&#39;%3E%3Ca+href=http://jalster.com/blogs/635/1749/immediate-methods-in-forex-expla%3Eforex%3C/a%3E%3Cinput+name=search_items  trading techniques allows traders to make use of multiple purchasing and selling systems.]]></content>
        </comment>
        <comment id="2fdc2609-26ed-4960-9ea5-c5d7779a0cd8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T14:02:50" date-modified="2013-06-29T14:02:50" approved="false" user-name="invertir en divisas" user-email="augustinamccoy@t-online.de" user-ip="66.248.202.200" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[The best start to copy an expert trader is to copy with a small amount in the beginning. You will find references to a variety of currencies, and this is a big difference between the stock market and the forex market. The metric oscillates in value between 0 and 100, indicating that a stock is technically overbought or oversold when it passes fixed levels.

Here is my homepage;  invertir en divisas - https://pod.westfordma.gov/groups/english9mrscoates/wiki/0e039/Swift_Plans_For_forex__The_Basics.html ]]></content>
        </comment>
        <comment id="27e806fd-77dc-43e7-a543-8ce8ba84ba75" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T20:09:30" date-modified="2013-06-29T20:09:30" approved="false" user-name="norske spilleautomater p&amp;#229; nett" user-email="angelicahassell@yahoo.com" user-ip="178.32.226.184" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Det gj&#248;r imidlertid segpopularitet. Casinoeuro ni n&#229;gon skjort det jeg liker det finnes n&#229;gon h&#228;ndelserik kommekontakt tillsammans euros norske festes evnt foran radiatoren vores casinoer: asbra er casinoene finner du g&#228;llande spilleautomater pa nett men et populaert bra nudge 6000 verktoy forovervake ni ett ekte klassiker. Minimumsinnskudd s&#229;som automater kungen nett kan deglaere mer tillsammans hensyn tillsammans fem gevinstlinjer. Casino nesten tisset slotreel runde &#229;kte pengar hvor mange linjer du s&#229;som er euro ved betyr at dersom ni ni kan gj&#248;re innskudd mellomrom.

Feel free to surf to my page -  norske spilleautomater p&#229; nett - http://bradymontanez.newsvine.com/_news/2013/06/05/18786132-norske-beste-loven-sitt-penger-automater-nett ]]></content>
        </comment>
        <comment id="9f341c1a-aee2-4e17-8fe2-15446cdbb0f5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T21:37:52" date-modified="2013-06-29T21:37:52" approved="false" user-name="forex" user-email="cristinelarose@zoho.com" user-ip="50.115.171.147" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Touche. Solid arguments. Keep up the great spirit.

Here is my site  forex - https://pod.westfordma.gov/groups/english9mrscoates/wiki/f1c99/Forex_For_Newbie__How_To_Get_Started_In_Forex_Trading.html ]]></content>
        </comment>
        <comment id="c1fc747c-9721-49bf-986b-c4555ba1c8a0" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T02:17:47" date-modified="2013-07-02T02:17:47" approved="false" user-name="spilleautomater online" user-email="amelie.prater@bigstring.com" user-ip="37.59.145.27" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Her ni lagt under kategorien beste online spilleautomaten casumo er et casinoeventyr avfall kasinospillet nudge her og spillprodukter s&#229;som er dersom ni nedminste detalj. Avhengig bruten hvor ma j&#228;tte nudge 6000 absolut avklare ett den nye supernudgespilleautoma asbra nudge 6000ter. Alt kungen det spille. Mange s&#229;som overalt g&#228;llande spilleautomater kungen nett nettet.

Here is my weblog:  spilleautomater online - http://katzenhut.de/blogs/post/16764 ]]></content>
        </comment>
        <comment id="b9547c04-8361-4914-b7eb-aa31d427cfa0" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T03:29:18" date-modified="2013-07-02T03:29:18" approved="false" user-name="www.medicalnewsexperts.com" user-email="rustyfrizzell@gmail.com" user-ip="178.32.226.87" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Also it is hard to manipulate the market in an extended manner. You will find references to a variety of currencies, and this is a big difference between the stock market and the forex ( www.medicalnewsexperts.com - http://www.medicalnewsexperts.com/Uncovering-Easy-Secrets-Of-Forex.htm ) market. Bear in mind predictions and forecasts are performed by the persons and no one amongst them can give a guarantee about any future event.]]></content>
        </comment>
        <comment id="2927d343-85ad-4a9b-8655-abeb3fba89d9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T09:29:03" date-modified="2013-07-02T09:29:03" approved="false" user-name="http://marlingtonlocal.org/groups/stressor/wiki/1107b/Systems_For_forex_Clarified.html" user-email="millardcahill@bigstring.com" user-ip="198.52.128.96" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[The best start to copy an expert trader is to copy with a small amount in the beginning. The strength or volatility of Foreign Exchange currency rates can change in an instant, so ensure you have the right plan and capital to invest in currencies. The foreign exchange market is in reality more concentrated when compared with the stock market.

Feel free to visit my web site ... invertir en bolsa ( http://marlingtonlocal.org/groups/stressor/wiki/1107b/Systems_For_forex_Clarified.html - http://marlingtonlocal.org/groups/stressor/wiki/1107b/Systems_For_forex_Clarified.html )]]></content>
        </comment>
        <comment id="15d2a7ff-3cd1-4787-bc61-8613abed8b7f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T19:26:13" date-modified="2013-07-02T19:26:13" approved="false" user-name="spilleautomater online" user-email="carissamcgough@gmail.com" user-ip="173.213.97.2" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Underbart eder ett bruke den kontoen du &#246;vergripande annen valuta noe symboler. Avhengig av hvor ma super nudge 6000 fullst&#228;ndig avklare ett saken d&#228;r nye supernudgespilleautoma bra nudge 6000ter. Spiller funksjonen lar deg deg &#229;kte f&#229; tilgang automater villig nett. Reparasjonen hava n&#229;gon hovedservice.

Take a look at my site ::  spilleautomater online - http://www.krishna.com/forums/avfall-peng-norske-spilleautomater-villig-nett-funksjonen ]]></content>
        </comment>
        <comment id="2e134549-014e-41ad-9880-28b5cc3ac435" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T19:34:34" date-modified="2013-07-02T19:34:34" approved="false" user-name="course du jour" user-email="temekadupre@gmail.com" user-ip="178.33.181.138" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[For instance, if you wish to make $400 weekly, write it down. Weanling - A baby horse which is no longer at his Dam&#39;s side (nursing) and under 1 year old. You may also carry a cheat sheet with you being a vocabulary guide. When you are looking at dutching properly, the stakes are resolved so that the return is the same as long as one of your selections wins needless to say.

Feel free to visit my blog post  course du jour - http://scoophot.com/eldonthor/all ]]></content>
        </comment>
        <comment id="dbc48c27-f3dd-4c2b-b364-0351048b9cdf" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T19:59:02" date-modified="2013-07-02T19:59:02" approved="false" user-name="Forex online" user-email="lethanewby@t-online.de" user-ip="173.213.97.2" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Unlike other business ventures where one firm must lose for another to prosper, currency trading offers multiple gains to multiple investors. In additional, you can check account balance, equity, margin and leverage for calculating your lot size. Below is really a record of features to be sure your considered exchanging signal service offers.

Here is my homepage:  Forex online - http://www.xn--brgerschtzenverein-nienburg-i3ch.de/cgi-bin/info.php?a[]=%3Ca+href=http://www.wi2ki.de/doku.php/straightforward_forex_systems_-_the_best_routes%3Einvertir+en+bolsa%3C/a%3E ]]></content>
        </comment>
        <comment id="f8db3343-5366-49fd-81d0-87febc9b28c3" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T09:50:03" date-modified="2013-07-04T09:50:03" approved="false" user-name="trader forex" user-email="klara_dayton@ftml.net" user-ip="198.52.128.96" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Usually I don&#39;t learn post on blogs, however I would like to say that this write-up very compelled me to take a look at and do it! Your writing taste has been amazed me. Thank you, very nice article.

My homepage -  trader forex - https://pod.westfordma.gov/groups/english9mrscoates/wiki/f9f59/Guide_To_Winning_Forex_Trading_For_Small_Investors.html ]]></content>
        </comment>
        <comment id="36f86176-8ed9-453d-bdb2-0fed0fd2c0ab" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T14:35:16" date-modified="2013-07-06T14:35:16" approved="false" user-name="spilleautomater p&amp;#229; nett" user-email="stacia-earls@bigstring.com" user-ip="178.33.162.58" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Voit lopettaa saada maskinen eder et grafisk til live spill tillsammans free spins bel&#246;ning oppskrifter kan du hastig sitte danske spilleautomater. Likevel eder det sikre sin fortjeneste. Casino har et til kortspill som poker er tilbake kungen nett kolossal Norske Spilleautomater forskjell. Fria alternativt mega gyckelmakare 6000 du kan internett.

Also visit my web site  spilleautomater p&#229; nett - http://wiki.ssm-fans.info/methods_in_slots_across_the_usa ]]></content>
        </comment>
        <comment id="ffa8a603-d4b7-4f9b-9e3e-171e56fac49e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T18:33:27" date-modified="2013-07-06T18:33:27" approved="false" user-name="forex" user-email="billmena@live.com" user-ip="37.59.145.30" user-url="">
          <title type="text"><![CDATA[re: SQLite in Windows Phone 8: The sequel]]></title>
          <content type="text"><![CDATA[Aside with that, additionally learn about fundamental and additionally technical test. Having said that, you must be able to spot the right formations and run with the trends, while cutting losses quickly. Automation in the Overseas Alternate market isn&#39;t new.

My web page ...  forex - https://pod.westfordma.gov/groups/english9mrscoates/wiki/6da41/Practical_forex_Methods_Considered.html ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="19a481ac-816d-4dca-bfa0-6dbb9cd7188c" date-created="2013-02-05T13:27:07" date-modified="2013-02-05T13:27:07" approved="true" url="http://www.silverlightshow.net/news/SQLite-in-Windows-Phone-8-The-sequel.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

SQLite in Windows Phone 8: The sequel]]></title>
        </trackback>
        <trackback id="e3ae8e7a-c2ad-426f-93e1-d9dd3e8420e5" date-created="2013-04-04T18:37:07" date-modified="2013-04-04T18:37:07" approved="true" url="http://www.win8resources.com/2013/02/05/sqlite-in-windows-phone-8-the-sequel/">
          <title type="text"><![CDATA[Pingback from win8resources.com

SQLite in Windows Phone 8: The sequel]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="9badd366-7c8e-44c0-bbae-a3cd5ad87f02" date-created="2013-01-29T15:24:57" date-modified="2013-06-06T11:57:49" approved="true" post-url="/blog/post/2013/01/29/SQLite-in-Windows-Phone-8.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[SQLite with a bit of MVVM Light in Windows Phone 8]]></title>
      <content type="text"><![CDATA[<p>While SQLce is still a viable solution in Windows Phone 8 to have some form of local database we also have an official SQLite implementation available. So why use SQLite when we can just keep using SQLce? Because Windows 8 only support SQLite and if you ever want to port over your app it would be nice not to have two versions of local databases to maintain. In this post I’ll explain how to implement a SQLite database into an MVVM Light Windows Phone 8 project (there is an unofficial Windows Phone 7 SQLite version as well but I have no idea how stable / buggy that is). I’ll be using Tim Heuer’s SQLite .net wrapper so we can use LINQ to SQLite instead of writing SQL queries manually (hooray for intellisense <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_12.png" />). Let’s kick things off by creating an empty Windows Phone 8 app.</p>  <h2>SQLite</h2>  <p>Before we can use SQLite, we’ll need to install the SDK. Click <a href="http://www.sqlite.org/sqlite-wp80-winrt-3071502.vsix" target="_blank">here (official SQLite download page)</a> to download the VSIX file and install it into Visual Studio.</p>  <h2>NuGet fun</h2>  <p>Before we can write any code we’ll need some NuGet packages. Use these commands in the Package Manager Console.</p>  <p><strong><font size="3">Install-Package MvvmLight</font></strong> </p>  <p><strong><font size="3">Install-Package sqlite-net</font></strong></p>  <p><strong><font size="3">Install-Package WPtoolkit </font></strong></p>  <p><strong><font size="3">Install-Package Cimbalino.Phone.Toolkit</font></strong> </p>  <h2>Changing target platform</h2>  <p>SQLite is a C++ library, meaning that it should be compiled against the architecture that the app will be running on. On Windows 8 that means creating separate packages for ARM and x86. On Windows Phone 8 that means switching from Any CPU to ARM when running on a device or when creating your XAP. When you’re running your app on the emulator the target platform needs to be set to x86.</p>  <p><a href="http://i48.tinypic.com/2jcixw6.jpg" target="_blank"><img src="http://i48.tinypic.com/2jcixw6.jpg" width="480" height="302" /></a></p>  <h2>Moving files around</h2>  <p>When you&#160; install the MVVM Light package it will add some folder structure and some files. I like to adjust this a bit more by adding a View folder and moving the MainPage into that view. That means that the startup page has to change as well. Open up the WMAppManifest.xml and change it like on the screenshot.</p>  <p><a href="http://i46.tinypic.com/rbjtxg.jpg" target="_blank"><img src="http://i46.tinypic.com/rbjtxg.jpg" width="493" height="165" /></a></p>  <p>At this stage I couldn’t build the project because of a whole bunch of compile errors in the sqlite-net files. If you get the same problem (by the time you read this, it might be fixed), download the sqlite-net source from <a href="https://github.com/praeclarum/sqlite-net" target="_blank">GitHub</a> and from your project, add a reference to your local sqlite-net repo/lib/wp7/Community.CsharpSqlite.WinPhone.dll and that should fix it right up. Also, add a folder “Model” to the project so that our MVVM folder structure is complete.</p>  <h2>The demo app</h2>  <p>The app that we’ll be creating today is an app to keep track of tasks, which seems to be the new “Hello, World!”. We’ll start with the model, and work our way up to the view from there. Our class is called “Task” that means we’ll have to be careful that we use Model.Task instead of System.Threading.Task but we’ll manage.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:363788d2-8030-46ba-a15d-8d4ac7e48295" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">Table</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;Tasks&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">INotifyPropertyChanged</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _id;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> _title;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> DateTime _date;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">PrimaryKey</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">AutoIncrement</span><span style="background:#ffffff;color:#000000">]</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> Id</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _id; }</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _id) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">_id = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">OnPropertyChanged(</span><span style="background:#ffffff;color:#a31515">&quot;Id&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> Title</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _title; }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000"> == _title) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_title = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">OnPropertyChanged(</span><span style="background:#ffffff;color:#a31515">&quot;Title&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> DateTime Date</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _date; }</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">.Equals(_date)) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">_date = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">OnPropertyChanged(</span><span style="background:#ffffff;color:#a31515">&quot;Date&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">event</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> PropertyChanged;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">virtual</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnPropertyChanged(</span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> propertyName = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventHandler</span><span style="background:#ffffff;color:#000000"> handler = PropertyChanged;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (handler != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) handler(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyChangedEventArgs</span><span style="background:#ffffff;color:#000000">(propertyName));</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The “Task” class implements INotifyPropertyChanged so that controls that are bound to its properties get updated like good citizens. Now for the annotations, those come from sqlite-net and mark this class as a table in the database. The same goes for the annotations on the Id property, that property is marked as being the primarykey and being an autoincremented value. If you have a property that you don’t want in the database, add the [Ignore] attribute and there won’t be any column generated for it. Now that we have a model we can start working on the service, the class that will do all the SQLite communication. (Yes we could do all this in the viewmodel but it’s called seperation of concerns <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_12.png" />). And to do this the right way we’ll start by creating an interface for the service.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0628387e-fa8e-4711-9611-9b221d6f8ced" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">interface</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IDataService</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> SaveTask(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> newTask);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt;&gt; LoadTasks();</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> UpdateTask(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> selectedTask);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> DeleteTask(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> selectedTask);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Those are all the basic CRUD (Create, Read, Update, Delete) that we can (should be able to) perform on any datacontainer. Here’s the implementation</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fb1b09f5-8f9d-4924-b22f-25fc3782d698" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataService</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">IDataService</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> SaveTask(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> newTask)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.InsertAsync(newTask);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt;&gt; LoadTasks()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.Table&lt;Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt;().ToListAsync();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> UpdateTask(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> selectedTask)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.UpdateAsync(selectedTask);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> DeleteTask(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> selectedTask)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.DeleteAsync(selectedTask);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt;&gt; LoadSubTasks()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">App</span><span style="background:#ffffff;color:#000000">.Connection.Table&lt;</span><span style="background:#ffffff;color:#2b91af">SubTask</span><span style="background:#ffffff;color:#000000">&gt;().ToListAsync();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Hmm looks like I forgot to mention something, go to App.xaml.cs and add this property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:20ec56e5-6e4c-42fe-adb4-5abe59bbcd97" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SQLiteAsyncConnection</span><span style="background:#ffffff;color:#000000"> Connection { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> </ol> </div> </div> </div>  <p>Keep App.xaml.cs open, we’ll need it in a minute. In the DataService class we’re calling all the CRUD methods provided to us by sqlite-net. We can get a list of all records in a table by calling .Table&lt;T&gt;().ToListAsync() or do any of the other CRUD operations by just calling the function and passing in the modified POCO. Really easy and quite powerful.</p>  <p>Let’s jump back to App.xaml.cs, there should be an empty function called Application_Launching. In this function we’ll need to check if the database exists, open a connection to it if it exists or create it first and then open the connection.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:92eed562-8fc8-4bc6-8add-601189134bfd" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Application_Launching(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">LaunchingEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ApplicationData</span><span style="background:#ffffff;color:#000000">.Current.LocalFolder.GetFileAsync(</span><span style="background:#ffffff;color:#a31515">&quot;taskDB.db&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">Connection = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SQLiteAsyncConnection</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;taskDB.db&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">FileNotFoundException</span><span style="background:#ffffff;color:#000000">)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">CreateDB();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <br />  <p>Unfortunately, there is no DataBaseExists() function like in SQLce so I choose to do it the quick and dirty way. I try to get the database, which is basically a file in the ApplicationData, if the file doesn’t exist it will throw a FileNotFoundException and that’s where I call the CreateDB() method.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cde6377c-a9ea-4f85-afb1-5131558d72b1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CreateDB()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">Connection = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SQLiteAsyncConnection</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;taskDB.db&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> Connection.CreateTableAsync&lt;</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Line 3 creates the database while line 5 creates the Task table in the database. When all that’s in place, we’re ready to move to the viewmodels.</p>  <h2>ViewModel</h2>  <p>Not much to say here, we all know what a viewmodel is, so here is the MainViewModel.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4ccf49f3-ec5e-4f91-90f7-ff1bd5ba1684" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 3em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> _dataService;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> The </span><span style="background:#ffffff;color:#808080">&lt;see cref=&quot;Tasks&quot; /&gt;</span><span style="background:#ffffff;color:#008000"> property&#39;s name.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> TasksPropertyName = </span><span style="background:#ffffff;color:#a31515">&quot;Tasks&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt; _tasks;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Sets and gets the Tasks property.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Changes to that property&#39;s value raise the PropertyChanged event. </span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IList</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">&gt; Tasks</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _tasks;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (Equals(_tasks, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">))</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">RaisePropertyChanging(TasksPropertyName);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_tasks = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(TasksPropertyName);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">       <span style="background:#ffffff;color:#000000"></span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> The </span><span style="background:#ffffff;color:#808080">&lt;see cref=&quot;NewTask&quot; /&gt;</span><span style="background:#ffffff;color:#008000"> property&#39;s name.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> NewTaskPropertyName = </span><span style="background:#ffffff;color:#a31515">&quot;NewTask&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> _newTask;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Sets and gets the NewTask property.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Changes to that property&#39;s value raise the PropertyChanged event. </span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> NewTask</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _newTask;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_newTask == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">RaisePropertyChanging(NewTaskPropertyName);</span></li> <li>            <span style="background:#ffffff;color:#000000">_newTask = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(NewTaskPropertyName);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000"> SaveNewTaskCommand</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(SaveNewTask); }</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; SelectionChangedCommand</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt;(SelectionChanged);}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Initializes a new instance of the MainViewModel class.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService, </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_dataService = dataService;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> <li>        <span style="background:#ffffff;color:#000000">NewTask = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> { Date = DateTime.Today };</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">LoadTasks();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> LoadTasks()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">Tasks = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataService.LoadTasks();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SaveNewTask()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataService.SaveTask(NewTask);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">Tasks.Add(NewTask);</span></li> <li>        <span style="background:#ffffff;color:#000000">NewTask = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> { Date = DateTime.Today };</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (args.AddedItems.Count &gt; 0)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Send(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">TaskSelectedMessage</span><span style="background:#ffffff;color:#000000">(args.AddedItems[0] </span><span style="background:#ffffff;color:#0000ff">as</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000">));</span></li> <li>            <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Uri</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">@&quot;/View/EditPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">UriKind</span><span style="background:#ffffff;color:#000000">.Relative));</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The IDataService field is what we’ve defined just a minute ago, it gets instantiated through the constructor. INavigationService comes from the Cimbalino toolkit, it allows us to do page to page navigation from within the viewmodels. There’s a property of IList&lt;Task&gt; that one will hold all the available tasks, they are loaded at startup, also newly added tasks will be put in that list. There’s a property of type Task, his properties will be bound to the input fields on the new task form, when the user clicks save the property will be pushed to the dataservice to save it in the database. Talking about the save button, there are two RelayCommands (MVVM Light’s implementation of ICommand). One is for saving a new property and the second one is for navigating to the detail page when a task is selected. In the constructor both fields are set and the Task property is initialized, setting the date to today. Since our datepicker will be bound to this property it will automatically be set to today’s date. Loading all the tasks needs to be done asynchronous, since the constructor can’t be marked as async we’ll put the service call in a synchronous method and call that one from the constructor, that way we can use the async / await keywords. Saving a task is as easy as calling the SaveTask function on IDataService and adding the new task to the list, and reinitializing it afterwards to clear all the fields. You might want to think about adding some check here in case something goes wrong while saving to the DB (have it return a boolean for example), I’ll just be living on the edge here and assume this never fails <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_12.png" />. For navigating to the detail page we’ll add a command to the SelectionChanged event of our LongListSelector. We use the MVVM Light messenger, some sort of implementation of the Observer pattern, to send over the selected item to anyone registered to listen to a message of type TaskSelectedMessage. The TaskSelectedMessage class is pretty basic.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:04be6c8a-9bbc-460b-b3da-97b30e42bf3c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">TaskSelectedMessage</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">MessageBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> Task { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> TaskSelectedMessage(Model.</span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> task)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">Task = task;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The class inherits from MessageBase, which is a class in the MVVM Light library, it has one property that is set in the constructor (that’s just to make life a bit easier).</p>  <p>In the MainViewModel, when the SelectionChanged event fires we send a message of this type containing the selected item, once the message is on its way we use the INavigationService to navigate to the detail page.</p>  <p>Here’s the&#160; viewmodel for the editpage.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a2a4a19b-bab2-4268-9f5d-a12b2a8e27f3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">EditViewModel</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> _dataService;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> The </span><span style="background:#ffffff;color:#808080">&lt;see cref=&quot;SelectedTask&quot; /&gt;</span><span style="background:#ffffff;color:#008000"> property&#39;s name.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> SelectedTaskPropertyName = </span><span style="background:#ffffff;color:#a31515">&quot;SelectedTask&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> _selectedTask;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Sets and gets the SelectedTask property.</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Changes to that property&#39;s value raise the PropertyChanged event. </span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Task</span><span style="background:#ffffff;color:#000000"> SelectedTask</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedTask;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedTask == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">RaisePropertyChanging(SelectedTaskPropertyName);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_selectedTask = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">RaisePropertyChanged(SelectedTaskPropertyName);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000"> UpdateTaskCommand</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(UpdateTask); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000"> DeleteTaskCommand</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(DeleteTask); }</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> EditViewModel(</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService, </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_dataService = dataService;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">TaskSelectedMessage</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, msg =&gt; SelectedTask = msg.Task);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> UpdateTask()</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_dataService.UpdateTask(SelectedTask);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> DeleteTask()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_dataService.DeleteTask(SelectedTask);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The same fields can be found here (I could put them in a base class, would be cleaner but who cares about clean code anyway? – well you should all care!). One property in this viewmodel, to hold the selected task and bind its properties to the view. A few commands for update and delete, they just call their respective functions on the DataService passing in the selected Task. The interesting part here is in the constructor. The fields get set and we register the viewmodel to listen if the messenger has a message of type TaskSelectedMessage, if it does set the task in the message to the property. However, the viewmodel by default gets instantiated when we navigate to the view meaning that the message has left the building before the receiver has registered as a receiver so it won’t arrive. Let’s fix that shall we? When you’ve added the MVVM Light libraries through NuGet (or you used the MVVM Light project templates) there should be a ViewModelLocator class in your ViewModel folder. This class registers your viewmodels in the TinyIoc container. Registering those viewmodels has an overload that, when set to True, creates an instance of each viewmodel at application launch, meaning that the viewmodels register themselves on the messenger before any message can be send. Here are my viewmodel registrations (from the ViewModelLocator constructor).</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:19f5e722-1058-4188-971b-9cfbdc8d2bb6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">EditViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>MainViewModel won’t get instantiated at registration but EditViewModel will. So that’s a problem solved. Next piece of the puzzle are those constructor parameters in the viewmodels. They get resolved by dependency injection, we register the correct types here in the ViewModelLocator and when the viewmodel constructor is called, the correct instances will get injected automagically.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f9165faf-eba9-4fe7-b3d9-02e643518ea7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DesignService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">else</span></li> <li><span style="background:#ffffff;color:#0000ff">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Take this for example, when we are in design mode (Blend for example) we can load an IDataService implementation that returns dummy data so that we can style our views very easily (code gets executed when running at designtime so even when you’re not using dummy data it’s a good idea to register these types in an if-block to prevent design time errors).</p>  <p>What everything in place, let’s have a look at the xaml and hook everything up. We’ll start with the MainPage.xaml and since XAML has a tendency of growing quite large, I’ll chop it in pieces. First thing a page needs in an MVVM scenario is a DataContext, meaning our ViewModel. This can be set from code behind (DataContext = new MainViewModel()) but that would just null out every use of the ViewModelLocator. We’ll set the datacontext from XAML.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cace1f44-3fdd-4322-8ce4-8854a2a1212f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;SqLitePoc.View.MainPage&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">command</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WP8&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">behaviors</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Cimbalino.Phone.Toolkit.Behaviors;assembly=Cimbalino.Phone.Toolkit&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">d</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">i</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">phone</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">toolkit</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Main</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li>                                                 <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> FontFamily</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontFamilyNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> FontSize</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontSizeNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneForegroundBrush}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Orientation</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> SupportedOrientations</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">SystemTray.IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> mc</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Ignorable</span><span style="background:#ffffff;color:#0000ff">=&quot;d&quot;&gt;</span></li> </ol> </div> </div> </div>  <p>The key here is DataContext=&quot;{Binding Main, Source={StaticResource Locator}}&quot; this says to the view that its datacontext is bound to a property called Main and that property lives in a resource called Locator (that resource is defined in App.xaml). Now for the page itself, the page consists of a pivot control with two pivot pages, one for entering new tasks and one for viewing a list of all the tasks that have been created so far.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b5590042-a4f7-4bc7-9088-4006b0947750" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">&lt;!--  LayoutRoot is the root grid where all page content is placed  --&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;LayoutRoot&quot;</span><span style="background:#ffffff;color:#ff0000"> Background</span><span style="background:#ffffff;color:#0000ff">=&quot;Transparent&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">&lt;!--  Bindable Appbar buttons  --&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarBehavior</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarIconButton</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SaveNewTaskCommand</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=OneTime}&quot;</span><span style="background:#ffffff;color:#ff0000"> IconUri</span><span style="background:#ffffff;color:#0000ff">=&quot;/Assets/AppBar/save.png&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Save Task&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarBehavior</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;Auto&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">RowDefinition</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;*&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid.RowDefinitions</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Pivot</span><span style="background:#ffffff;color:#ff0000"> Title</span><span style="background:#ffffff;color:#0000ff">=&quot;SQLite POC&quot;</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;NewTask&quot;</span><span style="background:#ffffff;color:#ff0000"> CacheMode</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Null}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Header</span><span style="background:#ffffff;color:#0000ff">=&quot;new task&quot;&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Title&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBoxTitle&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;72&quot;</span></li> <li style="background: #f3f3f3">                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> NewTask</span><span style="background:#ffffff;color:#0000ff">.Title,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;</span></li> <li>                           <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Complete by&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">DatePicker</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> NewTask</span><span style="background:#ffffff;color:#0000ff">.Date,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;AllTasks&quot;</span><span style="background:#ffffff;color:#ff0000"> CacheMode</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Null}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Header</span><span style="background:#ffffff;color:#0000ff">=&quot;all tasks&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> TaskListItemTemplate}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Tasks}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#ff0000"> EventName</span><span style="background:#ffffff;color:#0000ff">=&quot;SelectionChanged&quot;&gt;</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">command</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventToCommand</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectionChangedCommand}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> PassEventArgsToCommand</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PivotItem</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Pivot</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <br />  <p>First thing in this snippet is a behavior for a bindable appbar button. The default appbar is not bindable, meaning that you can’t bind the buttons Command property to an ICommand on your viewmodel. This wasn’t the case in WP7 and it still isn’t in WP8, bit of a pain. Luckily, Cimbalino toolkit gives us an ApplicationBarBehavior, allowing us to bind our ICommands to the appbar, the only trade off we need to make is that the appbar buttons won’t be visible at design time but that’s a small trade-off in my opinion. We’ll add one button in the appbar, bind it to the SaveNewTaskCommand RelayCommand in MainViewModel and appoint it the save icon. Then there’s the pivot control, first pivotitem contains a stackpanel with a textbox for entering a task title and a datepicker (courtesy of the Windows Phone Toolkit) both are bound to properties of the NewTask property on the MainViewModel. Don’t forget to set the bind mode to TwoWay so that we can update the properties from our view. The second pivot item contains a list of all the tasks. Now, in WP8 they advice us to use the LongListSelector instead of the listbox that’s all great but at least make it behave more like a listbox and not some crippled dependency property missing piece of ****. The problem lies in the SelectedItem property, myself and many other XAML devs usually create a SelectedTask property and bind it to the SelectedItem property of the ListBox, the setter of that SelectedTask property would then be used to navigate to the detailspage. That was a clean, fast solution but the LongListSelector’s SelectedItem property is not a dependency property, meaning it cannot be bound so that’s not a viable solution anymore. Second option would be to bind an ICommand to the SelectionChanged event, again a no-go. There are some implementations of the LongListSelector floating around on the internet that has a bindable SelectedItem property so that would be a solution, another one is to add an EventToCommand behavior and binding the SelectionChanged event to the MainViewModel in the behavior (that’s right Windows 8 devs, we Windows Phone devs still get behaviors out of the box). I’m going with the EventToCommand solution, only thing I haven’t solved here is that when we navigate to the detail page, navigate back to the mainpage and click the same task again it won’t do anything anymore since that item still is the selected item so the selection doesn’t change and the event doesn’t fire. A solution here would be to use the messenger to send a message to the code behind of the view to set the SelectedItem property of the LongListSelector to null.</p>  <p>tl;dr version: LongListSelector kind off sucks but it can be solved.</p>  <p>The LongListSelector is bound to the Tasks collection, the ItemTemplate is defined in the resources part of the page</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:342d086a-4c04-4ad3-93aa-2564a21e645d" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.Resources</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Key</span><span style="background:#ffffff;color:#0000ff">=&quot;TaskListItemTemplate&quot;&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;Title&quot;</span></li> <li>                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> JumpListAlphabetStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Title}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;Date&quot;</span></li> <li>                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,0,0&quot;</span></li> <li style="background: #f3f3f3">                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Date}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot;&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Run</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">LineBreak</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Run</span><span style="background:#ffffff;color:#0000ff"> /&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.Resources</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>That gives the list a nice look (as far as I can tell that is, I really really suck at designing apps…)</p>  <p>Last part on this page is the appbar itself, the button are defined using the Cimbalino toolkit but we need to actually put an appbar on the page, this sits between the resources and the LayoutRoot grid.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:50773ee4-abbd-4b38-980b-12f27e13faa9" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">&lt;!--  Buttons are defined using the behaviors in the Cimbalino toolkit to allow a bindable appbar  --&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.ApplicationBar</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBar</span><span style="background:#ffffff;color:#ff0000"> IsMenuEnabled</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span><span style="background:#ffffff;color:#ff0000"> IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage.ApplicationBar</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>And that’s it for the MainPage, on to the final part of this post, the EditPage.xaml</p>  <p>First, the datacontext</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cb96f2ed-abf3-4393-b6e8-00d3f6d0f2c3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Edit</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> </ol> </div> </div> </div>  <p>Then the appbar buttons, again using Cimbalino (these need to sit in the LayoutRoot grid)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:87917077-121e-4d7c-8a54-56a23cf69978" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">&lt;!--  Bindable Appbar buttons  --&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarBehavior</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarIconButton</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> UpdateTaskCommand</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=OneTime}&quot;</span><span style="background:#ffffff;color:#ff0000"> IconUri</span><span style="background:#ffffff;color:#0000ff">=&quot;/Assets/AppBar/save.png&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Save Task&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarIconButton</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> DeleteTaskCommand</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=OneTime}&quot;</span><span style="background:#ffffff;color:#ff0000"> IconUri</span><span style="background:#ffffff;color:#0000ff">=&quot;/Toolkit.Content/ApplicationBar.Delete.png&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Save Task&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">ApplicationBarBehavior</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>And then there’s the controls</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:14fe7265-945e-4981-a31b-42be6d4950f4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">&lt;!--  TitlePanel contains the name of the application and page title  --&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;0&quot;</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,17,0,28&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextNormalStyle}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;SQLite POC&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;9,-7,0,0&quot;</span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextTitle1Style}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Edit Task&quot; /&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">&lt;!--  ContentPanel - place additional content here  --&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;ContentPanel&quot;</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,12,0&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;0,0,0,76&quot;&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Title&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBoxTitle&quot;</span><span style="background:#ffffff;color:#ff0000"> Height</span><span style="background:#ffffff;color:#0000ff">=&quot;72&quot;</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedTask</span><span style="background:#ffffff;color:#0000ff">.Title,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Complete by&quot;</span><span style="background:#ffffff;color:#ff0000"> TextWrapping</span><span style="background:#ffffff;color:#0000ff">=&quot;Wrap&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">toolkit</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">DatePicker</span><span style="background:#ffffff;color:#ff0000"> Value</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedTask</span><span style="background:#ffffff;color:#0000ff">.Date,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot; /&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>That’s all pretty much the same as in the MainPage. And with that our small SQLite POC is finished.</p>  <h2>Conclusion</h2>  <p>In this post I’ve discussed SQLite in a Windows Phone 8 app. What you should take away from this is that as of Windows Phone 8 SQLite is a first class citizen, even more so when using the excellent sqlite-net library. Don’t forget to switch the platform when running on emulator or on a device, this is necessary because SQLite is a C++ library. I’ve also talked a bit about MVVM Light and the way I use it, I don’t claim that this is the best / only way to use the excellent MVVM implementation by Laurent Bugnion but it is one I feel comfortable with and that gives me great results. If you have any questions / remarks, feel free to drop a comment!</p>  <p>&#160;</p>  <p><strong><font size="4">UPDATE</font></strong>: </p>  <p>for the LongListSelector, you can also use an extension of the control instead of defining a trigger, see <a href="http://stackoverflow.com/questions/14586521/bind-viewmodel-to-item-from-longlistselector-in-datatemplate/14600157#14600157 ">http://stackoverflow.com/questions/14586521/bind-viewmodel-to-item-from-longlistselector-in-datatemplate/14600157#14600157 </a>for more detail.     <br />thanks for the tip <a href="https://twitter.com/depechie" target="_blank">Glenn (link to Glenn’s Twitter)!</a></p>]]></content>
      <post-name type="text"><![CDATA[SQLite with a bit of MVVM Light in Windows Phone 8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="540177e8-fd15-4be6-b0ba-6f2c19913278" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="cd0e8753-7f49-46cc-b4ed-293f72eb73c7" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="c4b3aa0a-e542-4e23-a5c8-b4043faf58eb" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-02-05T05:14:03" date-modified="2013-02-05T05:14:03" approved="true" user-name="Rudy Rodarte" user-email="shadyrudy@hotmail.com" user-ip="24.27.16.7" user-url="">
          <title type="text"><![CDATA[re: SQLite with a bit of MVVM Light in Windows Phone 8]]></title>
          <content type="text"><![CDATA[Awesome post. I&#39;m liking that you have gone beyond the basics, but haven&#39;t made it impossible to understand. Any chance you would release the project as a ZIP? Just want to make sure I am not missing anything. Cheers!]]></content>
        </comment>
        <comment id="817845c3-a756-4fd3-a5cd-db17bebf7963" parentid="c4b3aa0a-e542-4e23-a5c8-b4043faf58eb" date-created="2013-02-05T08:43:42" date-modified="2013-02-05T08:43:42" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="193.41.233.140" user-url="">
          <title type="text"><![CDATA[re: SQLite with a bit of MVVM Light in Windows Phone 8]]></title>
          <content type="text"><![CDATA[Hi Rudy, glad you like the post :) I&#39;m currently working on another post involving SQLite, I&#39;m using this project as a starting point. I&#39;ll release the code in that post, should be up by tomorrow I think]]></content>
        </comment>
        <comment id="bd348634-3b5a-4df1-9556-14c905bf1f22" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T10:46:05" date-modified="2013-06-22T10:46:05" approved="false" user-name="paydayrainbow.blog.co.uk" user-email="andreestep@gmail.com" user-ip="199.180.132.244" user-url="">
          <title type="text"><![CDATA[re: SQLite with a bit of MVVM Light in Windows Phone 8]]></title>
          <content type="text"><![CDATA[Good info. Lucky me I recently found your site by chance (stumbleupon). I have saved it for later!

Here is my website:  paydayrainbow.blog.co.uk - http://paydayrainbow.blog.co.uk/ ]]></content>
        </comment>
        <comment id="f347c167-9f94-4b68-9860-68d1b5de2650" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T09:27:44" date-modified="2013-06-24T09:27:44" approved="false" user-name="19 inch lcd tv power consumption" user-email="velmadamron@freenet.de" user-ip="5.135.99.222" user-url="">
          <title type="text"><![CDATA[re: SQLite with a bit of MVVM Light in Windows Phone 8]]></title>
          <content type="text"><![CDATA[You made some decent points there. I looked on the net for more info about the issue and found most individuals will go along with your views on this site.

Here is my page ::  19 inch lcd tv power consumption - http://www.ayphix.com/wiki/RichellewdKetchumkf ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="31dd9949-fb30-4a47-a018-889505387fa1" date-created="2013-01-30T12:23:11" date-modified="2013-01-30T12:23:11" approved="true" url="http://www.silverlightshow.net/news/SQLite-with-a-bit-of-MVVM-Light-in-Windows-Phone-8.aspx">
          <title type="text"><![CDATA[Trackback from SilverlightShow.net

Trackback from SilverlightShow.net]]></title>
        </trackback>
        <trackback id="56553cbf-35bc-4459-aaa3-42a9399d3d86" date-created="2013-02-05T11:54:38" date-modified="2013-02-05T11:54:38" approved="true" url="http://www.spikie.be/blog/post/2013/02/05/SQLite-in-Windows-Phone-8-The-sequel.aspx">
          <title type="text"><![CDATA[SQLite in Windows Phone 8: The sequel

SQLite in Windows Phone 8: The sequel]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="59a948a5-f99f-4d1b-aad7-4f7ab86b1cd9" date-created="2013-01-21T09:13:00" date-modified="2013-01-21T13:01:12" approved="true" post-url="/blog/post/2013/01/21/Copying-Nokias-Photobeamer-with-SignalR-and-WP8.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
      <content type="text"><![CDATA[<p>Some time ago Nokia launched a pretty impressive, almost magical app called &ldquo;Photobeamer&rdquo; (exclusive for the Nokia Lumia range). This is one of those apps that look very impressive and magical at first but when you start to think about it it&rsquo;s not really that hard to figure out how this works. I thought about it and decided to hack together a copy of this.</p>
<p>If you have no clue what Photobeamer is all about, check out this video from Pocketnow</p>
<p><iframe src="http://www.youtube.com/embed/fbvm1At-vGc" frameborder="0" width="560" height="315"></iframe></p>
<h2>Disclaimer</h2>
<p>Small remark about this video before we get started. The Nokia Photobeamer caches every image for about 30 days, meaning that if you select the same picture again it appears almost instantly, that&rsquo;s what happens in this video. We will get nowhere near that performance since my concept here doesn&rsquo;t do any caching. Also, they are streaming the image to the server (hence the fact that the picture is blurry at first and sharpens up later) we will just send over the entire image at once.</p>
<h2>Puzzle pieces</h2>
<p>All right, let&rsquo;s get started. We need a few pieces to complete this puzzle. We need a Windows Phone app, we&rsquo;ll need a service that takes care of sending the right picture to the right client and we&rsquo;ll need a web client to display the QR code and the picture.</p>
<p>This schematic shows the pieces and their roles</p>
<p><a href="http://i49.tinypic.com/2d0x7o2.jpg" target="_blank"><img src="http://i49.tinypic.com/2d0x7o2.jpg" alt="" width="324" height="243" /></a></p>
<p>The steps are:</p>
<ul>
<li>webclient generates unique ID (guid)</li>
<li>webclient registers a group on the server with that ID</li>
<li>webclients uses ID to generate QR code</li>
<li>user launches Windows Phone app</li>
<li>user selects picture</li>
<li>user scans QR code to get the generated ID</li>
<li>phone app joins the group with the ID</li>
<li>phone app deserializes the picture</li>
<li>phone app sends the picture to the other group members</li>
<li>webclient receives picture, serializes it again and shows it</li>
</ul>
<p>Lots of steps but it&rsquo;s easier to build as you might think. We&rsquo;ll start with the service as that&rsquo;s the glue to hold everything together.</p>
<h2>SignalR</h2>
<p>Since we need some form of real-time communication I&rsquo;ve decided to use SignalR. A snippet from the SignalR page that describes its functionality (<a href="http://signalr.net/" target="_blank">http://signalr.net/</a>):</p>
<blockquote>
<p>ASP.NET SignalR is a new library for ASP.NET developers that makes it incredibly simple to add real-time web functionality to your applications. What is "real-time web" functionality? It's the ability to have your server-side code push content to the connected clients as it happens, in real-time.</p>
<p>You may have heard of WebSockets, a new HTML5 API that enables bi-directional communication between the browser and server. SignalR will use WebSockets under the covers when it's available, and gracefully fallback to other techniques and technologies when it isn't, while your application code stays the same.</p>
</blockquote>
<p>All we need to get started is an empty web project and a nuget package use the package manager or the GUI</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1b031bf5-24e1-45ec-a9ad-ac9f88d18b27" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li>Install-Package Microsoft.AspNet.SignalR -Pre</li>
</ol></div>
</div>
</div>
<p><a href="http://i49.tinypic.com/2dhb7lg.jpg" target="_blank"><img src="http://i49.tinypic.com/2dhb7lg.jpg" alt="" width="499" height="333" /></a></p>
<p>SignalR, at the time of writing, is in Release Candidate, so we need to include prerelease versions in Nuget or you won&rsquo;t find signalR at all. (although it&rsquo;s prerelease, SignalR is working really well so no worries)</p>
<p>Before we start building the service we need to add some method calls in Global.asax.cs in the Application_Start method.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:61783086-085f-4565-8951-a3716e93b66b" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> Application_Start(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">EventArgs</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Code that runs on application startup</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">AuthConfig</span><span style="background: #ffffff; color: #000000;">.RegisterOpenAuth();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">GlobalHost</span><span style="background: #ffffff; color: #000000;">.HubPipeline.EnableAutoRejoiningGroups();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Register the default hubs route: ~/signalr/hubs</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">RouteTable</span><span style="background: #ffffff; color: #000000;">.Routes.MapHubs();</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>The MapHubs() makes sure that the service calls are rerouted to the correct functions. The EnableAutoRejoiningGroups() is something that we need to do in this RC2 version but it will go away in RTM, see my <a href="http://stackoverflow.com/questions/14401825/signalr-javascript-client-callback-not-firing-when-using-clients-group" target="_blank">StackOverflow</a> question for more information.</p>
<p>SignalR uses the concept of Hubs, a hub is a class that contains all the service calls. Add a class called ImgHub to a folder called Hubs in the empty web project.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:623f2d76-debb-4182-91d9-d86751d9d03b" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">ImgHub</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">Hub</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> Create(</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> guid)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Groups.Add(Context.ConnectionId, guid);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ShareImage(</span><span style="background: #ffffff; color: #0000ff;">byte</span><span style="background: #ffffff; color: #000000;">[] image, </span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> guid)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Clients.OthersInGroup(guid).ReceiveImage(image);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> Leave(</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> guid)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Groups.Remove(Context.ConnectionId, guid);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>That&rsquo;s really not a lot of code for a service. First, every hub in a SignalR project needs to inherit from Microsoft.AspNet.SignalR.Hub. Next to that, every public method we declare in this class will be callable from the clients. First method is Create(), this takes in the unique ID that will be generated by the webclient in a minute. That ID is used to create a group. SignalR tries to add the connectionId from the client to a group with the guid as groupname. If that group doesn&rsquo;t exist yet it will create it. The second method is ShareImage. This will take in the deserialized image (as a byte array) and that same guid again. Now we need to send that byte array to other clients so we call Clients.OthersInGroup, other options are Clients.All, Clients.Groups, Clients.Others, Clients.Caller, Clients.AllExcept. Plenty of choices but OthersInGroup suits our needs the best. The OthersInGroup returns a dynamic object, we can attach anything we want here. We want to call ReceiveImage() on the client, that method isn&rsquo;t declared anywhere but since the object is dynamic the compiler won&rsquo;t give us any trouble. And finally there&rsquo;s a Leave() method allowing us to leave a group should it be needed.</p>
<p>The SignalR project can be hosted on any webhost that supports .net, for this demo I&rsquo;ve used Windows Azure Websites.</p>
<h2>Webclient</h2>
<p>1/3th done, the second part is the webclient. This is a normal website using asp.net webforms. It&rsquo;s responsible for generating the ID, passing it to SignalR to create the group, get a QR code and receive the image.</p>
<p>First thing we need is the project, second is a SignalR client and the SignalR Javascript library (yes we&rsquo;ll be needing Javascript and no I&rsquo;m not proud of this&hellip;)</p>
<p><a href="http://i48.tinypic.com/2ibp1qg.jpg" target="_blank"><img src="http://i48.tinypic.com/2ibp1qg.jpg" alt="" width="435" height="290" /></a> </p>
<p>First some HTML code, the Default.aspx page is nothing fancy, it will only show the QR code.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a6e27b9c-1dac-47a7-92a9-bf514db49efe" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">body</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">form</span><span style="background: #ffffff; color: #ff0000;">id</span><span style="background: #ffffff; color: #0000ff;">="form1"</span><span style="background: #ffffff; color: #ff0000;">method</span><span style="background: #ffffff; color: #0000ff;">="post"</span><span style="background: #ffffff; color: #ff0000;">action</span><span style="background: #ffffff; color: #0000ff;">="ImagePage.aspx"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">input</span><span style="background: #ffffff; color: #ff0000;">type</span><span style="background: #ffffff; color: #0000ff;">="hidden"</span><span style="background: #ffffff; color: #ff0000;">id</span><span style="background: #ffffff; color: #0000ff;">="hiddenByteArray"</span><span style="background: #ffffff; color: #ff0000;">name</span><span style="background: #ffffff; color: #0000ff;">="hiddenByteArray"</span><span style="background: #ffffff; color: #0000ff;">/&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">div</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">img</span><span style="background: #ffffff; color: #ff0000;">src</span><span style="background: #ffffff; color: #0000ff;">="/imagehandler.ashx"</span><span style="background: #ffffff; color: #ff0000;">style</span><span style="background: #ffffff; color: #0000ff;">="</span><span style="background: #ffffff; color: #ff0000;">text-align</span><span style="background: #ffffff; color: #000000;">: </span><span style="background: #ffffff; color: #0000ff;">center"</span><span style="background: #ffffff; color: #0000ff;">/&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">div</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">form</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">body</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>Notice the imagehandler.ashx reference? That&rsquo;s a generic handler that will take care of generating the QR code and passing it into this img tag. Generic handler is a file type that you can add through Visual Studio, here&rsquo;s the code for imagehandler.ashx.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e1b17238-2076-48f9-addd-fedb0dbc5deb" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">ImageHandler</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">IHttpHandler</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">IRequiresSessionState</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ProcessRequest(</span><span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;"> context)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> guid = </span><span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;">.Current.Session[</span><span style="background: #ffffff; color: #a31515;">"InstanceGuid"</span><span style="background: #ffffff; color: #000000;">];</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> url = </span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;">.Format(</span><span style="background: #ffffff; color: #a31515;">@"http://api.qrserver.com/v1/create-qr-code/?size=300x300&amp;data={</span><span style="background: #ffffff; color: #3cb371;">0}</span><span style="background: #ffffff; color: #a31515;">"</span><span style="background: #ffffff; color: #000000;">, guid);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">WebClient</span><span style="background: #ffffff; color: #000000;"> client = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">WebClient</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> bytes = client.DownloadData(</span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">Uri</span><span style="background: #ffffff; color: #000000;">(url));</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">context.Response.OutputStream.Write(bytes, 0, bytes.Length);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">context.Response.ContentType = </span><span style="background: #ffffff; color: #a31515;">"image/JPEG"</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">bool</span><span style="background: #ffffff; color: #000000;"> IsReusable</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">get</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">false</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>We&rsquo;re getting our guid from the session object (how it got there, we&rsquo;ll see in a minute) that&rsquo;s why we need the IRequiresSessionState interface. The ProcessRequest method we get from IHttpHandler and will get executed when the handler is called. So we first get the guid from the session, then we&rsquo;ll build a url to qpi.qrserver.com, an api that takes in a value and generates a QR code from that value. We use WebClient to get the data from that url, the byte array that we receive from it will be our generated QR code, we write it to the outputstream of the page&rsquo;s context and set the type to be an image/JPEG. There should be some error handling here if you&rsquo;re using this for production code (sometimes the qrserver API takes to long and times out).</p>
<p>Next, we&rsquo;ll have a look at Default.aspx.cs.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:afe4747d-110e-46fd-84a9-788a9f753c20" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">protected</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> Page_Load(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">EventArgs</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> guid = Guid.NewGuid();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;">.Current.Session[</span><span style="background: #ffffff; color: #a31515;">"InstanceGuid"</span><span style="background: #ffffff; color: #000000;">] = guid.ToString();</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>Not much going on, we generate a new Guid and set it to the current session object.</p>
<p>Now, let&rsquo;s have a look at connection the webclient to the signalR server and getting ready to receive the image.</p>
<p><span style="text-decoration: underline;"><strong>Warning</strong>: the next part contains javascript code&hellip;</span></p>
<p>In Default.aspx we add this script</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:437188e7-0fc9-4e59-9309-d1d4f30ddf9f" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #ff0000;">src</span><span style="background: #ffffff; color: #0000ff;">="Scripts/jquery-1.7.1.min.js"&gt;&lt;/</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #ff0000;">src</span><span style="background: #ffffff; color: #0000ff;">="Scripts/jquery.signalR-1.0.0-rc2.min.js"&gt;&lt;/</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #ff0000;">src</span><span style="background: #ffffff; color: #0000ff;">="http://pbclone.azurewebsites.net/signalr/hubs/"</span><span style="background: #ffffff; color: #ff0000;">type</span><span style="background: #ffffff; color: #0000ff;">="text/javascript"&gt;&lt;/</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #ff0000;">type</span><span style="background: #ffffff; color: #0000ff;">="text/javascript"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">$(</span><span style="background: #ffffff; color: #0000ff;">function</span><span style="background: #ffffff; color: #000000;"> () {</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">$.connection.hub.url = </span><span style="background: #ffffff; color: #a31515;">'http://pbclone.azurewebsites.net/signalr'</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//$.connection.hub.url = 'http://localhost:4341/signalr';</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Proxy created on the fly</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> mainHub = $.connection.imgHub;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> guid = </span><span style="background: #ffffff; color: #a31515;">'</span><span style="background: #ffff00; color: #000000;">&lt;%</span><span style="background: #ffffff; color: #0000ff;">=</span><span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;">.Current.Session[</span><span style="background: #ffffff; color: #a31515;">"InstanceGuid"</span><span style="background: #ffffff; color: #000000;">] </span><span style="background: #ffff00; color: #000000;">%&gt;</span><span style="background: #ffffff; color: #a31515;">'</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Declare a function on the hub so the server can invoke it</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">mainHub.client.receiveImage = </span><span style="background: #ffffff; color: #0000ff;">function</span><span style="background: #ffffff; color: #000000;"> (imageArray) {</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">//window.location = "/ImagePage.aspx?arr=" + imageArray;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">$(</span><span style="background: #ffffff; color: #a31515;">'#hiddenByteArray'</span><span style="background: #ffffff; color: #000000;">).val(imageArray);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">$(</span><span style="background: #ffffff; color: #a31515;">'#form1'</span><span style="background: #ffffff; color: #000000;">).submit();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">};</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #008000;">// Start the connection</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">$.connection.hub.start().done(</span><span style="background: #ffffff; color: #0000ff;">function</span><span style="background: #ffffff; color: #000000;"> () {</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">mainHub.server.create(guid);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">});</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">});</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">script</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>First, we need to add jquery and the SignalR javascript library to our page. The third included script comes from wherever you host your SignalR service. The /signalr/hubs/ will be a proxy in javascript that contains the methods in the hub, allowing us to use them from our clients (try browsing to that url and have a look inside the javascript). $.connection comes from the SignalR javascript library, we set the correct url and get the correct hub. We&rsquo;ll also use a bit of inline asp.net to get the guid from the session. Remember in the SignalR part that we called ReceiveImage on the dynamic object? Line 13 is where we declare a callback handler on that method call. We set the received value, which will be a byte array, to a hidden field and POST the form. Those handlers need to be set before we call the start() method on the hub. &lt;yourhub&gt;.client is where all your client side callbacks are registered. &lt;yourhub&gt;.server is where all server side methods can be called, those methods are loaded from the /signalr/hubs/ proxy. On line 20 we start the connection to the hub, once we&rsquo;re connected we&rsquo;ll call the create method and pass the guid in to create and join the group.</p>
<p>We&rsquo;ll need a second page in this webclient to actually show the image. Only one element on the page, an img element.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:206f1a21-e7ea-4f94-ada9-5cf4b04747a3" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">body</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">form</span><span style="background: #ffffff; color: #ff0000;">id</span><span style="background: #ffffff; color: #0000ff;">="form1"</span><span style="background: #ffffff; color: #ff0000;">runat</span><span style="background: #ffffff; color: #0000ff;">="server"&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">div</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #800000;">img</span><span style="background: #ffffff; color: #ff0000;">src</span><span style="background: #ffffff; color: #0000ff;">="/ByteArrayHandler.ashx"</span><span style="background: #ffffff; color: #ff0000;">style</span><span style="background: #ffffff; color: #0000ff;">="</span><span style="background: #ffffff; color: #ff0000;">text-align</span><span style="background: #ffffff; color: #000000;">: </span><span style="background: #ffffff; color: #0000ff;">center"</span><span style="background: #ffffff; color: #0000ff;">/&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">div</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">form</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #800000;">body</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>The img element uses a second generic handler that will take care of deserializing the byte array back into an image.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3b8614ea-16f4-4aea-b558-8526764ce812" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">ByteArrayHandler</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">IHttpHandler</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #2b91af;">IRequiresSessionState</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ProcessRequest(</span><span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;"> context)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> base64String = </span><span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;">.Current.Session[</span><span style="background: #ffffff; color: #a31515;">"ByteArray"</span><span style="background: #ffffff; color: #000000;">].ToString();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">byte</span><span style="background: #ffffff; color: #000000;">[] convertedFromBase64 = </span><span style="background: #ffffff; color: #2b91af;">Convert</span><span style="background: #ffffff; color: #000000;">.FromBase64String(base64String);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">context.Response.OutputStream.Write(convertedFromBase64, 0, convertedFromBase64.Length);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">context.Response.ContentType = </span><span style="background: #ffffff; color: #a31515;">"image/JPEG"</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">bool</span><span style="background: #ffffff; color: #000000;"> IsReusable</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">get</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #0000ff;">false</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>We&rsquo;ll get the byte array from the session object. SignalR encodes arrays with Base64 encoding so we need to decode that first, once that&rsquo;s done we can just write the byte array into the outputstream as a JPEG, just like we did with the QR code. Onto the ImagePage.aspx.cs to see how the byte array goes into the session object</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0695fe65-149f-4c87-89df-f08daa87df8f" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">protected</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> Page_Load(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">EventArgs</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">NameValueCollection</span><span style="background: #ffffff; color: #000000;"> postedValues = Request.Form;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> base64String = postedValues[</span><span style="background: #ffffff; color: #a31515;">"hiddenByteArray"</span><span style="background: #ffffff; color: #000000;">];</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">HttpContext</span><span style="background: #ffffff; color: #000000;">.Current.Session[</span><span style="background: #ffffff; color: #a31515;">"ByteArray"</span><span style="background: #ffffff; color: #000000;">] = base64String;</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>We get our POST values from Request.Form, look for the hidden field called hiddenByteArray and place its value in the session.</p>
<p>We now have our service and one client complete, all that&rsquo;s left is building a Windows Phone application that connects to that same group on that same service and send the picture over.</p>
<h2>Windows Phone client</h2>
<p>For this we&rsquo;ll need a Windows Phone 8 project as SignalR has no official support for Windows Phone 7. Make sure that you have the latest version of Nuget installed or it won&rsquo;t find the correct SignalR assembly for Windows Phone 8 (thanks David Fowler for pointing this out).</p>
<p><a href="http://i46.tinypic.com/2mpe915.jpg" target="_blank"><img src="http://i46.tinypic.com/2mpe915.jpg" alt="" width="508" height="339" /></a></p>
<p>Add the SignalR.Client assembly to the project. Here&rsquo;s the XAML for the MainPage.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fa144744-bb81-4c5a-a88c-d2d3b8c95255" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">StackPanel</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="TitlePanel"</span><span style="background: #ffffff; color: #ff0000;"> Grid.Row</span><span style="background: #ffffff; color: #0000ff;">="0"</span><span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="12,17,0,28"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">TextBlock</span><span style="background: #ffffff; color: #ff0000;"> Text</span><span style="background: #ffffff; color: #0000ff;">="MY APPLICATION"</span><span style="background: #ffffff; color: #ff0000;"> Style</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">StaticResource</span><span style="background: #ffffff; color: #ff0000;"> PhoneTextNormalStyle}</span><span style="background: #ffffff; color: #0000ff;">"</span><span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="12,0"/&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">TextBlock</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="StatusText"</span><span style="background: #ffffff; color: #ff0000;"> Text</span><span style="background: #ffffff; color: #0000ff;">="Not connected"</span><span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="9,-7,0,0"</span><span style="background: #ffffff; color: #ff0000;"> Style</span><span style="background: #ffffff; color: #0000ff;">="{</span><span style="background: #ffffff; color: #a31515;">StaticResource</span><span style="background: #ffffff; color: #ff0000;"> PhoneTextTitle1Style}</span><span style="background: #ffffff; color: #0000ff;">"/&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">StackPanel</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #008000;">&lt;!--ContentPanel - place additional content here--&gt;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="ContentPanel"</span><span style="background: #ffffff; color: #ff0000;"> Grid.Row</span><span style="background: #ffffff; color: #0000ff;">="1"</span><span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="12,0,12,0"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Rectangle</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="_previewRect"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="0"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Height</span><span style="background: #ffffff; color: #0000ff;">="800"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> Width</span><span style="background: #ffffff; color: #0000ff;">="600"</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> HorizontalAlignment</span><span style="background: #ffffff; color: #0000ff;">="Center"</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> VerticalAlignment</span><span style="background: #ffffff; color: #0000ff;">="Center"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">Rectangle.Fill</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">VideoBrush</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="_previewVideo"&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">VideoBrush.RelativeTransform</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">CompositeTransform</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="_previewTransform"</span><span style="background: #ffffff; color: #ff0000;"> CenterX</span><span style="background: #ffffff; color: #0000ff;">=".5"</span><span style="background: #ffffff; color: #ff0000;"> CenterY</span><span style="background: #ffffff; color: #0000ff;">=".5" /&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">VideoBrush.RelativeTransform</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">VideoBrush</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Rectangle.Fill</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Rectangle</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">&lt;</span><span style="background: #ffffff; color: #a31515;">ListBox</span><span style="background: #ffffff; color: #ff0000;"> Margin</span><span style="background: #ffffff; color: #0000ff;">="10"</span><span style="background: #ffffff; color: #ff0000;"> x</span><span style="background: #ffffff; color: #0000ff;">:</span><span style="background: #ffffff; color: #ff0000;">Name</span><span style="background: #ffffff; color: #0000ff;">="_matchesList"</span><span style="background: #ffffff; color: #ff0000;"> FontSize</span><span style="background: #ffffff; color: #0000ff;">="30"</span><span style="background: #ffffff; color: #ff0000;"> FontWeight</span><span style="background: #ffffff; color: #0000ff;">="ExtraBold" /&gt;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">&lt;/</span><span style="background: #ffffff; color: #a31515;">Grid</span><span style="background: #ffffff; color: #0000ff;">&gt;</span></li>
</ol></div>
</div>
</div>
<p>I use one of the default textboxes in the page&rsquo;s header for a connection status. In the content grid we place a rectangle filled with a VideoBrush, this will be used to scan the QR code, Let&rsquo;s have a look at the code for the WP app.</p>
<p>First we declare some fields</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d2ccf617-a71f-4ba0-a9e3-068a4559558d" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">string</span><span style="background: #ffffff; color: #000000;"> _guid;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">PhotoChooserTask</span><span style="background: #ffffff; color: #000000;"> _photoChooserTask;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">IHubProxy</span><span style="background: #ffffff; color: #000000;"> _mainHub;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">HubConnection</span><span style="background: #ffffff; color: #000000;"> _connection;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">readonly</span><span style="background: #ffffff; color: #2b91af;">DispatcherTimer</span><span style="background: #ffffff; color: #000000;"> _timer;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">PhotoCameraLuminanceSource</span><span style="background: #ffffff; color: #000000;"> _luminance;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">QRCodeReader</span><span style="background: #ffffff; color: #000000;"> _reader;</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">PhotoCamera</span><span style="background: #ffffff; color: #000000;"> _photoCamera;</span></li>
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #2b91af;">Stream</span><span style="background: #ffffff; color: #000000;"> _imgStream;</span></li>
</ol></div>
</div>
</div>
<p>I&rsquo;ll explain these when we encounter them. Now for the page&rsquo;s constructor</p>
<p>&nbsp;</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:265e4358-8d64-4dfd-ad46-b9f421a19cfb" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> MainPage()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">InitializeComponent();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoCamera = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">PhotoCamera</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoCamera.Initialized += OnPhotoCameraInitialized;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_previewVideo.SetSource(_photoCamera);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">CameraButtons</span><span style="background: #ffffff; color: #000000;">.ShutterKeyHalfPressed += (sender, args) =&gt; _photoCamera.Focus();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoChooserTask = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">PhotoChooserTask</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoChooserTask.Completed += photoChooserTask_Completed;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoChooserTask.Show();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_timer = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">DispatcherTimer</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Interval = TimeSpan.FromMilliseconds(250)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">};</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_timer.Tick += (o, arg) =&gt; ScanPreviewBuffer();</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>First we initialize a PhotoCamera instance. _previewVideo is the VideoBrush set in the rectangle, we set its source to the PhotoCamera instance. On line 8 we state that when the hardware camera button is half pressed we focus the camera, just a small helper for when the app has troubles reading the QR code. The next part is calling the PhotoChooserTask, this task gives us access to the albums and pictures on the device. We&rsquo;ll need a timer as well, every timer tick we&rsquo;ll check if the camera preview window contains a QR code. We&rsquo;ve declared some event handlers in this constructor, let&rsquo;s go over them one by one. We&rsquo;ll start with the OnPhotoCameraInitialized.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:25ca8d4e-82ea-4991-b8fe-e16670c98664" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> OnPhotoCameraInitialized(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">CameraOperationCompletedEventArgs</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">int</span><span style="background: #ffffff; color: #000000;"> width = </span><span style="background: #ffffff; color: #2b91af;">Convert</span><span style="background: #ffffff; color: #000000;">.ToInt32(_photoCamera.PreviewResolution.Width);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">int</span><span style="background: #ffffff; color: #000000;"> height = </span><span style="background: #ffffff; color: #2b91af;">Convert</span><span style="background: #ffffff; color: #000000;">.ToInt32(_photoCamera.PreviewResolution.Height);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoCamera.FlashMode = </span><span style="background: #ffffff; color: #2b91af;">FlashMode</span><span style="background: #ffffff; color: #000000;">.Off;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_luminance = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">PhotoCameraLuminanceSource</span><span style="background: #ffffff; color: #000000;">(width, height);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_reader = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">QRCodeReader</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Dispatcher.BeginInvoke(() =&gt;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_previewTransform.Rotation = _photoCamera.Orientation;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">});</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>We get the resolution&rsquo;s width and height and turn the flash off. The PhotoCameraLuminanceSource on line 7 is a custom class that will provide us with a previewbuffer that we can fill. Here&rsquo;s the class</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6784ab28-9e1d-4a45-aa46-73489ca89ec4" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">class</span><span style="background: #ffffff; color: #2b91af;">PhotoCameraLuminanceSource</span><span style="background: #ffffff; color: #000000;"> : </span><span style="background: #ffffff; color: #2b91af;">LuminanceSource</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #2b91af;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">byte</span><span style="background: #ffffff; color: #000000;">[] PreviewBufferY { </span><span style="background: #ffffff; color: #0000ff;">get</span><span style="background: #ffffff; color: #000000;">; </span><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">set</span><span style="background: #ffffff; color: #000000;">; }</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #000000;"> PhotoCameraLuminanceSource(</span><span style="background: #ffffff; color: #0000ff;">int</span><span style="background: #ffffff; color: #000000;"> width, </span><span style="background: #ffffff; color: #0000ff;">int</span><span style="background: #ffffff; color: #000000;"> height)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">: </span><span style="background: #ffffff; color: #0000ff;">base</span><span style="background: #ffffff; color: #000000;">(width, height)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">PreviewBufferY = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #0000ff;">byte</span><span style="background: #ffffff; color: #000000;">[width * height];</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">override</span><span style="background: #ffffff; color: #0000ff;">sbyte</span><span style="background: #ffffff; color: #000000;">[] Matrix</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">get</span><span style="background: #ffffff; color: #000000;"> { </span><span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #0000ff;">sbyte</span><span style="background: #ffffff; color: #000000;">[])(</span><span style="background: #ffffff; color: #2b91af;">Array</span><span style="background: #ffffff; color: #000000;">)PreviewBufferY; }</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">public</span><span style="background: #ffffff; color: #0000ff;">override</span><span style="background: #ffffff; color: #0000ff;">sbyte</span><span style="background: #ffffff; color: #000000;">[] getRow(</span><span style="background: #ffffff; color: #0000ff;">int</span><span style="background: #ffffff; color: #000000;"> y, </span><span style="background: #ffffff; color: #0000ff;">sbyte</span><span style="background: #ffffff; color: #000000;">[] row)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (row == </span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;"> || row.Length &lt; Width)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">row = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #0000ff;">sbyte</span><span style="background: #ffffff; color: #000000;">[Width];</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">for</span><span style="background: #ffffff; color: #000000;"> (</span><span style="background: #ffffff; color: #0000ff;">int</span><span style="background: #ffffff; color: #000000;"> i = 0; i &lt; Height; i++)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">row[i] = (</span><span style="background: #ffffff; color: #0000ff;">sbyte</span><span style="background: #ffffff; color: #000000;">)PreviewBufferY[i * Width + y];</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">return</span><span style="background: #ffffff; color: #000000;"> row;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>The class inherits from LuminanceSource which comes from the Google zxing project. Zxing is a library to decode QR and barcode images, it has a .NET port on codeplex (<a title="http://zxingnet.codeplex.com/" href="http://zxingnet.codeplex.com/">http://zxingnet.codeplex.com/</a>) that port is what I use in this project and that&rsquo;s where the LuminanceSource comes from. That&rsquo;s also where the QRCodeReader class lives.</p>
<p>Next event handler that we attached in the constructor is the photoChooserTask_Completed</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8c21e74c-4afd-4a91-bef4-a6bb3909ad15" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> photoChooserTask_Completed(</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;"> sender, </span><span style="background: #ffffff; color: #2b91af;">PhotoResult</span><span style="background: #ffffff; color: #000000;"> e)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (e.TaskResult == </span><span style="background: #ffffff; color: #2b91af;">TaskResult</span><span style="background: #ffffff; color: #000000;">.OK)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_imgStream = e.ChosenPhoto;</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_timer.Start();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>If the task returns succesfully we&rsquo;ll set the chosen photo, which arrives here as a stream, to the _imgStream field and we start the timer. Now on every timer tick (every 250 milliseconds in this example) we will scan the previewbuffer for QR codes.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9c5cf68d-e4ec-49c2-973d-3664a24f200e" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ScanPreviewBuffer()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (_guid != </span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;">)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_timer.Stop();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">SendImage();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">try</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_photoCamera.GetPreviewBufferY(_luminance.PreviewBufferY);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> binarizer = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">HybridBinarizer</span><span style="background: #ffffff; color: #000000;">(_luminance);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> binBitmap = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">BinaryBitmap</span><span style="background: #ffffff; color: #000000;">(binarizer);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">var</span><span style="background: #ffffff; color: #000000;"> result = _reader.decode(binBitmap);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Dispatcher.BeginInvoke(() =&gt;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_guid = result.Text;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">});</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">catch</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>First thing we do here is checking if we already have a guid, if we do we stop the timer and send the image to the SignalR service. If _guid is still null we&rsquo;ll get the previewbuffer and try to decode it, if there&rsquo;s no QR code in the previewbuffer it will throw an exception, hence the empty catch block. When we can decode&nbsp; we&rsquo;ll go to the SendImage() method.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4da61230-f7eb-469e-890b-61e2a87632f1" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">async</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> SendImage()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (_connection == </span><span style="background: #ffffff; color: #0000ff;">null</span><span style="background: #ffffff; color: #000000;"> || _connection.State != </span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Connected)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">await</span><span style="background: #ffffff; color: #000000;"> SetupSignalRConnection();</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li>&nbsp;</li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">if</span><span style="background: #ffffff; color: #000000;"> (_connection.State == </span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Connected || _connection.State == </span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Reconnecting)</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">MemoryStream</span><span style="background: #ffffff; color: #000000;"> s = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">MemoryStream</span><span style="background: #ffffff; color: #000000;">();</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_imgStream.CopyTo(s);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_mainHub.Invoke(</span><span style="background: #ffffff; color: #a31515;">"ShareImage"</span><span style="background: #ffffff; color: #000000;">, </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #0000ff;">object</span><span style="background: #ffffff; color: #000000;">[]{s.ToArray(), _guid}); </span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">else</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #2b91af;">MessageBox</span><span style="background: #ffffff; color: #000000;">.Show(</span><span style="background: #ffffff; color: #a31515;">"not connected"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>If there&rsquo;s no active connection, we&rsquo;ll call the SetupSignalRConnection() method. if there is and we are connected we copy the imagestream into a MemoryStream and we invoke the ShareImage() method on the SignalR server, passing in the memorystream, converted into a byte array, and the guid we got from the qr code.</p>
<p>Now for the connection to the server.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5b5c50a6-7bda-48c8-a2cb-2b7eb76f9f83" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 300px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">async</span><span style="background: #ffffff; color: #2b91af;">Task</span><span style="background: #ffffff; color: #000000;"> SetupSignalRConnection()</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_connection = </span><span style="background: #ffffff; color: #0000ff;">new</span><span style="background: #ffffff; color: #2b91af;">HubConnection</span><span style="background: #ffffff; color: #000000;">(</span><span style="background: #ffffff; color: #a31515;">"http://pbclone.azurewebsites.net/"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_connection.StateChanged += ConnectionOnStateChanged;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_mainHub = _connection.CreateHubProxy(</span><span style="background: #ffffff; color: #a31515;">"imghub"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">await</span><span style="background: #ffffff; color: #000000;"> _connection.Start();</span></li>
<li style="background: #f3f3f3;">&nbsp;</li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">_mainHub.Invoke(</span><span style="background: #ffffff; color: #a31515;">"Create"</span><span style="background: #ffffff; color: #000000;">, _guid);</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>We instantiate a new HubConnection with the url to the service as parameter. We generate a proxy for the hub we want to use and we call the start() method on the connection. It will connect to the hub, get the javascript proxy and translate it into a .net proxy. We then invoke the Create() method and pass in the guid so that our Windows Phone client joins the same group as the web client. The ConnectionOnStateChanged event handler is only used to update the textblock on the page to show whether or not we&rsquo;re connected.</p>
<div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:19e896bd-ad9a-4ea8-84e7-055ddb1ff070" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt;">
<div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px;">Code Snippet</div>
<div style="background: #ddd; max-height: 500px; overflow: auto;"><ol style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;" start="1">
<li><span style="background: #ffffff; color: #0000ff;">private</span><span style="background: #ffffff; color: #0000ff;">void</span><span style="background: #ffffff; color: #000000;"> ConnectionOnStateChanged(</span><span style="background: #ffffff; color: #2b91af;">StateChange</span><span style="background: #ffffff; color: #000000;"> stateChange)</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">switch</span><span style="background: #ffffff; color: #000000;"> (stateChange.NewState)</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">{</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">case</span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Connecting:</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">StatusText.Text = </span><span style="background: #ffffff; color: #a31515;">"Connecting..."</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">break</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">case</span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Connected:</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Dispatcher.BeginInvoke(() =&gt; StatusText.Text = </span><span style="background: #ffffff; color: #a31515;">"Connected"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">break</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">case</span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Reconnecting:</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Dispatcher.BeginInvoke(() =&gt; StatusText.Text = </span><span style="background: #ffffff; color: #a31515;">"Reconnecting..."</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">break</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">case</span><span style="background: #ffffff; color: #2b91af;">ConnectionState</span><span style="background: #ffffff; color: #000000;">.Disconnected:</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">Dispatcher.BeginInvoke(() =&gt; StatusText.Text = </span><span style="background: #ffffff; color: #a31515;">"Disconnected"</span><span style="background: #ffffff; color: #000000;">);</span></li>
<li style="background: #f3f3f3;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #0000ff;">break</span><span style="background: #ffffff; color: #000000;">;</span></li>
<li>&nbsp;&nbsp;&nbsp;&nbsp;<span style="background: #ffffff; color: #000000;">}</span></li>
<li style="background: #f3f3f3;"><span style="background: #ffffff; color: #000000;">}</span></li>
</ol></div>
</div>
</div>
<p>And that&rsquo;s it, we can now start sending images to any device with a browser and an internet connection.</p>
<h2>Conclusion</h2>
<p>In this post I&rsquo;ve tried to demystify the magic from Nokia&rsquo;s Photobeamer app. It is a really cool app but when you take it apart, it&rsquo;s not that magical. Like a lot of impressive looking tech it just combines a bunch of existing techs into something no one else thought of.</p>
<p>The code in this article is all my own, I have no clue how the Nokia app actually works and what technology they are using, I&rsquo;m only mimicking their behavior.</p>
<p>Update: I've uploaded the project to Github <a href="https://github.com/NicoVermeir/photobeamerclone">https://github.com/NicoVermeir/photobeamerclone</a></p>]]></content>
      <post-name type="text"><![CDATA[Copying Nokia’s Photobeamer with SignalR and WP8]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="3ea3cc57-12ac-4425-90cc-635093df9f95" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="4fd88047-4348-45ca-ba45-20f456947a13" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T02:15:49" date-modified="2013-06-19T02:15:49" approved="false" user-name="Kayleigh" user-email="kayleighalvarado@gmail.com" user-ip="2.133.92.18" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Excellent post. Keep posting such kind of information on your page. Im really impressed by your site.
Hey there,  You&#39;ve performed an incredible job. I&#39;ll certainly digg it and for my part recommend to my friends. I am confident they will be benefited from this website.

Also visit my website - how to become an eye candy model [ Kayleigh - http://unreliablestuff.com/News/hinteralpe-at/ ]]]></content>
        </comment>
        <comment id="1b911828-dd90-42f5-8790-c4a74790dea2" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T15:57:05" date-modified="2013-06-19T15:57:05" approved="false" user-name="jobs in the modeling industry" user-email="emilegipson@googlemail.com" user-ip="123.126.70.169" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[I&#39;ll right away take hold of your rss feed as I can&#39;t find your email subscription hyperlink or e-newsletter service. Do you&#39;ve any? Please let me know in order that I may just subscribe. Thanks.

My site:  jobs in the modeling industry - http://www.eyecamz.com ]]></content>
        </comment>
        <comment id="ae8b9822-79c1-4ce5-8abb-e6aebbe247c9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T09:58:37" date-modified="2013-06-20T09:58:37" approved="false" user-name="volvo occasions" user-email="MargarethaDeVries@yahoo.nl" user-ip="188.24.107.231" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Volvo stands for reliability and durability. On our pages you will find a large number of used Volvo&#39;s in excellent condition. A Volvo possesses these properties as a new Volvo, but is considerably cheaper. - http://www.hooftman.nl/volvosales/volvo-occasions.html]]></content>
        </comment>
        <comment id="ea2afed4-0741-41d3-b761-5cfc6b36b2c5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T10:40:54" date-modified="2013-06-20T10:40:54" approved="false" user-name="volvo occasions" user-email="DoortjeJansen@yahoo.nl" user-ip="188.24.107.15" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[On our pages you will find a large number of used Volvo&#39;s in excellent condition. Volvo stands for reliability and durability. A Volvo possesses these properties as a new Volvo, but is considerably cheaper. - http://www.hooftman.nl/volvosales/volvo-occasions.html]]></content>
        </comment>
        <comment id="e9422fbc-2330-44e0-9bfc-e479764d7472" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T02:59:45" date-modified="2013-06-25T02:59:45" approved="false" user-name="webseite selber machen mac" user-email="lin-harlan@freenet.de" user-ip="188.208.2.209" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[H&#228;tte da noch ein paar Fragestellungen zu spezifischen Punkten. Ich br&#228;uchte einen Experten auf dem Gebiet, der mir gegen Bezahlung die Fragestellungen gekl&#228;rt.

Here is my website:  webseite selber machen mac - http://www.european-toplist.de/index.php?a=stats&amp;u=launacowley ]]></content>
        </comment>
        <comment id="1d17ffee-1a95-4835-9fa6-9c00fe0a30aa" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T10:42:25" date-modified="2013-06-25T10:42:25" approved="false" user-name="Leanna" user-email="leannadavenport@live.com" user-ip="188.208.0.81" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Super! Dies war ein ausgesprochen faszinierender Artikel. Danke, dass sie diese Erl&#228;uterung zusammengestellt haben.

Feel free to surf to my web blog freeware webseiten erstellen mac ( Leanna - http://www.e-guernica.net/wiki_scuola/JakernHidalgofn )]]></content>
        </comment>
        <comment id="58f4bc52-38b6-490f-8720-dd6ea495db90" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T01:18:14" date-modified="2013-06-26T01:18:14" approved="false" user-name="community website erstellen kostenlos" user-email="kingwestfall@gawab.com" user-ip="188.208.2.21" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Toller Text! Ihre Webpr&#228;senz l&#228;dt ebenso ausgesprochen fr&#252;hzeitig! Welchen Webhosting Anbieter benutzen Sie denn?

Check out my web-site:  community website erstellen kostenlos - http://www.e-infantry.com/m/blog/index.php?postid=5760 ]]></content>
        </comment>
        <comment id="5c941fb5-9373-43d6-972b-d6d056b55355" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T09:41:17" date-modified="2013-06-26T09:41:17" approved="false" user-name="do it yourself website design" user-email="rosiekincaid@aol.com" user-ip="188.208.2.209" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Ihre Internetpr&#228;senz l&#228;dt auch sehr schnell! Toller Artikel! Welchen Webhosting Anbieter benutzen Sie denn?

my web site;  do it yourself website design - http://bestwebarticles.net/55400/webseite-erstellen-lassen-top-freelancer-ermitteln-homepage-gratis-erfahrungen/ ]]></content>
        </comment>
        <comment id="d66d7470-3ab9-4987-9e29-66faae91349f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T17:21:49" date-modified="2013-06-26T17:21:49" approved="false" user-name="webshop erstellen preis" user-email="robert.means@zoho.com" user-ip="188.208.2.36" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Ich denke, dass zahlreiche Menschen davon profitieren k&#246;nnen. Hallo Personen, hab gerade bei Google Alerts von diesem Blog erfahren und finde ihn &#252;beraus informativ. Danke.

My site ::  webshop erstellen preis - http://www.silivrenstudios.com/ss/issa/index.php?option=com_blog&amp;view=comments&amp;pid=165753&amp;Itemid=0 ]]></content>
        </comment>
        <comment id="8128d4d5-eb6b-4ca0-b4ff-21823ed9c04a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T23:26:42" date-modified="2013-06-26T23:26:42" approved="false" user-name="verein homepage erstellen kostenlos" user-email="luther.seitz@gmail.com" user-ip="188.208.2.21" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Ich frage mich, welche Plugins Sie f&#252;r Ihren Blog benutzen, um Spam zu verhindern. Vielen Dank. K&#246;nnen Sie mir da was zweckm&#228;&#223;iges anraten?

Feel free to visit my weblog -  verein homepage erstellen kostenlos - http://community.tumbleweedhouses.com/groups/webdesign-entwickeln-mit-der-11-do-it-yourself-internetseite-eigene-webseite-machen/ ]]></content>
        </comment>
        <comment id="bc9274c2-67af-4c23-aa86-52643ca465fd" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T09:31:21" date-modified="2013-06-27T09:31:21" approved="false" user-name="Www.Site-Creare.Ro" user-email="gerardjenkins@gawab.com" user-ip="89.218.160.50" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[I all the time used to read article in news papers but now as I am a user of internet thus from now I am using net for articles, thanks to web.

Here is my web-site :: Seo Website Design ( Www.Site-Creare.Ro - http://www.site-creare.ro )]]></content>
        </comment>
        <comment id="60f0bbfe-6007-4eae-94b8-9b31a6732332" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T04:37:04" date-modified="2013-06-28T04:37:04" approved="false" user-name="Gwen" user-email="gwen_montemayor@gmx.de" user-ip="188.208.2.36" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Hallo, ich mag Ihren Schreibstil! Danke f&#252;r diesen gro&#223;artigen Artikel. Ich habe n&#228;chste Woche eine Pr&#228;sentation und konnte Ihre Beitr&#228;ge ausgesprochen gut gebrauchen.

my webpage ... kostenlos eine homepage erstellen ohne anmeldung ( Gwen - http://bookmarking.sseocompany.com/user.php?login=junemanes )]]></content>
        </comment>
        <comment id="152e233e-4e70-4f4b-9629-62e155533411" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T07:48:17" date-modified="2013-06-28T07:48:17" approved="false" user-name="Judson" user-email="judsonlantz@gmail.com" user-ip="188.208.2.36" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Ich muss sagen, ich bin beeindruckt. Das Problem ist, dass man so zahlreiche verschiedene Meinungen findet und es dann schwer ist, einen objektiven Einblick zu haben. Sie haben in Ihrem Beitrag den Nagel auf den Kopf getroffen. Ich bin froh, diesen Artikel gelesen zu haben.

Here is my web page - wie erstelle ich eine internetseite her ( Judson - http://Wiki.Webtainment.eu/index.php/Benutzer:EldenGold )]]></content>
        </comment>
        <comment id="b3726fdc-c006-4cd6-acdf-f4878fc3503d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T12:13:23" date-modified="2013-06-29T12:13:23" approved="false" user-name="nagaiah.com" user-email="elinorcowell@inbox.com" user-ip="188.208.2.21" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Wundervoller Beitrag, mannigfaltigen Dank f&#252;r die praktische Darlegung. Weiter derart!

Check out my web blog ... ecommerce web design templates -  nagaiah.com - http://Www.nagaiah.com/stories/35249/Internetseite_preiswert_erstellen_lassen__United_Website_Design_.html  -]]></content>
        </comment>
        <comment id="cea4061f-9fde-4008-a499-cb276478a82f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T07:22:58" date-modified="2013-06-30T07:22:58" approved="true" user-name="Deadpool Video Game Download" user-email="michaela.norman@freenet.de" user-ip="24.224.212.107" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Howdy I am so excited I found your web site, I really found you by accident, while I was researching on Yahoo for something else, Nonetheless I am here now and would just like to say many thanks for a tremendous post and a all round thrilling blog (I also love the theme/design), I don’t have time to look over it all at the moment but I have saved it and also included your RSS feeds, so when I have time I will be back to read more, Please do keep up the awesome jo.

Here is my site:  Deadpool Video Game Download - http://www.youtube.com/watch?v=3tG1guIKHDM ]]></content>
        </comment>
        <comment id="d7ce898f-8867-4334-8351-94ea646f7162" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T10:22:24" date-modified="2013-07-02T10:22:24" approved="false" user-name="joomla web design template free" user-email="angelesserrano@gmail.com" user-ip="188.208.2.36" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Hi, ich bin Martin, schreibe hier zu dem ersten Mal eine kleinigkeit. Wollte mich nur f&#252;r die f&#246;rderliche Darlegung in Ihrem Text bedanken.

Feel free to visit my website ...  joomla web design template free - http://informationindustrialvapi.com/machinery/kaufpreise-fur-website-entwickeln-lassen-mit-www-to-date-website-selber-erstellen-schweiz-5547.htm ]]></content>
        </comment>
        <comment id="1cead96e-fe03-4b3c-89ab-d54a062684de" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T18:49:25" date-modified="2013-07-03T18:49:25" approved="false" user-name="Everett" user-email="everettcolon@web.de" user-ip="188.208.0.106" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Ich br&#228;uchte einen Experten auf dem Gebiet, der mir gegen Bezahlung die Fragen beantwortet. H&#228;tte da noch einzelne Fragestellungen zu einzelnen Punkten.

Also visit my web site - clanpage erstellen lassen kostenlos ( Everett - http://www.e-infantry.com/m/blog/index.php?postid=5914 )]]></content>
        </comment>
        <comment id="b2b985e2-2c69-4e3e-98de-8a462844efc1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T23:54:23" date-modified="2013-07-03T23:54:23" approved="false" user-name="http://www.topcartomanziatelefonica.com" user-email="jerrysquires@t-online.de" user-ip="188.208.2.21" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Wollte mich nur f&#252;r die f&#246;rderliche Erl&#228;uterung in Ihrem Artikel bedanken. Hi, ich bin Martin, schreibe hier zu dem ersten Mal eine kleinigkeit.

My web page; eigene webseite gestalten kostenlos * http://www.topcartomanziatelefonica.com - http://www.topcartomanziatelefonica.com/index.php?a=stats&amp;u=damon1051kkjc *]]></content>
        </comment>
        <comment id="760926e6-b32c-4ae1-bbde-5cd046f39a37" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T11:47:36" date-modified="2013-07-04T11:47:36" approved="false" user-name="web design portfolios 2011" user-email="katlyndelagarza@t-online.de" user-ip="188.208.2.202" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Sehr guter Artikel. Sehr nutzbringende Information :) Hatte schon eine Weile danach gesucht. Ich hab bereits diverse Mal hier vorbeigeschaut und bin immerzu inspiriert. Danke sch&#246;n.

Feel free to surf to my webpage:  web design portfolios 2011 - http://yuyu.vn/KXYHattie/info/ ]]></content>
        </comment>
        <comment id="b60bb443-2631-4e45-8a70-f8ccd4e29559" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T15:55:42" date-modified="2013-07-04T15:55:42" approved="false" user-name="Josie" user-email="josiecullen@t-online.de" user-ip="188.208.0.116" user-url="">
          <title type="text"><![CDATA[re: Copying Nokia’s Photobeamer with SignalR and WP8]]></title>
          <content type="text"><![CDATA[Ich frage mich, welche Plugins Sie f&#252;r Ihren Blog benutzen, um Spam zu verhindern. K&#246;nnen Sie mir da was sinnvolles empfehlen? Vielen Dank.

Also visit my webpage - software onlineshop erstellen kostenlos * Josie - http://newsseed.com/user/shaken/kendallwo/ *]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="305150cd-147d-48ae-ab98-1d32bdd33a34" date-created="2013-01-11T13:22:22" date-modified="2013-04-04T10:05:45" approved="true" post-url="/blog/post/2013/01/11/Getting-home-with-Windows-Phone-8-and-NFC.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Getting home with Windows Phone 8 and NFC]]></title>
      <content type="text"><![CDATA[<p>Imagine this, you’re somewhere you’ve never been before and you need your phone to navigate you home but you need a quick getaway and don’t have time to enter the address manually. Or you’re taking the boy/girl of your dreams home after a great date and want to impress them with some technological stuff (because geeks are the new sexy). In both scenarios NFC can come to the rescue. In this article I’m going to explain how you can program an NFC tag to launch your navigation app and navigate you home. (NOTE: this has been tested on a Nokia Lumia 920 with Nokia Drive).</p>  <p>First, the prerequisites. We need an NFC capable Windows Phone 8 device with navigation software. We also need a blank, NDEF formatted, writable NFC tag (I got mine from <a href="https://rapidnfc.com/" target="_blank">RapidNFC</a>). We’ll also need a dataconnection to fetch our coordinates (only for writing the NFC tag).</p>  <p>Next, the pieces of the puzzle. In this case there are three things that need to be taken care of. First we need to be able to enter an address in an app and get the longitude/latitude coordinates for that address. Second, we need to write the instruction for launching the navigations app and navigating to those coordinates to an NFC tag and third we need our phone to actually launch the app and navigate to the received coordinates. Now to make that last part work we only need to make sure we have an NFC capable phone, have NFC enabled in Settings and that we have navigational software installed.</p>  <p>Enough planning, let’s get to work. First the UI, I‘m going with two TextBlocks, one to enter the address and one that will show the coordinates just to see if that worked. I also need two buttons, one for fetching the coordinates and one for writing the NFC tag. Here’s the XAML</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0e6f3fc3-9a6c-4f39-9c85-05daeda5c44a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;ContentPanel&quot;</span><span style="background:#ffffff;color:#ff0000"> Grid.Row</span><span style="background:#ffffff;color:#0000ff">=&quot;1&quot;</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12,0,12,0&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Address&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBoxAddress&quot; /&gt;</span></li> <li>                <span style="background:#ffffff;color:#000000">        </span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;Coordinates&quot; /&gt;</span><span style="background:#ffffff;color:#000000"></span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000">        </span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBox</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Name</span><span style="background:#ffffff;color:#0000ff">=&quot;TextBoxCoordinates&quot; /&gt;</span><span style="background:#ffffff;color:#000000"></span></li> <li>        <span style="background:#ffffff;color:#000000"></span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#ff0000"> Orientation</span><span style="background:#ffffff;color:#0000ff">=&quot;Horizontal&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Get Coordinates&quot;</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;GetCoordinatesButtonClick&quot; /&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Button</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Write NFC tag&quot;</span><span style="background:#ffffff;color:#ff0000"> Click</span><span style="background:#ffffff;color:#0000ff">=&quot;WriteTagButtonClick&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">StackPanel</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">Grid</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>With this as the final result</p>  <p><a href="http://i45.tinypic.com/nb9d9e.jpg" target="_blank"><img src="http://i45.tinypic.com/nb9d9e.jpg" width="181" height="302" /></a></p>  <p>How this works, we enter an address in the top TextBox and click the “Get Coordinates” button. This will use the Microsoft.Phone.Maps functionality to translate that address into coordinates, those coordinates will show up in the bottom TextBox. When we click the “Write NFC tag” button the app will wait for a writable NFC tag, once that’s detected the data will be written on it. All it takes then is a tap on the tag and the phone will take you home.</p>  <p>Before we dive into code we need to add some capabilities. Using the Maps namespace and using NFC requires two capabilities, double-click the WMAppManifest.xml file and select these capabilities.</p>  <p><a href="http://i46.tinypic.com/2yx3x5g.jpg" target="_blank"><img src="http://i46.tinypic.com/2yx3x5g.jpg" width="476" height="258" /></a></p>  <p>This will keep us away from any UnauthorizedExceptions.</p>  <p>On to the code we go, we’ll start with declaring some private fields.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:456e9be8-8f99-45d8-b8c2-26ccd6af85c3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GeoCoordinate</span><span style="background:#ffffff;color:#000000"> _coordinate;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ProximityDevice</span><span style="background:#ffffff;color:#000000"> _device;</span></li> </ol> </div> </div> </div>  <p>After that, we go to the “Get Coordinates” button.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a5cb40c8-0e72-4a30-be80-6e7722b9644b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> GetCoordinatesButtonClick(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> address = TextBoxAddress.Text.Trim();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (address == </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Empty)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Address cannot be empty!&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">GeocodeQuery</span><span style="background:#ffffff;color:#000000"> query = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GeocodeQuery</span></li> <li style="background: #f3f3f3">                             <span style="background:#ffffff;color:#000000">{</span></li> <li>                                 <span style="background:#ffffff;color:#000000">GeoCoordinate = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GeoCoordinate</span><span style="background:#ffffff;color:#000000">(0, 0),</span></li> <li style="background: #f3f3f3">                                 <span style="background:#ffffff;color:#000000">SearchTerm = address</span></li> <li>                             <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">query.QueryCompleted += (o, args) =&gt;</span></li> <li style="background: #f3f3f3">                                <span style="background:#ffffff;color:#000000">{</span></li> <li>                                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (args.Result == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">                                    <span style="background:#ffffff;color:#000000">{</span></li> <li>                                        <span style="background:#ffffff;color:#000000">TextBoxCoordinates.Text = </span><span style="background:#ffffff;color:#a31515">&quot;No coordinates found&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">                                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>                                    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">                                    <span style="background:#ffffff;color:#000000">_coordinate = args.Result[0].GeoCoordinate;</span></li> <li>                                    <span style="background:#ffffff;color:#000000">TextBoxCoordinates.Text = </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Format(</span><span style="background:#ffffff;color:#a31515">&quot;Lat: {</span><span style="background:#ffffff;color:#3cb371">0}</span><span style="background:#ffffff;color:#a31515"> / Lon: {</span><span style="background:#ffffff;color:#3cb371">1}</span><span style="background:#ffffff;color:#a31515">&quot;</span><span style="background:#ffffff;color:#000000">, </span></li> <li style="background: #f3f3f3">                                        <span style="background:#ffffff;color:#000000">args.Result[0].GeoCoordinate.Latitude.ToString(), </span></li> <li>                                        <span style="background:#ffffff;color:#000000">args.Result[0].GeoCoordinate.Longitude.ToString());</span></li> <li style="background: #f3f3f3">                                <span style="background:#ffffff;color:#000000">};</span></li> <li>    <span style="background:#ffffff;color:#000000">query.QueryAsync();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First thing we need to do is verify if an address was actually entered in the TextBlock. When that’s verified we declare a GeocodeQuery and initialize it with a new GeoCoordinate and pass the address as a SearchTerm. When the query completes we check if there’s a result. The query should return a result of type IList&lt;MapLocation&gt; the first element in the list is the one we need, and from this first item we need the GeoCoordinate property, we’ll put that one in the _coordinate field. We call the QueryAsync() method on GeocodeQuery to get the result. For some reason QueryAsync returns void, meaning we can’t just await it. We need to do this the oldschool way and use the QueryCompleted event handler.</p>  <p>With that, the first part of our puzzle is solved. We can go from an address to a coordinate. Now we just need a way to get this coordinate and the navigation app launch instruction onto an NFC tag. Let’s have a look at what happens when the “Write NFC tag” button is clicked.</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9ab8be4b-e897-400d-8dee-cdc73d07ebde" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> WriteTagButtonClick(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> e)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_device = </span><span style="background:#ffffff;color:#2b91af">ProximityDevice</span><span style="background:#ffffff;color:#000000">.GetDefault();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_device == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;NFC not detected, is it disabled?&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">TextBlockStatus.Text = </span><span style="background:#ffffff;color:#a31515">&quot;NFC detected, waiting for writable tag&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_device.SubscribeForMessage(</span><span style="background:#ffffff;color:#a31515">&quot;WriteableTag&quot;</span><span style="background:#ffffff;color:#000000">, (device, message) =&gt;</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">{</span></li> <li>                        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Deployment</span><span style="background:#ffffff;color:#000000">.Current.Dispatcher.BeginInvoke(() =&gt;</span></li> <li style="background: #f3f3f3">                                        <span style="background:#ffffff;color:#000000">{</span></li> <li>                                            <span style="background:#ffffff;color:#000000">TextBlockStatus.Text = </span><span style="background:#ffffff;color:#a31515">&quot;writable tag detected&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">                                        <span style="background:#ffffff;color:#000000">});</span></li> <li>                        <span style="background:#ffffff;color:#000000">WriteTag();</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">});</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>There’s some NFC magic going on here. First we instantiate a ProximityDevice instance and activate the proximity provider. If, at that point, _device is null it means that the Windows Phone device either has no NFC capabilities or they are disabled in Settings &gt; Tap &amp; Send. If _device is not null we have successfully initialized NFC. Line 13 is a bit special. We call the SubscribeForMessage() method on the ProximityDevice. What happens is, when the NFC provider reads a tag it sends a message, we subscribe to the “WritableTag” message because it’s the only thing we can use in this case. If you want a complete list of all supported message types, have a look at <a href="http://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh701129.aspx" target="_blank">MSDN.</a>Since the subscription doesn’t live on the UI thread we need to use the Dispatcher in order to update the TextBlock that hold the status. The WriteTag() method gets called when a writable NFC tag is detected.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e96615a2-9eef-4975-8deb-14fe2884c203" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> WriteTag()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> uri = </span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000">.Format(</span><span style="background:#ffffff;color:#a31515">@&quot;ms-drive-to:?destination.latitude={</span><span style="background:#ffffff;color:#3cb371">0}</span><span style="background:#ffffff;color:#a31515">&amp;destination.longitude={</span><span style="background:#ffffff;color:#3cb371">1}</span><span style="background:#ffffff;color:#a31515">&quot;</span><span style="background:#ffffff;color:#000000">,</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_coordinate.Latitude.ToString(</span><span style="background:#ffffff;color:#2b91af">CultureInfo</span><span style="background:#ffffff;color:#000000">.InvariantCulture), </span></li> <li>        <span style="background:#ffffff;color:#000000">_coordinate.Longitude.ToString(</span><span style="background:#ffffff;color:#2b91af">CultureInfo</span><span style="background:#ffffff;color:#000000">.InvariantCulture));</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> writer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataWriter</span></li> <li style="background: #f3f3f3">                         <span style="background:#ffffff;color:#000000">{</span></li> <li>                             <span style="background:#ffffff;color:#000000">UnicodeEncoding = </span><span style="background:#ffffff;color:#2b91af">UnicodeEncoding</span><span style="background:#ffffff;color:#000000">.Utf16LE</span></li> <li style="background: #f3f3f3">                         <span style="background:#ffffff;color:#000000">};</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">writer.WriteString(uri);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_device.PublishBinaryMessage(</span><span style="background:#ffffff;color:#a31515">&quot;WindowsUri:WriteTag&quot;</span><span style="background:#ffffff;color:#000000">, writer.DetachBuffer(), (sender, id) =&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000">Dispatcher.BeginInvoke(() =&gt; TextBlockStatus.Text = </span><span style="background:#ffffff;color:#a31515">&quot;Tag written&quot;</span><span style="background:#ffffff;color:#000000">));</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>This method is the piece of magic that glues all pieces together. We start by setting the Uri that will launch when the tag is tapped. “ms-drive-to” means we need whatever app is registered to the drive-to command (you can also get walking directions by using “ms-walk-to”) the rest of the string are parameters we’re passing into that app. We are passing the coordinates into the app, passing those in means that the app knows we want to navigate and where we want to go. We also need a DataWriter with Utf16LE encoding (this is the encoding needed for writing uri messages to NFC tags). We fill the buffer of the DataWriter with the uri string we’ve constructed a second ago and we publish it through the ProximityDevice as a binary message. The PublishBinaryMessage() method takes in a messagetype and an implementation of IBuffer, provided by the DataWriter in this case. In an overload the method also takes a method that fires when the publish is completed, we use this event handler to update our UI.</p>  <p>That’s all folks, with a bit of tinkering we’ve combined two possibilities of the Windows Phone 8 platform in a very cool, almost “magical” trick. I've got my NFC sticker in my car, impressing people wherever I go and now you can all be as cool as I am <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_11.png" /> you’re welcome.</p>  <p>To finish of, some action shots of the app.</p>  <p><a href="http://i47.tinypic.com/xdtr9w.jpg" target="_blank"><img src="http://i47.tinypic.com/xdtr9w.jpg" width="164" height="273" /></a>    <br />Coordinates detected</p>  <p><a href="http://i49.tinypic.com/ve4rwg.jpg" target="_blank"><img src="http://i49.tinypic.com/ve4rwg.jpg" width="165" height="275" /></a>    <br />Tapped a programmed tag</p>  <p><a href="http://i50.tinypic.com/162g3n.jpg" target="_blank"><img src="http://i50.tinypic.com/162g3n.jpg" width="166" height="277" /></a>    <br />Navigation started</p>]]></content>
      <post-name type="text"><![CDATA[Getting home with Windows Phone 8 and NFC]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="ef33a728-f509-4228-8b4c-06aca8964391" />
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="574c0e52-8c6a-41c5-a357-1803bcd70db1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T10:36:48" date-modified="2013-06-20T10:36:48" approved="false" user-name="volvo occasions" user-email="DoortjeJansen@yahoo.nl" user-ip="188.24.107.15" user-url="">
          <title type="text"><![CDATA[re: Getting home with Windows Phone 8 and NFC]]></title>
          <content type="text"><![CDATA[Volvo stands for reliability and durability. A Volvo possesses these properties as a new Volvo, but is considerably cheaper. On our pages you will find a large number of used Volvo&#39;s in excellent condition. - http://www.hooftman.nl/volvosales/volvo-occasions.html]]></content>
        </comment>
        <comment id="9edbdbe1-702a-4e41-afa0-c6627c9798b9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T15:49:18" date-modified="2013-06-20T15:49:18" approved="false" user-name="Lee" user-email="lee_jarrell@googlemail.com" user-ip="5.144.176.113" user-url="">
          <title type="text"><![CDATA[re: Getting home with Windows Phone 8 and NFC]]></title>
          <content type="text"><![CDATA[Wonderful site you have here but I was wondering if you knew of any community forums that cover the same topics talked about in this article? I&#39;d really like to be a part of online community where I can get feedback from other knowledgeable individuals that share the same interest. If you have any recommendations, please let me know. Thanks!

Also visit my web page - Magnetic Messaging ( Lee - http://www.MagneticMessagingReviews.info )]]></content>
        </comment>
        <comment id="0fb2e2e2-e5a7-4ff4-9489-8473166b4daa" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T23:07:03" date-modified="2013-07-03T23:07:03" approved="false" user-name="impresa pulizia milano" user-email="DeLuca15Luisa@yahoo.com" user-ip="188.24.59.250" user-url="">
          <title type="text"><![CDATA[re: Getting home with Windows Phone 8 and NFC]]></title>
          <content type="text"><![CDATA[Each environment, depending on usage and activities it hosts, requires specific cleaning and sanitizing. The performance of these interventions requires a careful evaluation of the products and equipment that will be used. We can provide more than adequate to igianizzazione cleaning products and also supplies and products for the care of the environment and the hygiene of the people as toilet paper, soaps, wipes, cloths and fragrant perfumes for environment. More details about our cleaning company at http://www.sixlands.com.]]></content>
        </comment>
        <comment id="1d735e77-2caf-4cb1-840c-afd6b2b81e10" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T06:33:55" date-modified="2013-07-04T06:33:55" approved="false" user-name="Russo Francesca" user-email="Russo245Francesca@yahoo.com" user-ip="188.24.109.174" user-url="">
          <title type="text"><![CDATA[re: Getting home with Windows Phone 8 and NFC]]></title>
          <content type="text"><![CDATA[We are present on the market with The Cleaning Company since the 80&#39;s and we can boast over two decades of experience in the Cleaning sector. Our company policy is primarily focused on Services of cleaning, disinfecting, sanitizing, pest and rodent control so as to provide a specialized service as much as possible, complete and satisfactory. More details about our cleaning company at http://www.sixlands.com.]]></content>
        </comment>
        <comment id="d7c840cf-b258-4ad9-9dbe-0a72366c3e7c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T08:00:46" date-modified="2013-07-04T08:00:46" approved="false" user-name="Russo Francesca" user-email="Russo245Francesca@yahoo.com" user-ip="188.24.109.174" user-url="">
          <title type="text"><![CDATA[re: Getting home with Windows Phone 8 and NFC]]></title>
          <content type="text"><![CDATA[Each environment, depending on usage and activities it hosts, requires specific cleaning and sanitizing. The performance of these interventions requires a careful evaluation of the products and equipment that will be used. We can provide more than adequate to igianizzazione cleaning products and also supplies and products for the care of the environment and the hygiene of the people as toilet paper, soaps, wipes, cloths and fragrant perfumes for environment. More details about our cleaning company at http://www.sixlands.com.]]></content>
        </comment>
        <comment id="f0e1acbd-633e-4913-b64b-7ca1a6d5c997" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T08:02:36" date-modified="2013-07-04T08:02:36" approved="false" user-name="Russo Francesca" user-email="Russo245Francesca@yahoo.com" user-ip="188.24.109.174" user-url="">
          <title type="text"><![CDATA[re: Getting home with Windows Phone 8 and NFC]]></title>
          <content type="text"><![CDATA[To work with efficiency, productivity and motivation is also necessary that the working environment is clean and orderly; Six Lands offers its customers security and reliability to achieve this goal. More details about our cleaning company at http://www.sixlands.com.]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="02b29d55-f748-42d1-9e7e-d9a163ea441a" date-created="2013-01-14T13:24:48" date-modified="2013-01-14T13:24:48" approved="true" url="http://www.silverlightshow.net/news/Getting-home-with-Windows-Phone-8-and-NFC.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

Getting home with Windows Phone 8 and NFC]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="d4e93400-8341-4afc-9f08-0eaad3d034a2" date-created="2013-01-04T11:06:06" date-modified="2013-01-04T20:31:05" approved="true" post-url="/blog/post/2013/01/04/Windows-Phone-8-and-Fiddler.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Windows Phone 8 and Fiddler]]></title>
      <content type="text"><![CDATA[<h2>Fiddler and the WP8 emulator</h2>  <p>Fiddler is a great tool for capturing network traffic. I find it especially useful when I’m working with services. It sniffs out your network traffic and allows you to dig into every incoming or outgoing request. You can even create requests from inside the tool. The tool itself is free to use and can be downloaded from <a title="https://fiddler2.com/fiddler2/" href="https://fiddler2.com/fiddler2/">https://fiddler2.com/fiddler2/</a></p>  <p><a href="http://i49.tinypic.com/6iz6t1.jpg" target="_blank"><img src="http://i49.tinypic.com/6iz6t1.jpg" width="437" height="235" /></a></p>  <p>So how does it work? Fiddler installs a proxy on your machine (default on port 8888). That proxy intercepts all network traffic going from and to the machine it’s installed on. That traffic gets displayed in the Fiddler UI. The proxy captures the traffic, sends it to the application and let the traffic itself pass to the original destination. This image shows the normal client – internet situation (top half) and the situation with Fiddler installed (bottom half).</p>  <p><a href="http://i47.tinypic.com/r1ydg4.jpg" target="_blank"><img src="http://i47.tinypic.com/r1ydg4.jpg" width="441" height="276" /></a></p>  <p>Makes sense? Nothing to difficult about this. What I just explained here is the basic functionality of Fiddler. Only monitoring your local traffic. The Windows Phone 8 emulator runs as a Hyper-V virtual machine, meaning it identifies itself as a separate device on the network. But that’s not really a problem, Fiddler in al its greatness can monitor remote devices as well. Here’s how to enable it.</p>  <p>First, start Fiddler and go to Tools &gt; Fiddler options. Go to tab “Connections” and check the “Allow remote computers to connect” option.</p>  <p><a href="http://i50.tinypic.com/awaowi.jpg" target="_blank"><img src="http://i50.tinypic.com/awaowi.jpg" width="449" height="303" /></a></p>  <p>Click OK, back on the Fiddler main screen, you’ll notice a textbox underneath the list of captured requests (a black one). That’s called the QuickExec box, it can be used to set preferences. In our case we need to add a hostname to our proxy. The hostname we need to add is the one from the Hyper-V host that is running the Windows Phone emulator, your developer machine in other words. Since all traffic from the Windows Phone emulator goes through our developer machines we need to attach Fiddler to our pc. The default localhost connection won’t work so we need to attach the Fiddler proxy to the network name. </p>  <p>In the QuickExec box enter this command</p>  <p><strong>prefs set fiddler.network.proxy.registrationhostname &lt;your computername&gt;</strong></p>  <p><a href="http://i50.tinypic.com/20aphu0.jpg" target="_blank"><img src="http://i50.tinypic.com/20aphu0.jpg" width="428" height="142" /></a></p>  <p>With that done, restart Fiddler and the Windows Phone emulator and behold the emulator’s traffic getting sniffed. As you can see on the screenshot below, if I use the mobile browser in the emulator to go to my blog Fiddler captures all the images, pages, scriptfiles etc. that are getting loaded. If I select one, the user agent clearly points to the Windows Phone 8 browser.</p>  <p><a href="http://i46.tinypic.com/29gn2mb.jpg" target="_blank"><img src="http://i46.tinypic.com/29gn2mb.jpg" width="471" height="252" /></a></p>  <p>Note that it doesn’t just captures the emulator’s traffic, all the localhost traffic is still captured as well.</p>  <p>Keep in mind that if you close Fiddler now there’s a chance that the Windows Phone emulator won’t have network access anymore, that’s because at startup it configured the Fiddler proxy as gateway, closing Fiddler means disabling the proxy. Simply restart the emulator and it should work fine again.</p>  <p>This is all great stuff, but eventually we’ll run into a situation where we need to sniff network traffic but for some reason we can’t use the emulator. With Fiddler we can also sniff the network traffic from an actual Windows Phone device, provided the machine running Fiddler and the Windows Phone are connected to the same network. </p>  <h2>Fiddler and WP8 devices</h2>  <p>To do this, setup Fiddler the same way as we did for the emulator. When that’s done, on you Windows Phone device go to Settings &gt; WiFi. Select the wireless network that your phone is connected to and enable the Proxy. Set the proxy url to the IP address or the hostname of the computer running Fiddler and the port to 8888.</p>  <p><a href="http://i45.tinypic.com/nx9pvk.jpg" target="_blank"><img src="http://i45.tinypic.com/nx9pvk.jpg" width="174" height="290" /></a></p>  <p>Fire up Fiddler, fire up the mobile browser on your phone and be amazed! </p>  <p>If you’re decrypting HTTPS traffic you might need to install the Fiddler certificate on your phone, the browser will prompt you to install it. Before testing your app with HTTPS, try the browser first so the certificate gets installed. Do be aware that every Fiddler installation generates its own certificate (they are self-signed so you might get a security warning, in this case its perfectly safe to ignore that warning) so you might need to install a new one when you use Fiddler on another machine.</p>  <p><a href="http://i47.tinypic.com/14bufti.jpg" target="_blank"><img src="http://i47.tinypic.com/14bufti.jpg" width="179" height="298" /></a></p>  <h2>&#160;</h2>  <h2>Conclusion</h2>  <p>In this post we’ve talked about using Fiddler, a great tool for sniffing and decrypting network requests, with both the Windows Phone 8 emulator and Windows Phone 8 devices. It’s really easy to setup and a great asset when working or developing services.</p>  <p>A few remarks to end this post:</p>  <p> If you ever change your computer’s hostname Fiddler will stop capturing Windows Phone network. Use the <strong>prefs set fiddler.network.proxy.registrationhostname &lt;your computername&gt;</strong> command again in the QuickExec box with the new hostname and Fiddler will happily continue its work.</p>  <p>If you computer is joined to a domain that has IPSEC security setup you will need to ask the administrator to add a IPSEC Boundary Computer exception for your computer.</p>  <p>Happy sniffing!</p>]]></content>
      <post-name type="text"><![CDATA[Windows Phone 8 and Fiddler]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
      </categories>
      <comments>
        <comment id="9c77e3fe-b561-4318-b0f5-88f058ed5b54" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-01-09T06:40:00" date-modified="2013-01-09T06:40:00" approved="true" user-name="venetasoft" user-email="david@venetasoft.it" user-ip="2.224.46.45" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Great article, thank you !!]]></content>
        </comment>
        <comment id="88ccdb82-2bad-432c-b4ac-1cb2e5f9b0e4" parentid="9c77e3fe-b561-4318-b0f5-88f058ed5b54" date-created="2013-01-09T08:07:01" date-modified="2013-01-09T08:07:01" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="193.41.233.140" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[You&#39;re welcome :) Glad you like it]]></content>
        </comment>
        <comment id="d48a1e3a-6035-4a07-8678-b30996728b25" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-03-20T14:14:19" date-modified="2013-03-20T14:14:19" approved="true" user-name="Ela" user-email="Keilen@gmail.com" user-ip="146.228.112.152" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[What I found here sounds quite interesting. I shall visit this place more often. Keep on posting!]]></content>
        </comment>
        <comment id="69c90b93-d1f7-4bf3-b46c-50570ed23d85" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-03-27T11:44:28" date-modified="2013-03-27T11:44:28" approved="true" user-name="Sofi" user-email="sofkl438@student.liu.se" user-ip="212.209.194.26" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi,
I&#39;ve tried to do all this multiple times, but it doesn&#39;t work for me. Usually I can&#39;t access the web at all from the WP8 emulator. Sometimes I can access the web from the emulator, but fiddler doesn&#39;t track it.
I know it has worked earlier (in december, but I&#39;ve reinstalled fiddler since then, now I have Fiddler v 4.4.3.0 beta)

it&#39;s worth mentioning that I need https decryption, so I need to get that working as well.

I don&#39;t have any filters applied. I can get the emulator to access the web, but then I have to go to the internet options and in LAN Settings uncheck the Proxy box and restart the emulator. So when Fiddler is working as Proxy I can&#39;t access the web (or my host).

What should I do? Can you help me, please?]]></content>
        </comment>
        <comment id="5ac713a7-bb27-4ab1-ad99-1af3f780bc56" parentid="69c90b93-d1f7-4bf3-b46c-50570ed23d85" date-created="2013-03-27T11:50:48" date-modified="2013-03-27T11:50:48" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="213.246.197.69" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi Sofi,

it sounds like a problem with your Hyper-V network settings, try deleting all virtual switches in your Hyper-V manager and adding a new one.]]></content>
        </comment>
        <comment id="10b4aabb-c010-4774-a4d6-968652a00a11" parentid="5ac713a7-bb27-4ab1-ad99-1af3f780bc56" date-created="2013-03-28T13:16:33" date-modified="2013-03-28T13:16:33" approved="true" user-name="Sofi" user-email="sofkl438@student.liu.se" user-ip="212.209.194.26" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi,
I&#39;ve tried to remove them and add it again.
But the one used is just a internal one, named &quot;Windows Phone Emulator Internal Switch&quot; is this correct?

Does it make any difference if Fiddler is running or not when I reopen the  emulator after adding the new virtual switch? (I think I&#39;ve tried both though..)]]></content>
        </comment>
        <comment id="a62ea1ee-bb99-4afe-ae62-960ec520ca94" parentid="10b4aabb-c010-4774-a4d6-968652a00a11" date-created="2013-03-30T08:32:30" date-modified="2013-03-30T08:32:30" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="81.83.12.177" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[I just checked my settings in Hyper-V and the windows Phone emulator virtual machine has 2 network connections, one that connects to the internal switch like you mentioned and a second one that connects to my physical network card]]></content>
        </comment>
        <comment id="cbebfddf-ed08-41b6-823e-d32831ec2553" parentid="a62ea1ee-bb99-4afe-ae62-960ec520ca94" date-created="2013-04-03T14:00:00" date-modified="2013-04-03T14:00:00" approved="true" user-name="Sofi" user-email="sofkl438@student.liu.se" user-ip="212.209.194.26" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi, I&#39;ve done some more testing and if I start the emulator when Fiddler isn&#39;t capturing. Then The emulator can reach the web. But if Fiddler is running then it can&#39;t. 
I do have two virtual switches (one internal and one external). The external one seems to take over the settings from my Ethernet connection and this connection is instead set to Hyper-V Extensible virtual switch.

I have the opposite problem with my simulator for Windows store apps. This one doesn&#39;t connect when Fiddler isn&#39;t running (It seems as it doesn&#39;t care if Fiddler is started or not while starting it. ) So I have to have Fiddler capturing when debugging the windows store app.

Shouldn&#39;t they adapt to the network on startup?]]></content>
        </comment>
        <comment id="fb289af1-653c-477c-8d4c-4ed5b65cc952" parentid="cbebfddf-ed08-41b6-823e-d32831ec2553" date-created="2013-04-03T14:00:25" date-modified="2013-04-03T14:00:25" approved="true" user-name="Sofi" user-email="sofkl438@student.liu.se" user-ip="212.209.194.26" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[And also, Thank you for trying to help me :)]]></content>
        </comment>
        <comment id="34ec07a9-1139-4b53-928e-84eae6cf17a6" parentid="cbebfddf-ed08-41b6-823e-d32831ec2553" date-created="2013-04-03T14:05:46" date-modified="2013-04-03T14:05:46" approved="true" user-name="Sofi" user-email="sofkl438@student.liu.se" user-ip="212.209.194.26" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[I just realized that the simulator can connect to webpage through the browser, just not through my application when Fiddler is off. But it reaches it from the application when Fiddler is on. Do you have any idea why? ]]></content>
        </comment>
        <comment id="e19795a9-bee5-4915-b09c-06d368c6d3c5" parentid="34ec07a9-1139-4b53-928e-84eae6cf17a6" date-created="2013-04-04T13:51:17" date-modified="2013-04-04T13:51:17" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="193.41.233.140" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[No idea, I haven&#39;t tried it with the Windows Store simulator. First thing that comes to mind is a problem with your firewall but that&#39;s a longshot. I&#39;m running out of ideas :)]]></content>
        </comment>
        <comment id="8aabce49-9e2c-4f75-86ae-dfc023fb5332" parentid="e19795a9-bee5-4915-b09c-06d368c6d3c5" date-created="2013-04-12T12:56:36" date-modified="2013-04-12T12:56:36" approved="true" user-name="Sofi" user-email="sofkl438@student.liu.se" user-ip="212.209.194.26" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Thanks for your help, I finally got it working again. I had used the ComputerName when setting the prefs, but I needed to use the FullComputerName.

]]></content>
        </comment>
        <comment id="8ca4b928-b3a4-4ab8-901c-6813061ec1be" parentid="8aabce49-9e2c-4f75-86ae-dfc023fb5332" date-created="2013-04-12T13:10:39" date-modified="2013-04-12T13:10:39" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="81.83.148.116" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[awesome, thanks for letting me know the solution :)]]></content>
        </comment>
        <comment id="d1a554aa-be4c-4c8b-9c72-967b5c40bd0e" parentid="8aabce49-9e2c-4f75-86ae-dfc023fb5332" date-created="2013-05-21T18:07:28" date-modified="2013-05-21T18:07:28" approved="true" user-name="Erik K" user-email="erik.kerber@gmail.com" user-ip="67.152.152.11" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Thank you Sofi, you and Google saved me some major headaches.

The *FULL* computer name should be specified in these howtos.]]></content>
        </comment>
        <comment id="c613402e-a079-47fd-b4de-7af60dbb39e9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-17T12:04:27" date-modified="2013-06-17T12:04:27" approved="false" user-name="German shepherd puppies for sale" user-email="mosexports@yahoo.com" user-ip="58.97.160.58" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[eally i am impressed from this post! The person who created this post is a generous and knows how to keep the readers connected. Thanks for sharing this with us found, it informative and interesting. Looking forward for more updates.

http://www.banffyhaus.com/]]></content>
        </comment>
        <comment id="6bc177ce-ac15-43bf-9937-51c83969033b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T14:25:51" date-modified="2013-06-19T14:25:51" approved="false" user-name="tratament candidoza" user-email="ashtontrevino@zoho.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi to every body, it&#39;s my first pay a quick visit of this weblog; this webpage carries awesome and really excellent material in favor of visitors.

Here is my webpage  tratament candidoza - http://jhappyverse18pn.blogbaker.com/2013/03/15/revealing-vital-factors-for-candidiasis ]]></content>
        </comment>
        <comment id="3643a522-39a4-4fc8-9f6a-5ff40d75020b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T15:26:02" date-modified="2013-06-19T15:26:02" approved="false" user-name="spondiloza" user-email="jeromechavis@zoho.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[The vacuum created from the disc aids to pull any herniated or protruded disc material back into the disc and stimulate circulation, and thereby accelerate the healing process. Also, the symptom could be the inability to boost the big toe on upward direction. Skilled operation technique with latest instruments.

my site -  spondiloza - http://spondiloza112.wordpress.com/2012/11/29/a-background-in-sensible-plans-for-spondylosis/ ]]></content>
        </comment>
        <comment id="7f19dffe-bf1e-4f90-a0ce-1242b7dd07c9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:09:34" date-modified="2013-06-19T19:09:34" approved="false" user-name="Michael Kors Purses" user-email="ezequieljaramillo@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Nice blog here! Also your web site loads up fast! What web host are you using? Can I get your affiliate link to your host? I wish my site loaded up as fast as yours lol

Also visit my blog ::  Michael Kors Purses - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="f7f9df91-7f85-4157-835a-bc918db2d143" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:09:45" date-modified="2013-06-19T19:09:45" approved="false" user-name="louis vuitton Purses" user-email="vickiesoutherland@yahoo.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi, i think that i noticed you visited my blog so i came to go back the desire?.I am trying to in finding things to enhance my website!I guess its adequate to use some of your ideas!!

Look into my blog post -  louis vuitton Purses - http://www.iaaccs.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="50aff538-9e4c-4b50-8262-18c1b494e218" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:10:43" date-modified="2013-06-19T19:10:43" approved="false" user-name="Michael Kors Handbags" user-email="jillian.benavidez@gmail.com" user-ip="199.119.227.168" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Someone necessarily lend a hand to make significantly articles I would state. That is the first time I frequented your web page and so far? I amazed with the research you made to make this actual publish amazing. Wonderful activity!

Also visit my blog post ::  Michael Kors Handbags - http://www.avlogbook.com/michael-kors-handbags.html ]]></content>
        </comment>
        <comment id="52167fc8-d528-4ed7-8441-c3f386b088dc" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T19:42:04" date-modified="2013-06-19T19:42:04" approved="false" user-name="Christal" user-email="christaltrudeau@arcor.de" user-ip="184.154.82.166" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[This post will assist the internet viewers for creating new weblog or even a weblog from start to end.

Feel free to surf to my web blog - Louis Vuitton Official Website ::  Christal - http://www.avlogbook.com/louis-vuitton-outlet.html  ::]]></content>
        </comment>
        <comment id="b8cad27c-9998-4dfe-8b67-c103718ae8e4" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T00:28:32" date-modified="2013-06-20T00:28:32" approved="false" user-name="candidoza" user-email="ellistran@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Have you ever considered about including a little bit more than just your articles? I mean, what you say is important and all. Nevertheless just imagine if you added some great images or video clips to give your posts more, &quot;pop&quot;! Your content is excellent but with images and videos, this website could undeniably be one of the most beneficial in its niche. Excellent blog!

My page ...  candidoza - http://bisefamily.com/biseboard/modules.php?name=Your_Account&amp;op=userinfo&amp;username=ZackPriet ]]></content>
        </comment>
        <comment id="1fc275e3-6a50-44ae-b71e-30bbd7acd98d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T08:37:24" date-modified="2013-06-20T08:37:24" approved="false" user-name="hernie de disc" user-email="shanemcclanahan@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Another thing you can do is get physical therapy or do exercises for helping strengthen the muscles inside the torso and back. &quot; When we consider the metaphysics of medicine vs chiropractic, look for a vastly different nature of reality. More and more people are most often turning to an effective alternative that a person, like a Dallas cold laser chiropractor, can provide.

Take a look at my page ...  hernie de disc - http://www.buildethiopia.org/ethiopia/RandalnwCopleyaq ]]></content>
        </comment>
        <comment id="e3b0cabc-dc73-4d5e-aef9-55f2240bd990" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T10:41:34" date-modified="2013-06-20T10:41:34" approved="false" user-name="volvo occasions" user-email="DoortjeJansen@yahoo.nl" user-ip="188.24.107.15" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[On our pages you will find a large number of used Volvo&#39;s in excellent condition. A Volvo possesses these properties as a new Volvo, but is considerably cheaper. Volvo stands for reliability and durability. - http://www.hooftman.nl/volvosales/volvo-occasions.html]]></content>
        </comment>
        <comment id="d56c06e8-2004-4830-ae96-68da672bc1de" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T23:31:16" date-modified="2013-06-20T23:31:16" approved="false" user-name="candidoza" user-email="casimiraladner@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Do you mind if I quote a couple of your articles as long as I provide credit and sources back to your webpage? My website is in the very same niche as yours and my users would certainly benefit from some of the information you provide here. Please let me know if this okay with you. Appreciate it!

Here is my web blog ::  candidoza - http://mallibooclub.com/index.php?do=/profile-1314/info/ ]]></content>
        </comment>
        <comment id="94171cc6-8b84-40b1-a2ef-627d07214a72" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T23:38:03" date-modified="2013-06-20T23:38:03" approved="false" user-name="get retweets" user-email="julissafain@bigstring.com" user-ip="5.135.85.80" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hmm it appears like your website ate my first comment (it was extremely long) so I guess I&#39;ll just sum it up what I submitted and say, I&#39;m thoroughly enjoying your blog. I as well am an aspiring blog writer but I&#39;m still new to the whole thing. Do you have any points for first-time blog writers? I&#39;d really appreciate it.

my web page:  get retweets - http://fandomaccess.com/PaulineHe ]]></content>
        </comment>
        <comment id="f36ca15d-6785-449a-9e28-79350d171157" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T23:56:14" date-modified="2013-06-20T23:56:14" approved="false" user-name="realisation terrasse bois composite" user-email="alfonsomarvin@emailplus.org" user-ip="173.208.196.205" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[What&#39;s up, constantly i used to check blog posts here in the early hours in the dawn, as i love to learn more and more.

Also visit my web page  realisation terrasse bois composite - http://skills4future.ning.com/profile/DeannaCoffey ]]></content>
        </comment>
        <comment id="e4598790-39d0-4628-9cac-4d43460ab6fc" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-21T17:12:00" date-modified="2013-06-21T17:12:00" approved="false" user-name="tratament hernie de disc" user-email="lidiaabraham@arcor.de" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Pain is created from inflammation and pressure this reduces the joint range of motion. Herniated Disc Treatments: exercises for herniated discs. The trouble is any particular one such antioxidant molecule from whatever source can neutralize only a few free-radical molecules before it&#39;s depleted.

Feel free to visit my homepage:  tratament hernie de disc - http://www.dailystrength.org/people/2238418/journal ]]></content>
        </comment>
        <comment id="ae717071-5f8c-45a7-8985-b11687a7ece6" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T08:33:28" date-modified="2013-06-22T08:33:28" approved="false" user-name="wallpaper software for windows 7 starter free download" user-email="gabriele_baird@arcor.de" user-ip="188.240.134.226" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hello my friend! I wish to say that this post is awesome, nice written and include almost all vital infos. I would like to see more posts like this .

my weblog  wallpaper software for windows 7 starter free download - http://Delshekaste.com/KieranVqe ]]></content>
        </comment>
        <comment id="8cca162f-2de8-4f76-9ede-6a3b3c135c5f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T13:47:35" date-modified="2013-06-22T13:47:35" approved="false" user-name="cabinet ginecologie" user-email="kaminicholas@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Admiring the time and effort you put into your blog and in depth information you provide. It&#39;s nice to come across a blog every once in a while that isn&#39;t the same out of date rehashed material. Excellent read! I&#39;ve saved your site and I&#39;m including your RSS feeds to my Google account.

My site ::  cabinet ginecologie - http://www.purevolume.com/jaywilmer30/posts/3614479 ]]></content>
        </comment>
        <comment id="3ffc4719-7a48-4217-9def-f25a53f40a5e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-23T00:56:40" date-modified="2013-06-23T00:56:40" approved="false" user-name="dureri de cap" user-email="victorina_granger@yahoo.de" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[There are plenty of sites on the internet that describe quite nicely that the sinus headache feels. The syndrome happens in one or two weeks before menstruation then declining once the period starts. A sinus headache surfaces when fluids within the nose are not able to drain well and pressure builds up in sinuses.

Feel free to visit my site ::  dureri de cap - http://eyeuser.com/blogs/viewstory/691466 ]]></content>
        </comment>
        <comment id="619360e0-045a-402c-9196-3cdb599809ba" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-23T16:51:43" date-modified="2013-06-23T16:51:43" approved="false" user-name="porte fenetre pvc prix" user-email="krisloper@inbox.com" user-ip="142.0.34.170" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hello mates, how is everything, and what you desire to say regarding this article, in my view its in fact amazing for me.

my web site ...  porte fenetre pvc prix - http://www.mysocialitz.com/index.php?do=/profile-3032/info/ ]]></content>
        </comment>
        <comment id="5f55fb86-177e-466b-b33e-9b0902626053" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-23T19:43:56" date-modified="2013-06-23T19:43:56" approved="false" user-name="ginecologie" user-email="myrtlejustice@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[What&#39;s up everybody, here every person is sharing these kinds of familiarity, thus it&#39;s fastidious to read this webpage, and I used to visit this webpage all the time.

Also visit my web blog ...  ginecologie - http://wiki.warlords.org.nz/index.php?title=User:CristineB ]]></content>
        </comment>
        <comment id="d67a334f-6f1e-4ec7-a6fb-30b9bd69f714" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T01:57:37" date-modified="2013-06-24T01:57:37" approved="false" user-name="Obstetrica ginecologie" user-email="doylesommer@zoho.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Magnificent beat ! I wish to apprentice at the same time as you amend your web site, how could i subscribe for a weblog web site? The account helped me a appropriate deal. I had been a little bit familiar of this your broadcast provided vivid transparent concept

my blog ...  Obstetrica ginecologie - http://faucet17locket.bravejournal.com/entry/124964 ]]></content>
        </comment>
        <comment id="0cf9eb21-4055-4568-a7c5-e1de7bfd9019" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T02:01:28" date-modified="2013-06-24T02:01:28" approved="false" user-name="comment devenir riche" user-email="marissa.turnbull@animail.net" user-ip="142.0.34.161" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[whoah this blog is magnificent i love reading your articles. Stay up the great work! You know, many individuals are hunting around for this info, you could help them greatly.

Also visit my homepage;  comment devenir riche - http://www.youtube.com/watch?v=u3X33mLaCj8 ]]></content>
        </comment>
        <comment id="655aa1d0-161c-4cc1-9f6a-dc96b099bf2f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T14:09:57" date-modified="2013-06-24T14:09:57" approved="false" user-name="idwebpulsa" user-email="lakeisha.gavin@t-online.de" user-ip="188.240.143.142" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[I do not know whether it&#39;s just me or if everybody else encountering problems with your website. It appears like some of the written text in your content are running off the screen. Can someone else please provide feedback and let me know if this is happening to them too? This might be a problem with my internet browser because I&#39;ve had this happen before. Cheers

Also visit my web-site  idwebpulsa - http://www.idwebpulsa.com/ ]]></content>
        </comment>
        <comment id="e0df7141-9625-4e77-b38f-80ede46205fa" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T16:35:23" date-modified="2013-06-24T16:35:23" approved="false" user-name="spondiloza" user-email="nydia_dickerson@yahoo.de" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Or you&#39;ll be able to fry ten garlic cloves in oil (60 grams). Such conditions, which cause neck pain, are: osteoporosis or tumors, ruptured or degenerated cervical disc, nerve dysfunctions, bone spur, spondylosis or congenital problems. Make it a regular habit of consuming leaves and flowers of the tree.

my web page:  spondiloza - http://www.scribbld.com/users/hyenabrandy6/376.html ]]></content>
        </comment>
        <comment id="ca9febe3-40c9-4c19-8d8b-4d96c1e3ea77" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T03:34:23" date-modified="2013-06-25T03:34:23" approved="false" user-name="volet roulant electrique" user-email="carlota.falcon@arcor.de" user-ip="208.89.208.202" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hey there, I think your blog might be having browser compatibility issues. When I look at your blog site in Opera, it looks fine but when opening in Internet Explorer, it has some overlapping. I just wanted to give you a quick heads up! Other then that, terrific blog!

Also visit my page;  volet roulant electrique - http://filmpreviews.tv/read_blog/36606/lcd-shutter-glasses-dlp-tv-related-articles ]]></content>
        </comment>
        <comment id="9d2d376c-718b-4700-8096-8d343ee04eb3" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T08:29:24" date-modified="2013-06-25T08:29:24" approved="false" user-name="parquet contrecoll&amp;#233; pas cher" user-email="jamika.israel@hotmail.de" user-ip="199.180.135.208" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Post writing is also a fun, if you know afterward you can write if not it is complex to write.

My page ...  parquet contrecoll&#233; pas cher - http://home.leshantv.net/space.php?uid=270816&amp;do=blog&amp;id=318899 ]]></content>
        </comment>
        <comment id="a5b6474f-2435-47d7-876e-5b93274553c7" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T18:21:39" date-modified="2013-06-25T18:21:39" approved="false" user-name="fabricant porte de garage enroulable" user-email="daniellasheehan@googlemail.com" user-ip="173.232.104.224" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[When I originally left a comment I appear to have clicked the -Notify me when new comments are added- checkbox and now whenever a comment is added I receive four emails with the same comment. There has to be a way you can remove me from that service? Thanks a lot!

Feel free to visit my homepage;  fabricant porte de garage enroulable - https://wikifarm.koumbit.net/wikigraphe/Garage_Door_Company_Oyster_Bay ]]></content>
        </comment>
        <comment id="bfbed447-c094-422b-b690-9dd7db06a8dd" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T21:32:50" date-modified="2013-06-25T21:32:50" approved="false" user-name="Michael Kors Purses" user-email="tomoko_keenan@mailc.net" user-ip="74.221.217.200" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[I am actually pleased to read this web site posts which contains lots of valuable information, thanks for providing these kinds of data.

Also visit my web site:  Michael Kors Purses - http://www.iaaccs.com/michaelkorsoutlet.html ]]></content>
        </comment>
        <comment id="06ebf843-836b-4a89-8bf7-756de3e2808c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T03:06:07" date-modified="2013-06-26T03:06:07" approved="false" user-name="Louis Vuitton Handbags Outlet" user-email="dorastamps@arcor.de" user-ip="184.154.133.218" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Wow, superb blog layout! How long have you been blogging for? you made blogging look easy. The overall look of your site is excellent, as well as the content!

my blog  Louis Vuitton Handbags Outlet - http://www.avlogbook.com/louis-vuitton-outlet.html ]]></content>
        </comment>
        <comment id="bb2fd17d-9a75-4599-9f24-2924233849dd" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T06:02:53" date-modified="2013-06-27T06:02:53" approved="false" user-name="poncer un parquet" user-email="rodrigogulley@gmail.com" user-ip="173.232.104.224" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[If you wish for to increase your familiarity simply keep visiting this website and be updated with the newest news posted here.

My site;  poncer un parquet - http://chaupal.biharfoundation.in/groups/parquet-cleaning-related-articles/ ]]></content>
        </comment>
        <comment id="5f13b4c4-1fe3-43f4-a73a-e2b16adbe6a1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T13:39:15" date-modified="2013-06-27T13:39:15" approved="false" user-name="psihoterapie" user-email="suzannamarra@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[For when treatments are humming, the number of choices for growth are endless. You simply have to translate dream images into words that will make sense for your conscience. s method into a fast method of instant translation from images into words.

my site ::  psihoterapie - http://studentschoose.net/learn/user/profile.php?id=28463 ]]></content>
        </comment>
        <comment id="bf721891-7476-4420-b769-9344670ae554" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T13:43:38" date-modified="2013-06-27T13:43:38" approved="false" user-name="jocuri ps3" user-email="pennibenton@web.de" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[How often can you longingly look at a new play station game and ponder whether you should indulge yourself and purchase one more. Final Fantasy XIV (2010, soon after FF XIII is released). Different genre of PS3 games make it for the top from the charts and attributed as &#39;game from the year&#39;.

Also visit my blog post ...  jocuri ps3 - http://isaiah70bat.soup.io/post/320509265/Advice-In-ps3-games-Whats-Required ]]></content>
        </comment>
        <comment id="4b9eb1bf-8ef5-4e5d-b16b-295a868a5b02" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T15:02:11" date-modified="2013-06-27T15:02:11" approved="false" user-name="renover un parquet ancien" user-email="lonamabe@elitemail.org" user-ip="5.135.42.139" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[If some one wants to be updated with most up-to-date technologies therefore he must be visit this site and be up to date everyday.

Here is my blog post:  renover un parquet ancien - http://discuss.glam.com/profiles/blogs/the-greater-toronto-area-heritage-home ]]></content>
        </comment>
        <comment id="b50bcc04-8d5a-48af-8a11-336711a43877" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T19:16:40" date-modified="2013-06-27T19:16:40" approved="false" user-name="freelance web designer" user-email="orlandowilks@gmx.de" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[In many cases, you are going to run into the very idea of a single professional having the ability to fill all of these areas. Listed here are a couple points to remember while building the mail list. Graphic designers produce and communicate their clients&#39; messages with good visual impact.

Also visit my web page:  freelance web designer - http://www.efreelancewebdesigner.com ]]></content>
        </comment>
        <comment id="cd1ff810-40d7-4dac-bf85-cd2ceadaecb3" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T02:32:52" date-modified="2013-06-28T02:32:52" approved="false" user-name="proxy" user-email="isabellehedrick@gmail.com" user-ip="91.237.249.171" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[You need not to worry in case a person attempts to access or change any of your information for they will not be able to do that as you have LDAP  proxy - http://en.netlog.com/seideliris/extra  set up in your server. Fortunately, they now enjoy the freedom to choose their own spouse based on mutual respect and attraction. requirements for developing SIP servers that offer both standard and advanced SIP services.]]></content>
        </comment>
        <comment id="17d9780f-3246-4a14-b9d1-a7e77ea3bce8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T05:52:29" date-modified="2013-06-28T05:52:29" approved="true" user-name="premium WordPress themes" user-email="hectorarndt@peacemail.com" user-ip="173.236.40.93" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[I&#39;d like to find out more? I&#39;d care to find out some additional information.

Here is my site ::  premium WordPress themes - http://anywp.com/ ]]></content>
        </comment>
        <comment id="2eacb95a-f3c7-40d0-b38b-afdc02738b58" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T10:51:43" date-modified="2013-06-29T10:51:43" approved="false" user-name="dureri de cap" user-email="theobussey@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Stress can trigger headaches throughout the holidays, specifically for those that are headache prone. Sinusitis is supposed to be the main cause of sinus headache. Headaches come from many different things, For instance, you&#39;re employed at a computer throughout the day with your head down most in the time, sleeping awkwardly on a pillow, or clinching your teeth.

Take a look at my blog;  dureri de cap - http://www.tryard.co.jp/cgi-bin/bbs/aska.cgi?res=ojzbcvemo ]]></content>
        </comment>
        <comment id="876ba9c3-8fa0-4f7b-84f8-3af905365b41" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T11:31:47" date-modified="2013-06-29T11:31:47" approved="false" user-name="hernie de disc" user-email="irvinmiller@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[The more you are taking action and embrace the method, the stronger plus much more internally driven you become. &quot; When we go through the metaphysics of drugs vs chiropractic, find a vastly different nature of reality. More and more people are turning to a prosperous alternative a thief, like a Dallas cold laser chiropractor, can provide.

Visit my blog ::  hernie de disc - https://easterhegg.ch/wiki/index.php?title=Benutzer:SVADeandr ]]></content>
        </comment>
        <comment id="75401186-4564-4e7a-9baa-f2ca5572f43e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T20:04:28" date-modified="2013-06-29T20:04:28" approved="false" user-name="norske spilleautomater p&amp;#229; nett" user-email="nicole-dew@gawab.com" user-ip="178.32.226.184" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Spilleautomater du kan casino smarte pengene eder jackpot. Casinoeuro eder en skjort det jeg liker det finnes en h&#228;ndelserik kommekontakt med euros norske festes evnt foran radiatoren vores casinoer: super ni casinoene finner du villig spilleautomater pa nett men et populaert super nudge 6000 verktoy forovervake ni n&#229;gon ekte klassiker. Du &#228;ger ikke hvor mange linjer automater g&#228;llande nett ni spillere som &#248;nsker noe emne kj&#248;leveskeautomatkasse : da varenda ni till&#229;ts tilgang til jackpot ni ett etablert anbefaler vi en utav moderne funksjoner inneha blitt herre alt fra klassiske kilometer til. N&#229;r eder aktiver og at du satser maksimalt  Norske Spilleautomater P&#229; Nett - http://bradleyhoy.jigsy.com/entries/general/the-options-for-vital-aspects-of-slots .]]></content>
        </comment>
        <comment id="6a544d0f-b373-4264-801c-431da56f2826" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T17:21:41" date-modified="2013-06-30T17:21:41" approved="false" user-name="isoler porte de garage basculante" user-email="vickeyorosco@gmail.com" user-ip="198.143.144.205" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[For most recent information you have to go to see world-wide-web and on world-wide-web I found this website as a finest web page for most up-to-date updates.

Feel free to surf to my homepage;  isoler porte de garage basculante - http://discuss.glam.com/profiles/blogs/a-certain-common-garage-door-problems ]]></content>
        </comment>
        <comment id="7666e3cb-f32d-49a7-8c9f-ac9eae9ca4a7" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T00:53:23" date-modified="2013-07-01T00:53:23" approved="false" user-name="fenetre pvc sur mesure prix" user-email="hershelscribner@inbox.com" user-ip="5.135.42.139" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[This is my first time pay a quick visit at here and i am truly pleassant to read all at single place.

my web site ::  fenetre pvc sur mesure prix - http://tech.lemanmanhattan.org/groups/lemanmanhattannews/wiki/b5090/Notable_Reasons_To_Buy_Pvc_Windows.html ]]></content>
        </comment>
        <comment id="7d4ddb15-9187-4cbc-a418-8dd5e299eed9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T22:54:37" date-modified="2013-07-01T22:54:37" approved="false" user-name="d&amp;#233;m&amp;#233;nagement lille" user-email="ralph_bumgarner@freenet.de" user-ip="5.135.42.145" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[It&#39;s going to be end of mine day, except before ending I am reading this great paragraph to increase my experience.

my blog ::  d&#233;m&#233;nagement lille - http://www.innovatehall.com/groups/recommendations-for-an-manageable-move/ ]]></content>
        </comment>
        <comment id="545599f0-5869-4dcb-944d-51ca7585d469" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T00:56:31" date-modified="2013-07-02T00:56:31" approved="false" user-name="demenageur lille" user-email="alvinfitzgerald@fmgirl.com" user-ip="142.0.34.170" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Thanks  for another informative web site. Where else may I am getting that type of information written in such an ideal method? I have a project that I&#39;m just now working on, and I have been on the look out for such info.

Also visit my weblog  demenageur lille - http://wanderer.com.br/glossario/index.php?title=User:LeonidaTh ]]></content>
        </comment>
        <comment id="53041ca5-c1b0-46db-8ea4-2445ca623b38" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T03:04:22" date-modified="2013-07-02T03:04:22" approved="false" user-name="demenageur lille" user-email="alonzolanglois@arcor.de" user-ip="178.32.168.169" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[I tend not to create a great deal of responses, however I looked at a bunch of remarks here Nico&#39;s digital footprint | Windows Phone 8 and Fiddler. I do have 2 questions for you if you do not mind. Is it simply me or do some of these remarks appear like they are written by brain dead visitors? :-P And, if you are posting at additional sites, I&#39;d like to follow you. Would you list of the complete urls of your social networking pages like your Facebook page, twitter feed, or linkedin profile?

my blog:  demenageur lille - http://mystery.dianasgrove.com/pg/forum/topic/144527/the-best-way-to-pack-and-move-a-computer/ ]]></content>
        </comment>
        <comment id="cc5ab0f6-4963-4a62-9b54-ea8234c66ab1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T08:19:07" date-modified="2013-07-02T08:19:07" approved="false" user-name="demenagement lille" user-email="nilda_somerville@bigstring.com" user-ip="199.180.135.208" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Wow, this piece of writing is nice, my sister is analyzing such things, so I am going to convey her.

Here is my site ...  demenagement lille - http://myteendating.com/index.php?do=/profile-6627/info/ ]]></content>
        </comment>
        <comment id="0620c7a2-6b85-414e-bbcf-eb86a1e52a63" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T08:26:46" date-modified="2013-07-02T08:26:46" approved="false" user-name="jeu concours gratuit" user-email="kendrickmejia@yahoo.com" user-ip="198.143.143.246" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[This post will assist the internet visitors for creating new weblog or even a weblog from start to end.

Have a look at my weblog ::  jeu concours gratuit - http://lochcarrongarage.com/index.php?option=com_blog&amp;view=comments&amp;pid=58128&amp;Itemid=0 ]]></content>
        </comment>
        <comment id="ffe3b0d2-4867-4310-8bad-218c0afe56ad" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T09:56:09" date-modified="2013-07-02T09:56:09" approved="false" user-name="demenageur lille" user-email="julianne-furlong@googlemail.com" user-ip="66.248.194.90" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[always i used to read smaller posts which as well clear their motive, and that is also happening with this article which I am reading now.

Feel free to surf to my blog post -  demenageur lille - http://somosconservadores.ning.com/profiles/blog/list?user=2xbk9qqw5lcxd&amp;xg_source=activity ]]></content>
        </comment>
        <comment id="ebcc1a82-b16e-4c56-8d4d-0920602902ef" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T07:17:22" date-modified="2013-07-03T07:17:22" approved="false" user-name="d&amp;#233;m&amp;#233;nagement lille" user-email="niklasbehrens@yahoo.de" user-ip="178.33.181.42" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hello There. I found your blog using msn. This is a really well written article. I&#39;ll make sure to bookmark it and return to read more of your useful information. Thanks for the post. I will certainly return.

Visit my blog post;  d&#233;m&#233;nagement lille - http://team-6.eng.toyo.ac.jp/practice3/index.php/%E5%88%A9%E7%94%A8%E8%80%85:MeredithB ]]></content>
        </comment>
        <comment id="0c9c7d62-d548-4ba6-bc53-968897b7ea7e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T08:47:51" date-modified="2013-07-03T08:47:51" approved="false" user-name="pose de lame de terrasse composite" user-email="nelson.reedy@gawab.com" user-ip="142.0.34.137" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi, i believe that i saw you visited my web site so i got here to go back the desire?.I&#39;m attempting to find things to improve my site!I guess its good enough to make use of some of your ideas!!

my web page -  pose de lame de terrasse composite - http://scubaspots.com/blogs/9019/29108/hardwood-molding-ideas-because-h ]]></content>
        </comment>
        <comment id="b5b6d297-3aeb-4656-b7f8-a77db1568874" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T19:24:06" date-modified="2013-07-03T19:24:06" approved="false" user-name="impresa pulizia milano" user-email="Romano14Luisa@yahoo.com" user-ip="188.24.59.60" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[The Quality of service is an art and for us is to make available to the customer our creative skills and techniques, understanding the needs hygienic, aesthetic and functional working environment, ensuring the livability environmental and facilitating productivity with a series of complementary services, in such a way as to represent an added value for the customer and not just a cost. More details about our cleaning company at http://www.sixlands.com.]]></content>
        </comment>
        <comment id="1f3d3c51-db48-4072-907b-f5870754393f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T21:19:22" date-modified="2013-07-03T21:19:22" approved="false" user-name="freelance web designer" user-email="merlearchibald@gmail.com" user-ip="5.9.198.240" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hence you should be very much careful while composing content. Listed here are some points to recollect while building the mail list. Professional designers hold the knack of making layouts which appeal to customers by strategically placing information inside layout.

Also visit my weblog:  freelance web designer - http://efreelancewebdesigner.com ]]></content>
        </comment>
        <comment id="6ab9570f-2c59-419f-aba1-99713fe00ced" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T23:07:32" date-modified="2013-07-03T23:07:32" approved="false" user-name="impresa pulizia milano" user-email="DeLuca15Luisa@yahoo.com" user-ip="188.24.59.250" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[The Quality of service is an art and for us is to make available to the customer our creative skills and techniques, understanding the needs hygienic, aesthetic and functional working environment, ensuring the livability environmental and facilitating productivity with a series of complementary services, in such a way as to represent an added value for the customer and not just a cost. More details about our cleaning company at http://www.sixlands.com.]]></content>
        </comment>
        <comment id="78399471-cbe1-4ad1-b06b-7161dce71114" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T02:59:09" date-modified="2013-07-04T02:59:09" approved="false" user-name="location vaisselle" user-email="randolph.cyr@yahoo.de" user-ip="184.154.22.44" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hmm it looks like your website ate my first comment (it was super long) so I guess I&#39;ll just sum it up what I submitted and say, I&#39;m thoroughly enjoying your blog. I too am an aspiring blog writer but I&#39;m still new to everything. Do you have any points for novice blog writers? I&#39;d really appreciate it.

Feel free to surf to my web blog -  location vaisselle - http://www.wikiaduanas.com/w/index.php?title=Usuario:Frank8510 ]]></content>
        </comment>
        <comment id="578efbd7-6922-4832-b80b-a944a2ee11c8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T05:21:18" date-modified="2013-07-04T05:21:18" approved="false" user-name="vitrifier un parquet ancien" user-email="karolinmccarter@zoho.com" user-ip="184.154.22.44" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi i am kavin, its my first occasion to commenting anyplace, when i read this article i thought i could also create comment due to this brilliant post.

my web blog ::  vitrifier un parquet ancien - http://wiki.ocali.org/groups/demowiki/wiki/bc0c1/Strategies_To_Install_Hardwood_Floors_By_Yourself.html ]]></content>
        </comment>
        <comment id="a0e038ab-008c-4a75-8b3b-45da185c5274" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T05:45:11" date-modified="2013-07-04T05:45:11" approved="false" user-name="renover un parquet sans poncer" user-email="bennie.presley@animail.net" user-ip="178.32.168.169" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hello! I&#39;m at work browsing your blog from my new apple iphone! Just wanted to say I love reading your blog and look forward to all your posts! Carry on the outstanding work!

Here is my site -  renover un parquet sans poncer - http://alpha.ideasafrica.com/profile/MMGMaxine ]]></content>
        </comment>
        <comment id="732361e4-3e7f-4da5-afb7-cff04190e263" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T14:23:16" date-modified="2013-07-04T14:23:16" approved="false" user-name="ou acheter des actions" user-email="mitchtemple@yahoo.com" user-ip="5.254.143.124" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Hi there friends, good paragraph and nice arguments commented at this place, I am really enjoying by these.

My blog:  ou acheter des actions - http://www.ourpleasantvalley.com/groups/types-of-auto-finance/ ]]></content>
        </comment>
        <comment id="338bc2df-0d52-4f03-9fb0-fb7c7b8792c9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T23:37:58" date-modified="2013-07-04T23:37:58" approved="false" user-name="plombier de nuit paris" user-email="tanishachristopher@bigstring.com" user-ip="178.33.181.42" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Do you mind if I quote a few of your posts as long as I provide credit and sources back to your blog? My blog is in the very same niche as yours and my visitors would truly benefit from a lot of the information you provide here. Please let me know if this ok with you. Thanks!

Here is my website:  plombier de nuit paris - http://www.ktmet.com/wiki/index.php?title=Usuario:Mari7844 ]]></content>
        </comment>
        <comment id="7216773b-94e6-4701-b329-b382648d1367" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T23:48:36" date-modified="2013-07-04T23:48:36" approved="false" user-name="convertwebsitemobile.com" user-email="kassandracrawford@gmail.com" user-ip="184.154.76.232" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Amazing! This blog looks exactly like my old one! It&#39;s on a entirely different subject but it has pretty much the same page layout and design. Outstanding choice of colors!

Here is my blog post; optimise your * convertwebsitemobile.com - http://convertwebsitemobile.com/ *]]></content>
        </comment>
        <comment id="fd363fe9-988b-44c6-bd59-bea6435069f5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T01:19:29" date-modified="2013-07-05T01:19:29" approved="false" user-name="phenix option avis" user-email="luann-bailey@t-online.de" user-ip="142.0.34.137" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[It&#39;s actually a great and useful piece of information. I&#39;m glad that you simply shared this useful info with us. Please stay us up to date like this. Thank you for sharing.

Feel free to surf to my webpage -  phenix option avis - http://phenixoption.xanga.com/weblog/ ]]></content>
        </comment>
        <comment id="4711fc37-7467-47d0-84ca-d3abfe292e98" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T05:44:35" date-modified="2013-07-05T05:44:35" approved="false" user-name="poncer le parquet" user-email="clintonkearns@gmail.com" user-ip="184.154.22.44" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Do you have a spam problem on this website; I also am a blogger, and I was wondering your situation; we have developed some nice methods and we are looking to exchange solutions with other folks, please shoot me an e-mail if interested.

Feel free to surf to my website ::  poncer le parquet - http://thinkstr.com/blog/1140828/combine-a-a-number-of-tablespoons-of-baking-soda-with-some-cozy-water-right/ ]]></content>
        </comment>
        <comment id="adab794d-109a-4830-8691-fc6869466e2b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T14:36:50" date-modified="2013-07-06T14:36:50" approved="false" user-name="spilleautomater" user-email="theodoreoswald@arcor.de" user-ip="178.33.162.58" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Her eder lagt under kategorien beste online spilleautomaten casumo ni et casinoeventyr avfall kasinospillet nudge her og spillprodukter som ni dersom ni nedminste detalj. Likevel ni det sikre sin fortjeneste. Spiller funksjonen lar deg pengar &#229;kte f&#229; tilgang automater g&#228;llande nett. Betsson og tilbyr det underbart nudge 6000 finnes n&#229;gon h&#228;ndelserik gratulerer tillsammans dagen avfall but also helps build tandem ti&#229;rene at det asbra nudge 6000 man &#248;nsker teste demospill dom fleste norske casinoer.

Feel free to surf to my weblog -  spilleautomater - http://wiki.ssm-fans.info/inn_nudge_6000_ni_setter_far_norske ]]></content>
        </comment>
        <comment id="b86f47a4-07cf-4dd7-9fdc-50419a11e2f6" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T22:47:34" date-modified="2013-07-06T22:47:34" approved="false" user-name="wordpress plugin developer" user-email="rufusworthy@web.de" user-ip="78.46.180.93" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[Thank you for the auspicious writeup. It in fact was a amusement account it. Look advanced to more added agreeable from you! However, how could we communicate?

Also visit my site  wordpress plugin developer - http://rehatched.com ]]></content>
        </comment>
        <comment id="2221d4db-b710-4fec-ae77-da30da60bbe3" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-06T23:24:47" date-modified="2013-07-06T23:24:47" approved="false" user-name="demenagement lille" user-email="erintapia@web.de" user-ip="176.31.3.182" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[It&#39;s amazing designed for me to have a web site, which is good in support of my know-how. thanks admin

My web blog -  demenagement lille - http://i-live-football.com/wiki/index.php?title=Benutzer_Diskussion:ZaraEWJB ]]></content>
        </comment>
        <comment id="14d7646d-3f30-4a75-be9f-0119087bb9fc" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-07T07:47:55" date-modified="2013-07-07T07:47:55" approved="false" user-name="wordrpess" user-email="ricardonakamura@arcor.de" user-ip="78.46.180.93" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[When someone writes an piece of writing he/she retains the plan of a user in his/her brain that how a user can be aware of it. So that&#39;s why this post is amazing. Thanks!

My web blog -  wordrpess - http://rehatched.com ]]></content>
        </comment>
        <comment id="4f2880fd-033d-4239-92cb-5a5e610d136c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-07T13:51:48" date-modified="2013-07-07T13:51:48" approved="false" user-name="jeux concours argent" user-email="iona.otis@gawab.com" user-ip="5.135.42.144" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[You actually make it seem so easy with your presentation but I find this topic to be really something which I think I would never understand. It seems too complicated and very broad for me. I am looking forward for your next post, I will try to get the hang of it!

Feel free to surf to my web site -  jeux concours argent - http://www.e-guernica.net/wiki_scuola/TyronewrJoseox ]]></content>
        </comment>
        <comment id="c0e76579-df3f-4d3e-a8c0-61c19707cee8" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-07T21:27:09" date-modified="2013-07-07T21:27:09" approved="false" user-name="hire wordpress developer" user-email="karl_kirk@t-online.de" user-ip="78.46.180.93" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[It&#39;s actually very complex in this busy life to listen news on TV, thus I just use the web for that purpose, and take the latest news.

Look into my homepage:  hire wordpress developer - http://rehatched.com ]]></content>
        </comment>
        <comment id="4ef16c3c-5df1-4165-8c57-2d365cd1dd3f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-08T07:27:57" date-modified="2013-07-08T07:27:57" approved="false" user-name="renover un parquet sans poncer" user-email="lashawn-barney@bigstring.com" user-ip="37.59.85.110" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8 and Fiddler]]></title>
          <content type="text"><![CDATA[My family members always say that I am killing my time here at web, however I know I am getting experience every day by reading such good posts.

Also visit my blog post:  renover un parquet sans poncer - http://wr.lib.tsinghua.edu.cn/node/66942 ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="c1cf9359-d198-4a52-8741-cc5aaa39d8b9" date-created="2013-01-08T12:34:01" date-modified="2013-01-08T12:34:01" approved="true" url="http://www.silverlightshow.net/news/Windows-Phone-8-and-Fiddler.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

Windows Phone 8 and Fiddler]]></title>
        </trackback>
        <trackback id="146607a0-7143-4b68-84d5-ce92f2af22d9" date-created="2013-01-08T13:11:27" date-modified="2013-01-08T13:11:27" approved="true" url="http://www.win8resources.com/2013/01/08/windows-phone-8-and-fiddler/">
          <title type="text"><![CDATA[Pingback from win8resources.com

Windows Phone 8 and Fiddler]]></title>
        </trackback>
        <trackback id="f51b6372-1f9f-4dd8-8dea-2cdd59a6daca" date-created="2014-03-03T23:05:27" date-modified="2014-03-03T23:05:27" approved="true" url="http://blogs.msdn.com/b/axcompapp/archive/2014/03/03/faq-for-companion-apps.aspx">
          <title type="text"><![CDATA[FAQ for Companion Apps

As we see activity in configuring environments for AX mobile apps, we are seeing some common questions]]></title>
        </trackback>
        <trackback id="b1949fa6-376f-4e48-997e-686c378d3639" date-created="2014-03-04T04:59:12" date-modified="2014-03-04T04:59:12" approved="true" url="http://msdnrss.thecoderblogs.com/2014/03/faq-for-companion-apps/">
          <title type="text"><![CDATA[Pingback from msdnrss.thecoderblogs.com

FAQ for Companion Apps | MSDN Blogs]]></title>
        </trackback>
        <trackback id="a8562a06-08ca-41c2-91df-107c64aad1ef" date-created="2016-03-02T05:39:29" date-modified="2016-03-02T05:39:29" approved="true" url="https://blogs.msdn.microsoft.com/axcompapp/2014/03/03/faq-for-companion-apps/">
          <title type="text"><![CDATA[Pingback from blogs.msdn.microsoft.com

FAQ for Companion Apps | Dynamics AX Companion Apps]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="ff3238d0-0ab2-41b7-9222-2cac23120838" date-created="2012-12-11T16:28:00" date-modified="2012-12-11T16:29:12" approved="true" post-url="/blog/post/2012/12/11/Discovering-the-Windows-Phone-8-SDK-MSDN-webcast-slides-and-demos.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Discovering the Windows Phone 8 SDK MSDN webcast slides and demos]]></title>
      <content type="text"><![CDATA[<p>Today I did my second MSDN webcast, this time about the brand new Windows Phone 8 SDK. I had great fun doing this, I knew what to expect so I went in relaxed and just enjoyed it. This time even the audio and recording went fine (had no sound for the first five minute last time). The recording is being edited the coming days and should be on Channel9 somewhere next week I think, I’ll update this post when it’s online.</p>  <p>Until then, my demos can be found on <a href="http://sdrv.ms/S4ituh" target="_blank">SkyDrive</a> and my slides are on <a href="http://www.slideshare.net/nicovermeir/discovering-the-wp8-sdk?ref=http://www.spikie.be/blog/" target="_blank">SlideShare</a>.</p>  <p><iframe height="400" marginheight="0" src="http://www.slideshare.net/slideshow/embed_code/15590378" frameborder="0" width="476" marginwidth="0" scrolling="no"></iframe></p>]]></content>
      <post-name type="text"><![CDATA[Discovering the Windows Phone 8 SDK MSDN webcast slides and demos]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="a32f3d48-8cb6-4bb0-81e3-59bd37a2678b" />
        <category ref="e96ada6a-e768-4392-a18e-c2f0d6f81016" />
      </categories>
    </post>
    <post id="1706cd62-5a3d-46ed-9507-1995531cf79e" date-created="2012-11-21T22:53:27" date-modified="2013-05-29T00:38:19" approved="true" post-url="/blog/post/2012/11/21/Stream-comics-from-Windows-8-to-other-devices-using-PlayTo.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Stream comics from Windows 8 to other devices using PlayTo]]></title>
      <content type="text"><![CDATA[<p>There are plenty of blogposts, tutorials, videos, books and many more out there that talk about searching, sharing settings and if you’re lucky even printing. But the Devices charm can be used for something way cooler than printing some pages, it can trigger the Play To contract.</p>  <p>The Play To contract can share media like music, video and pictures to other devices on your network, be it other Windows 8 devices or even Xbox 360 consoles. Being a comic geek I the first thing on my mind when reading about the Play To contract was “this would be awesome to stream comics from my pc to my Xbox” and so a challenge was born and accepted on the same day. An evening or two of hacking later I’m proud to say that I did it and it’s really easy, just like everything that involves charms (Microsoft really did a good job on allowing us to integrate our apps with the OS here). Most of the time putting this thing together went to building the actual comic viewer, but enough talk, let’s take a look at how it’s done. First let me show you how it looks like, we’ll start with the app itself.</p>  <p><a href="http://i50.tinypic.com/11iero0.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i50.tinypic.com/11iero0.jpg" width="413" height="232" /></a></p>  <p>Pretty empty so far, if we load a digital comic (only .cbz format supported in this demo) and select the Devices charm we get this.</p>  <p><a href="http://i45.tinypic.com/35ic3fq.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i45.tinypic.com/35ic3fq.jpg" width="419" height="236" /></a></p>  <p>That’s right! that’s Captain America himself, including Bucky. And oh yeah, the xbox shows up in the Devices charm as well. After selecting the xbox from the list of devices we get this.</p>  <p><a href="http://i50.tinypic.com/14b11e0.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i50.tinypic.com/14b11e0.jpg" width="427" height="240" /></a></p>  <p>And here it is playing on my TV (yes that’s a Sony, because Microsoft doesn’t build televisions yet <img class="wlEmoticon wlEmoticon-winkingsmile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Winking smile" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-winkingsmile.png" />)</p>  <p><a href="http://i46.tinypic.com/2rqoec7.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i46.tinypic.com/2rqoec7.jpg" width="432" height="324" /></a></p>  <p>Pretty cool eh? Let’s check under the hood.</p>  <p>First, a digital comic mostly exists in either .cbz or .cbr format. They’re actually nothing more then a zip or a rar file (Comic Book Zip and Comic Book Rar). Since WinRT has the ZipArchive class we can support .cbz out of the box, for cbr format we would need to find a library that supports rar files but that’s outside the scope of this post.</p>  <p>First the XAML, the main control here is a FlipView, that allows for touch and mouse support out of the box. The FlipView is bound to a collection of bitmap images that get loaded from the digital comic. Next to the FlipView there’s also an appbar containing the load file button and a textblock that shows the connection to other devices.</p>  <div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">   <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">     <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">&lt;</span><span style="color: #800000">common:LayoutAwarePage.BottomAppBar</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">AppBar</span> <span style="color: #ff0000">IsOpen</span><span style="color: #0000ff">=&quot;True&quot;</span> <span style="color: #ff0000">Background</span><span style="color: #0000ff">=&quot;#FF1A76B6&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">StackPanel</span> <span style="color: #ff0000">Orientation</span><span style="color: #0000ff">=&quot;Horizontal&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">Button</span> <span style="color: #ff0000">Click</span><span style="color: #0000ff">=&quot;OpenButton_Click&quot;</span> <span style="color: #ff0000">Style</span><span style="color: #0000ff">=&quot;{StaticResource OpenFileAppBarButtonStyle}&quot;</span> <span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>         <span style="color: #0000ff">&lt;/</span><span style="color: #800000">StackPanel</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">AppBar</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span> <span style="color: #0000ff">&lt;/</span><span style="color: #800000">common:LayoutAwarePage.BottomAppBar</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span> <span style="color: #0000ff">&lt;</span><span style="color: #800000">Grid</span> <span style="color: #ff0000">Style</span><span style="color: #0000ff">=&quot;{StaticResource LayoutRootStyle}&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">Grid.RowDefinitions</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">RowDefinition</span> <span style="color: #ff0000">Height</span><span style="color: #0000ff">=&quot;140&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">RowDefinition</span> <span style="color: #ff0000">Height</span><span style="color: #0000ff">=&quot;*&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum13" style="color: #606060">  13:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Grid.RowDefinitions</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum14" style="color: #606060">  14:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum15" style="color: #606060">  15:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">TextBlock</span> <span style="color: #ff0000">x:Name</span><span style="color: #0000ff">=&quot;ConnectionText&quot;</span> <span style="color: #ff0000">TextWrapping</span><span style="color: #0000ff">=&quot;Wrap&quot;</span> <span style="color: #ff0000">Text</span><span style="color: #0000ff">=&quot;Not connected&quot;</span> <span style="color: #ff0000">Margin</span><span style="color: #0000ff">=&quot;38,18,766,571&quot;</span> </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum16" style="color: #606060">  16:</span>                <span style="color: #ff0000">Grid</span>.<span style="color: #ff0000">Row</span><span style="color: #0000ff">=&quot;1&quot;</span> <span style="color: #ff0000">Style</span><span style="color: #0000ff">=&quot;{StaticResource SubheaderTextStyle}&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum17" style="color: #606060">  17:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum18" style="color: #606060">  18:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">FlipView</span> <span style="color: #ff0000">x:Name</span><span style="color: #0000ff">=&quot;FlipImage&quot;</span> <span style="color: #ff0000">Margin</span><span style="color: #0000ff">=&quot;0,3,0,0&quot;</span> <span style="color: #ff0000">Grid</span>.<span style="color: #ff0000">RowSpan</span><span style="color: #0000ff">=&quot;2&quot;</span> <span style="color: #ff0000">SelectionChanged</span><span style="color: #0000ff">=&quot;FlipImage_NextImage&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum19" style="color: #606060">  19:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">FlipView.ItemTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum20" style="color: #606060">  20:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum21" style="color: #606060">  21:</span>                 <span style="color: #0000ff">&lt;</span><span style="color: #800000">Image</span> <span style="color: #ff0000">Source</span><span style="color: #0000ff">=&quot;{Binding}&quot;</span> <span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum22" style="color: #606060">  22:</span>             <span style="color: #0000ff">&lt;/</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum23" style="color: #606060">  23:</span>         <span style="color: #0000ff">&lt;/</span><span style="color: #800000">FlipView.ItemTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum24" style="color: #606060">  24:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">FlipView</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum25" style="color: #606060">  25:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum26" style="color: #606060">  26:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">Grid</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum27" style="color: #606060">  27:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">Grid.ColumnDefinitions</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum28" style="color: #606060">  28:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">ColumnDefinition</span> <span style="color: #ff0000">Width</span><span style="color: #0000ff">=&quot;Auto&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum29" style="color: #606060">  29:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">ColumnDefinition</span> <span style="color: #ff0000">Width</span><span style="color: #0000ff">=&quot;*&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum30" style="color: #606060">  30:</span>         <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Grid.ColumnDefinitions</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum31" style="color: #606060">  31:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">Button</span> <span style="color: #ff0000">x:Name</span><span style="color: #0000ff">=&quot;backButton&quot;</span> <span style="color: #ff0000">Click</span><span style="color: #0000ff">=&quot;GoBack&quot;</span> <span style="color: #ff0000">IsEnabled</span><span style="color: #0000ff">=&quot;{Binding Frame.CanGoBack, ElementName=pageRoot}&quot;</span> </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum32" style="color: #606060">  32:</span>                 <span style="color: #ff0000">Style</span><span style="color: #0000ff">=&quot;{StaticResource BackButtonStyle}&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum33" style="color: #606060">  33:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">TextBlock</span> <span style="color: #ff0000">x:Name</span><span style="color: #0000ff">=&quot;pageTitle&quot;</span> <span style="color: #ff0000">Grid</span>.<span style="color: #ff0000">Column</span><span style="color: #0000ff">=&quot;1&quot;</span> <span style="color: #ff0000">Text</span><span style="color: #0000ff">=&quot;{StaticResource AppName}&quot;</span> </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum34" style="color: #606060">  34:</span>                    <span style="color: #ff0000">Style</span><span style="color: #0000ff">=&quot;{StaticResource PageHeaderTextStyle}&quot;</span><span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum35" style="color: #606060">  35:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Grid</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum36" style="color: #606060">  36:</span> <span style="color: #0000ff">&lt;/</span><span style="color: #800000">Grid</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF--></div>
</div>

<p>The FlipView template is just a simple Image control, nothing special in the XAML, the magic is in the code behind.</p>

<p>First some fields that we’ll need later on</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> List&lt;BitmapImage&gt; _pages;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> <span style="color: #0000ff">private</span> <span style="color: #0000ff">bool</span> _isConnected;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span> <span style="color: #0000ff">private</span> Image _current;</pre>
<!--CRLF--></div>
</div>

<p>We’re going to take a look at how to load the cbz file first, I’ll go over this quickly as the main focus of this post is the PlayTo contract.</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> async <span style="color: #0000ff">void</span> OpenButton_Click(<span style="color: #0000ff">object</span> sender, RoutedEventArgs e)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     _pages = <span style="color: #0000ff">new</span> List&lt;BitmapImage&gt;();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     _pages = await OpenZip();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>     <span style="color: #0000ff">if</span> (_pages.Count &gt; 0)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>         FlipImage.ItemsSource = _pages;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span> }</pre>
<!--CRLF--></div>
</div>

<p>All we do in the button’s eventhandler is initializing the field that will hold all the pages, call the function that will load the file and if it contains any items it will set the FlipView’s itemssource to that list. Next up: the function to load the comic.</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> async Task&lt;List&lt;BitmapImage&gt;&gt; OpenZip()</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     FileOpenPicker openPicker = <span style="color: #0000ff">new</span> FileOpenPicker();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>     List&lt;BitmapImage&gt; comic = <span style="color: #0000ff">new</span> List&lt;BitmapImage&gt;();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>     openPicker.SuggestedStartLocation = PickerLocationId.ComputerFolder;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>     openPicker.FileTypeFilter.Add(<span style="color: #006080">&quot;.cbz&quot;</span>);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>     var storageFile = await openPicker.PickSingleFileAsync();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>     <span style="color: #008000">// Create stream for compressed files in memory</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>     <span style="color: #0000ff">using</span> (MemoryStream zipMemoryStream = <span style="color: #0000ff">new</span> MemoryStream())</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span>     {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum13" style="color: #606060">  13:</span>         <span style="color: #0000ff">using</span> (IRandomAccessStream zipStream = await storageFile.OpenAsync(FileAccessMode.Read))</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum14" style="color: #606060">  14:</span>         {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum15" style="color: #606060">  15:</span>             <span style="color: #008000">// Read compressed data from file to memory stream</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum16" style="color: #606060">  16:</span>             <span style="color: #0000ff">using</span> (Stream instream = zipStream.AsStreamForRead())</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum17" style="color: #606060">  17:</span>             {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum18" style="color: #606060">  18:</span>                 <span style="color: #0000ff">byte</span>[] buffer = <span style="color: #0000ff">new</span> <span style="color: #0000ff">byte</span>[1024];</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum19" style="color: #606060">  19:</span>                 <span style="color: #0000ff">while</span> (instream.Read(buffer, 0, buffer.Length) &gt; 0)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum20" style="color: #606060">  20:</span>                 {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum21" style="color: #606060">  21:</span>                     zipMemoryStream.Write(buffer, 0, buffer.Length);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum22" style="color: #606060">  22:</span>                 }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum23" style="color: #606060">  23:</span>             }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum24" style="color: #606060">  24:</span>         }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum25" style="color: #606060">  25:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum26" style="color: #606060">  26:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum27" style="color: #606060">  27:</span>         <span style="color: #008000">// Create zip archive to access compressed files in memory stream</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum28" style="color: #606060">  28:</span>         <span style="color: #0000ff">using</span> (ZipArchive zipArchive = <span style="color: #0000ff">new</span> ZipArchive(zipMemoryStream, ZipArchiveMode.Read))</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum29" style="color: #606060">  29:</span>         {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum30" style="color: #606060">  30:</span>             <span style="color: #008000">// For each compressed file...</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum31" style="color: #606060">  31:</span>             <span style="color: #0000ff">foreach</span> (ZipArchiveEntry item <span style="color: #0000ff">in</span> zipArchive.Entries)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum32" style="color: #606060">  32:</span>             {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum33" style="color: #606060">  33:</span>                 <span style="color: #0000ff">if</span> (item.Name.EndsWith(<span style="color: #006080">&quot;.jpg&quot;</span>, StringComparison.OrdinalIgnoreCase))</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum34" style="color: #606060">  34:</span>                 {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum35" style="color: #606060">  35:</span>                     <span style="color: #0000ff">byte</span>[] imageInBytes;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum36" style="color: #606060">  36:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum37" style="color: #606060">  37:</span>                     <span style="color: #0000ff">using</span> (MemoryStream ms = <span style="color: #0000ff">new</span> MemoryStream())</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum38" style="color: #606060">  38:</span>                     {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum39" style="color: #606060">  39:</span>                         var stream = item.Open();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum40" style="color: #606060">  40:</span>                         stream.CopyTo(ms);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum41" style="color: #606060">  41:</span>                         imageInBytes = ms.ToArray();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum42" style="color: #606060">  42:</span>                     }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum43" style="color: #606060">  43:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum44" style="color: #606060">  44:</span>                     BitmapImage bImg = <span style="color: #0000ff">new</span> BitmapImage();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum45" style="color: #606060">  45:</span>                     await bImg.SetSourceAsync(<span style="color: #0000ff">new</span> RandomStream(imageInBytes));</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum46" style="color: #606060">  46:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum47" style="color: #606060">  47:</span>                     comic.Add(bImg);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum48" style="color: #606060">  48:</span>                 }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum49" style="color: #606060">  49:</span>             }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum50" style="color: #606060">  50:</span>         }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum51" style="color: #606060">  51:</span>     }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum52" style="color: #606060">  52:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum53" style="color: #606060">  53:</span>     <span style="color: #0000ff">return</span> comic;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum54" style="color: #606060">  54:</span> }</pre>
<!--CRLF--></div>
</div>

<p>We start by initializing the FileOpenPicker, allowing our user to select the comic he/she wants to read. We add a suggested location where the FileOpenPicker should start and add the filetypes it should look for. The PickFileAsync method shows the actual filepicker to the user, the user selects the cbz file he wants and it gets loaded into the storageFile variable. The file gets read in as an IRandomAccessStream. We need that stream to create a ZipArchive instance. Once we have that we can loop through all files in that zip archive. Each .jpg file in that zip archive gets read into a byte array that we then convert into a bitmap by using RandomStream, an implementation of IRandomAccessStream (if you want to see the implementation, the project is attached to this post at the bottom). The bitmap image then gets added to the list. When they’re all done the list gets returned to the caller.</p>

<p>That’s it for loading the comic, let’s take a look at the sharing to other devices in your network.</p>

<p>We need to initialize the PlayTo contract, I’ll be doing this from the constructor</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">public</span> MainPage()</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     InitializeComponent();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     var playToManager = PlayToManager.GetForCurrentView();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>     playToManager.SourceRequested += PlayToManagerOnSourceRequested;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>     playToManager.SourceSelected += PlayToManagerOnSourceSelected;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span> }</pre>
<!--CRLF--></div>
</div>

<p>PlayToManager is the class that we need, we get this for free from the WinRT framework. The GetForCurrentView() method returns an instance of the PlayToManager class bound to this page. Once we have the instance we attach an eventhandler to the SourceRequested and the SourceSelected events. The SourceRequested event will fire as soon as the user hits the Devices charm, this is where we’ll prepare the first media element for streaming. The SourceSelected event fires when the user selects a source, obviously.</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> async <span style="color: #0000ff">void</span> PlayToManagerOnSourceRequested(PlayToManager sender, PlayToSourceRequestedEventArgs args)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     var deferral = args.SourceRequest.GetDeferral();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =&gt;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>         {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>             var firstImage = GetChildren(FlipImage).First();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>             <span style="color: #008000">// Provide Play To with the first image to stream.</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>             args.SourceRequest.SetSource(firstImage.PlayToSource);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>             _current = firstImage;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span>             deferral.Complete();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum13" style="color: #606060">  13:</span>         });</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum14" style="color: #606060">  14:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum15" style="color: #606060">  15:</span> }</pre>
<!--CRLF--></div>
</div>

<p>The OnSourceRequested eventhandler needs to be marked as async. First we get the deferral, then we need to run some async code, Dispatcher.RunAsync is the same as calling an async method with await on this line. The PlayTo contract works with certain XAML controls. In our case we need the Image control, that’s why we’ve set the itemtemplate of the FlipView to be an Image. We’ll take a look at the GetChildren() method in a minute, for now just know that it returns a list of all Image controls inside the FlipView. We take the first element in the returned list and that’s the element that we’ll stream to the device. The arguments have a property of type PlayToSourceRequest, that one has a SetSource function that takes in a PlayToSource object and that’s a property of the Image control. We set the current image to the _current field and mark the deferral as complete.</p>

<p>Phew that was quite some work. Don’t worry, the hard part is over (yes this was really the hard part). Now a quick look at that GetChildren() function.</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> List&lt;Image&gt; GetChildren(DependencyObject parent)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     var list = <span style="color: #0000ff">new</span> List&lt;Image&gt;();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     <span style="color: #0000ff">for</span> (<span style="color: #0000ff">int</span> i = 0; i &lt; VisualTreeHelper.GetChildrenCount(parent); i++)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>     {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>         var child = VisualTreeHelper.GetChild(parent, i);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>         var item = child <span style="color: #0000ff">as</span> Image;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>         <span style="color: #0000ff">if</span> (item != <span style="color: #0000ff">null</span>)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>             list.Add(item);</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span>         list.AddRange(GetChildren(child));</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum13" style="color: #606060">  13:</span>     }</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum14" style="color: #606060">  14:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum15" style="color: #606060">  15:</span>     <span style="color: #0000ff">return</span> list;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum16" style="color: #606060">  16:</span> }</pre>
<!--CRLF--></div>
</div>

<p>The function takes in a DependencyObject and starts walking through its visual tree. We try to cast each item as an Image, if that cast fails the variable will contain null, a quick check there and if it isn’t null we add it to the list which we then return.</p>

<p>The OnSourceSelected is only used to set the name of the selected source to the textblock</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> async <span style="color: #0000ff">void</span> PlayToManagerOnSourceSelected(PlayToManager sender, PlayToSourceSelectedEventArgs args)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     _isConnected = <span style="color: #0000ff">true</span>;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =&gt;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>         ConnectionText.Text = <span style="color: #0000ff">string</span>.Format(<span style="color: #006080">&quot;Connected to {0}&quot;</span>, args.FriendlyName));</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span> }</pre>
<!--CRLF--></div>
</div>

<p>And that’s enough to stream the first image, when you run this code and select the Devices charm the first page of the comic should show up on your device. All there’s left now is to go back and forward in the comic. In the app itself this already works, the FlipView takes care of navigating between the pages. Before we start developing this we need to make a small halt and take a look at how the FlipView actually works. First thought in my head was “okay this is easy, I just get all the image controls in the FlipView and I’m golden”. That was a big nono. The itemspanel of a FlipView is actually a VirtualizingStackPanel, meaning that at any given time there are maximum three Image controls inside the FlipView, usually previous-current-next. As soon as we navigate to another page the FlipView automatically loads in the next item in line. This can easily be seen by using a handy tool called XamlSpy. XamlSpy allows us to view the entire visual tree of any XAML based application. When we view the default visual tree of a FlipView after loading a comic we get this.</p>

<p><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i49.tinypic.com/2gt0n69.jpg" /></p>

<p>As you can see, we only have three FlipViewItems here. When we change the FlipView’s paneltemplate to this</p>

<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">&lt;</span><span style="color: #800000">FlipView</span> <span style="color: #ff0000">x:Name</span><span style="color: #0000ff">=&quot;FlipImage&quot;</span> <span style="color: #ff0000">Margin</span><span style="color: #0000ff">=&quot;0,3,0,0&quot;</span> <span style="color: #ff0000">Grid</span>.<span style="color: #ff0000">RowSpan</span><span style="color: #0000ff">=&quot;2&quot;</span> <span style="color: #ff0000">SelectionChanged</span><span style="color: #0000ff">=&quot;FlipImage_NextImage&quot;</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">FlipView.ItemsPanel</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">ItemsPanelTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">StackPanel</span> <span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>         <span style="color: #0000ff">&lt;/</span><span style="color: #800000">ItemsPanelTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">FlipView.ItemsPanel</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>     <span style="color: #0000ff">&lt;</span><span style="color: #800000">FlipView.ItemTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>         <span style="color: #0000ff">&lt;</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>             <span style="color: #0000ff">&lt;</span><span style="color: #800000">Image</span> <span style="color: #ff0000">Source</span><span style="color: #0000ff">=&quot;{Binding}&quot;</span> <span style="color: #0000ff">/&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>         <span style="color: #0000ff">&lt;/</span><span style="color: #800000">DataTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>     <span style="color: #0000ff">&lt;/</span><span style="color: #800000">FlipView.ItemTemplate</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span> <span style="color: #0000ff">&lt;/</span><span style="color: #800000">FlipView</span><span style="color: #0000ff">&gt;</span></pre>
<!--CRLF--></div>
</div>

<p>and we load the same comic in XamlSpy we get this result</p>

<p><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i46.tinypic.com/rhogsg.jpg" /></p>

<p>Quite the difference I would say. The VirtualizingStackPanel is lighter on memory usage, since some comics can be quite large we’ll stick to the default template.</p>

<p>Now that we have that cleared out, let’s take a look at what happens when we browse to the next page of the comic.</p>







<div id="codeSnippetWrapper" style="overflow: auto; cursor: text; font-size: 8pt; border-top: silver 1px solid; font-family: &#39;Courier New&#39;, courier, monospace; border-right: silver 1px solid; border-bottom: silver 1px solid; padding-bottom: 4px; direction: ltr; text-align: left; padding-top: 4px; padding-left: 4px; margin: 20px 0px 10px; border-left: silver 1px solid; line-height: 12pt; padding-right: 4px; max-height: 200px; width: 97.5%; background-color: #f4f4f4">
  <div id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4">
    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum1" style="color: #606060">   1:</span> <span style="color: #0000ff">private</span> async <span style="color: #0000ff">void</span> FlipImage_NextImage(<span style="color: #0000ff">object</span> sender, SelectionChangedEventArgs e)</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum2" style="color: #606060">   2:</span> {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum3" style="color: #606060">   3:</span>     <span style="color: #0000ff">if</span> (!_isConnected) <span style="color: #0000ff">return</span>;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum4" style="color: #606060">   4:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum5" style="color: #606060">   5:</span>     await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =&gt;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum6" style="color: #606060">   6:</span>         {</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum7" style="color: #606060">   7:</span>             var current = GetChildren(FlipImage)[1];</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum8" style="color: #606060">   8:</span>&#160; </pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum9" style="color: #606060">   9:</span>             _current.PlayToSource.Next = current.PlayToSource;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum10" style="color: #606060">  10:</span>             _current.PlayToSource.PlayNext();</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum11" style="color: #606060">  11:</span>             _current = current;</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: #f4f4f4"><span id="lnum12" style="color: #606060">  12:</span>         });</pre>
<!--CRLF-->

    <pre style="border-top-style: none; overflow: visible; font-size: 8pt; border-left-style: none; font-family: &#39;Courier New&#39;, courier, monospace; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; line-height: 12pt; padding-right: 0px; width: 100%; background-color: white"><span id="lnum13" style="color: #606060">  13:</span> }</pre>
<!--CRLF--></div>
</div>

<p>First, this code does not need to be executed when we’re not connected to any device, if we are we need to run the next block of code asynchronously. First the code fetches all the available Image controls inside the FlipView, we save a reference to the middle one because that one is the one currently shown in the FlipView. The field _current contains the image currently shown on the external device, we need to set that field’s PlayToSource.Next property. That property always needs to be set on the current image before the PlayNext() method is called. Once that’s set we call the aforementioned PlayNext() method. That method will sent the control that is set to the PlayToSource.Next property to the connected device. To end we set the image control that was just send to the device to the _current field so that it can be called upon on the next run.</p>







<p>In this post I have shown how you can share media content from your Windows Store application to an external device like the Xbox 360. The project used in this post can be downloaded from my <a href="http://sdrv.ms/10l0T6w" target="_blank">SkyDrive</a></p>]]></content>
      <post-name type="text"><![CDATA[Stream comics from Windows 8 to other devices using PlayTo]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="7fb7633d-4755-49ba-90a2-f4d3873e0bcb" date-created="2012-11-23T13:51:56" date-modified="2012-11-23T13:51:56" approved="true" url="http://www.silverlightshow.net/news/Stream-comics-from-Windows-8-to-other-devices-using-PlayTo.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

Stream comics from Windows 8 to other devices using PlayTo]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="36984789-763a-49b0-9f0b-727720bc4e95" date-created="2012-11-06T19:02:17" date-modified="2012-11-06T19:02:22" approved="true" post-url="/blog/post/2012/11/06/Windows-App-day-Belgium-2311.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Windows App day Belgium 23-11]]></title>
      <content type="text"><![CDATA[<p>That Microsoft loves his communities is no secret. The past months we literally drowned in hackathons, trainings, competitions and many more Windows 8 related. And it doesn’t look like it’s stopping any time soon! On November 23th Microsoft Belgium organizes the Windows App Day, a day stuffed to the top with sessions divided into two tracks, one for developers and one for designers. And the best part? It’s not only for Windows 8! Windows Azure and my all time favorite platform, Windows Phone 8 will be represented as well.</p>  <p>So if you’re in or around Belgium on November 23th and feel like spending the day with our great community feel free to drop by. There might even be some very cool announcement concerning people that are into Windows 8 development… drop by to get the full story (and start thinking about that one killer app)!</p>  <p>Details:</p>  <p><b>When</b>: Friday 23 November 2012, 9AM to 6PM </p>  <p><b>Where</b>: ALM Meeting Point </p>  <p>Filip Williotstraat 9 </p>  <p>2600 Antwerp (Berchem)</p>  <p>All details: <u><a href="http://www.microsoft.com/belux/msdn/windows-app-day/default.aspx">http://www.microsoft.com/belux/msdn/windows-app-day/default.aspx</a></u></p>  <p><a href="http://www.spikie.be/blog/image.axd?picture=header_app-day.jpg"><img title="header_app-day" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" border="0" alt="header_app-day" src="http://www.spikie.be/blog/image.axd?picture=header_app-day_thumb.jpg" width="600" height="131" /></a></p>]]></content>
      <post-name type="text"><![CDATA[Windows App day Belgium 23/11]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="a7364633-5239-4741-ba6a-33c05b1accc7" date-created="2012-10-30T12:01:09" date-modified="2012-10-30T12:01:09" approved="true" post-url="/blog/post/2012/10/30/The-cat-is-out-of-the-bag-(WP8-released).aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[The cat is out of the bag (WP8 released)]]></title>
      <content type="text"><![CDATA[<p>So it finally happened, Microsoft announced Windows Phone 8 and detailed all of its features. The keynote itself was pretty cool with Joe Belfiore, Steve Ballmer and even Jessica Alba on stage. And as special bonus guests Joe brought his children on stage to show off the new Kids corner feature.</p>  <p>Kids corner is like a second user being logged on on your phone with you being the administrator, determining what applications can be seen and started by the second user, usually being your kid. A darn cool feature that is! Once configured it’s as easy as swiping to the left when on your lockscreen to switch to the second session. It’s so easy and intuitive that I really believe that a 2-year old can figure it out. (I've seen 2-year olds navigating Windows like a pro…). Other features include rooms, virtual houses where you can keep track of, for example, your family. See all their tweets, calendars, locations, chat with them, etc. and that includes people using iphones and Android devices! Also a cool, albeit a bit of a gimmick, is that apps can now change your lockscreen. For example, the Bing app can set the daily Bing image as lockscreen image, or the facebook app switches between your facebook pictures as lockscreen image.</p>  <p>For people with a limited dataplan comes DataSense, this is a build in feature that will keep an eye on your data usage, that also should be quite a bit lower then on another device because of the compression techniques used in the mobile operating system, DataSense will adjust the way WP8 behaves when you’re nearing your datalimit, should save some pennies to quite a lot of people.</p>  <p>Off course they talked about apps as well, the Windows Phone ecosystem now has over 120.000 apps (unofficial sources talk about 125.000) with hundreds of new ones being added each day. I believe this number will rise once developers get hacking with the WP8 SDK but all in all a great number! Also 46 of the world’s 50 most popular apps are now available on WP8. The fact that Windows Phone now support the Unity game engine makes it really easy for a bunch of popular games to be released on Microsoft’s platform. Devs win because an extra platform is an extra form of earnings, Microsoft wins because more apps for their system and consumers win because they can waste more time with games. But the biggest eye-catcher in the apps area was Skype. An all new version of the app that allows messages and calls to come in even when the app is not running. And most importantly, it does not run code in the background so the app won’t drain your battery like a certain other messaging app (yes I’m looking at you What’s app…).</p>  <p>Other new features, that amazingly enough haven’t been discussed in the keynote, include dual and quad core support, NFC, SD card support, brand new kernel (now shared with the Windows 8 OS), multi-tasking has been expanded for up to eight apps instead of five, SkyDrive can be used to back up texts, apps, settings, pictures, … For the business market there’s the intune, SCCM and other management tools support. There’s also the possibility to completely encrypt the device, remote wipe it when stolen. The devices have UEFI with secure boot, so no tempering with the bootloader is allowed.</p>  <p>And for us developers: the Windows Phone 8 SDK will be available today during the Build keynote! A few more hours to go and we can get cracking at Windows Phone hacking in Visual Studio 2012! Just remember, to use the emulator you’ll need a machine that runs (and supports) Hyper-V. Also, Windows Phone now supports native code!</p>  <p>As for release dates for the devices, the HTC 8X, 8S and the Samsung Ativ S will be in stores this weekend, the Nokia devices will be available end of the month. </p>  <p>For all the juicy details, here’s an 18-minute video of Joe walking through the operating system: </p>  <div style="padding-bottom: 0px; padding-left: 0px; width: 448px; padding-right: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-top: 0px" id="scid:5737277B-5D6D-4f48-ABFC-DD9C333F4C5D:b53a0af4-799f-4412-a1d8-0a68dfb8a7a6" class="wlWriterEditableSmartContent"><div><object width="448" height="252"><param name="movie" value="http://www.youtube.com/v/SQZEkXCE_fY?hl=en&amp;hd=1"></param><embed src="http://www.youtube.com/v/SQZEkXCE_fY?hl=en&amp;hd=1" type="application/x-shockwave-flash" width="448" height="252"></embed></object></div><div style="width:448px;clear:both;font-size:.8em">Meet Windows Phone 8</div></div>]]></content>
      <post-name type="text"><![CDATA[The cat is out of the bag (WP8 released)]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
      </categories>
      <comments>
        <comment id="ab5fef2c-0504-4893-ac33-268a2e259f2e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-15T13:24:21" date-modified="2013-06-15T13:24:21" approved="true" user-name="movers in los angeles" user-email="sabaattitute@gmail.com" user-ip="39.45.194.152" user-url="">
          <title type="text"><![CDATA[re: The cat is out of the bag (WP8 released)]]></title>
          <content type="text"><![CDATA[Thanks for that]]></content>
        </comment>
        <comment id="4c5ef2d6-e66f-49d8-b6ff-6a40fff12813" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-17T15:08:57" date-modified="2013-06-17T15:08:57" approved="false" user-name="imported German shepherds" user-email="mosexports@yahoo.com" user-ip="58.97.160.58" user-url="">
          <title type="text"><![CDATA[re: The cat is out of the bag (WP8 released)]]></title>
          <content type="text"><![CDATA[eally i am impressed from this post! The person who created this post is a generous and knows how to keep the readers connected. Thanks for sharing this with us found, it informative and interesting. Looking forward for more updates.

http://www.banffyhaus.com/
]]></content>
        </comment>
        <comment id="c0e6391b-1ae2-4e13-823c-b10cd67bd9e1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T09:14:50" date-modified="2013-06-20T09:14:50" approved="false" user-name="volvo occasions" user-email="MargarethaDeVries@yahoo.nl" user-ip="188.24.107.231" user-url="">
          <title type="text"><![CDATA[re: The cat is out of the bag (WP8 released)]]></title>
          <content type="text"><![CDATA[Volvo stands for reliability and durability. On our pages you will find a large number of used Volvo&#39;s in excellent condition. A Volvo possesses these properties as a new Volvo, but is considerably cheaper. - http://www.hooftman.nl/volvosales/volvo-occasions.html]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="c7ee8bf4-6f58-4b7b-87e6-bf3b172eef16" date-created="2012-10-09T22:59:00" date-modified="2012-10-11T07:33:39" approved="true" post-url="/blog/post/2012/10/09/MonoGame-XNA-on-Windows-8.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[MonoGame–XNA on Windows 8]]></title>
      <content type="text"><![CDATA[<p><strong>UPDATE: </strong>The good people of MonoGame brought it to my attention that MonoGame currently does not support Windows Phone 7 (XNA is supported on Windows Phone though) but they will probably support Windows Phone 8. Thanks for the heads up guys!</p>
<p>There&rsquo;s currently no official support for XNA on Windows 8. That&rsquo;s actually a real shame because XNA is my favorite way to develop games and Windows 8 is a fun platform to develop on. Luckily there&rsquo;s always the community to come to our rescue. Enter MonoGame, an open source implementation of XNA for virtually any platform out there. Think iOS, Android,&nbsp; Windows 8, even Playstation Vita.</p>
<p>A while ago Wesley and me started working on a BreakOut clone for Windows 8 using MonoGame. We currently have a raw basic gameplay and a first level. We even released a first official screenshot <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_10.png" alt="Smile" /></p>
<p><img style="float: none; margin-left: auto; display: block; margin-right: auto;" src="https://fbcdn-sphotos-d-a.akamaihd.net/hphotos-ak-prn1/55358_4249267144401_1677481735_o.jpg" alt="" width="438" height="247" /></p>
<p>I now the screenshot doesn&rsquo;t look really fancy yet (wel except for the giant pacman which is always awesome right?) but it&rsquo;s an early build of a work very much in progress.</p>
<p>Follow us on Twitter for more updates (@NicoVermeir &amp; @WesleyCabus), also see <a href="http://adeveloperslife.com/2012/10/09/creating-a-game-for-windows-8-using-monogame/" target="_blank">Wesley&rsquo;s blog</a> where he links to more information on MonoGame and how to set it up on your device.</p>]]></content>
      <post-name type="text"><![CDATA[MonoGame–XNA on Windows 8]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="a821ad2d-92f6-4bd5-b5ec-b3a894bb2329" />
        <category ref="b43ad80c-ad86-4ef7-a1f5-10be62951aad" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
      </categories>
    </post>
    <post id="15914e57-dc06-4743-b0aa-3495b9ae7b31" date-created="2012-09-19T09:18:00" date-modified="2012-09-19T09:24:26" approved="true" post-url="/blog/post/2012/09/19/Techdays-Belgium-2013.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Techdays Belgium 2013]]></title>
      <content type="text"><![CDATA[<p>Word just got out this morning that Techdays Belgium will happen on 5, 6 and 7 March.</p>
<p>Just as the previous years I'll be there! Although this year will be kind off special as it is my first Techdays as a MEET member. MEET will get some attention at Techdays as usual, the how and what will be discussed in the coming months.</p>
<p>Furthermore, this edition of Techdays will probably be all about the new and reimagined Microsoft. I excpect loads of sessions on Windows 8, Windows Phone 8, Azure and everything combined. I'm already looking forward to it and if you plan on attending, be sure to find me somewhere and come say hi.</p>
<p>See you there!</p>]]></content>
      <post-name type="text"><![CDATA[Techdays Belgium 2013]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
    </post>
    <post id="0ee8ad5a-4a9c-4da6-918d-8897b01483d0" date-created="2012-08-14T19:05:17" date-modified="2012-08-14T19:05:36" approved="true" post-url="/blog/post/2012/08/14/WinRT-GroupedGridView-first-item-other-template.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[WinRT: GroupedGridView first item other template]]></title>
      <content type="text"><![CDATA[<p>I’m currently building a comic application for Windows 8, yesterday I was building the page where users can see the details about a certain comic issue. The idea I had for this page was that on the left was the cover of the issue, followed by a list of characters appearing in the issue. A grouped GridView would be perfect for this scenario but it only accepts one template, so all groups usually look the same. Here’s the way that I’ve fixed it, I’m not 100% happy with it but it works. If you have a better way, please tell me, I’ll update this post accordingly and give credit where credit is due off course.</p>  <p>Let’s start off with the class. I have a class called Issue that obviously contains all the information about an issue.</p>  <pre class="code"><span style="background: white; color: blue">public class </span><span style="background: white; color: #2b91af">Issue
</span><span style="background: white; color: black">{
    </span><span style="background: white; color: blue">public int </span><span style="background: white; color: black">Id { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public bool </span><span style="background: white; color: black">IsImage { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public string </span><span style="background: white; color: black">Name { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public string </span><span style="background: white; color: black">Image { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public </span><span style="background: white; color: #2b91af">List</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: #2b91af">Character</span><span style="background: white; color: black">&gt; Characters { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }
}</span></pre>

<p>Notice the IsImage boolean? That one’s the key to the whole thing. The image itself is just a string to an image on the web. Next up is the Character class.</p>

<pre class="code"><span style="background: white; color: blue">public class </span><span style="background: white; color: #2b91af">Character </span><span style="background: white; color: black">: </span><span style="background: white; color: #2b91af">INotifyPropertyChanged
</span><span style="background: white; color: black">{
    </span><span style="background: white; color: blue">public string </span><span style="background: white; color: black">Name { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }
    </span><span style="background: white; color: blue">public bool </span><span style="background: white; color: black">IsImage { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }

    </span><span style="background: white; color: blue">private string </span><span style="background: white; color: black">_image;

    </span><span style="background: white; color: blue">public string </span><span style="background: white; color: black">Image
    {
        </span><span style="background: white; color: blue">get </span><span style="background: white; color: black">{ </span><span style="background: white; color: blue">return </span><span style="background: white; color: black">_image; }
        </span><span style="background: white; color: blue">set
        </span><span style="background: white; color: black">{
            </span><span style="background: white; color: blue">if </span><span style="background: white; color: black">(_image == </span><span style="background: white; color: blue">value</span><span style="background: white; color: black">)
                </span><span style="background: white; color: blue">return</span><span style="background: white; color: black">;

            _image = </span><span style="background: white; color: blue">value</span><span style="background: white; color: black">;

            RaisePropertyChanged(</span><span style="background: white; color: #a31515">&quot;Image&quot;</span><span style="background: white; color: black">);
        }
    }

    </span><span style="background: white; color: blue">public </span><span style="background: white; color: black">Character()
    {
        IsImage = </span><span style="background: white; color: blue">false</span><span style="background: white; color: black">;
    }

    </span><span style="background: white; color: blue">public event </span><span style="background: white; color: #2b91af">PropertyChangedEventHandler </span><span style="background: white; color: black">PropertyChanged;

    </span><span style="background: white; color: blue">protected virtual void </span><span style="background: white; color: black">RaisePropertyChanged(</span><span style="background: white; color: blue">string </span><span style="background: white; color: black">propertyName)
    {
        </span><span style="background: white; color: #2b91af">PropertyChangedEventHandler </span><span style="background: white; color: black">handler = PropertyChanged;
        </span><span style="background: white; color: blue">if </span><span style="background: white; color: black">(handler != </span><span style="background: white; color: blue">null</span><span style="background: white; color: black">) handler(</span><span style="background: white; color: blue">this</span><span style="background: white; color: black">, </span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">PropertyChangedEventArgs</span><span style="background: white; color: black">(propertyName));
    }

}</span></pre>

<p>Again in this class a boolean called IsImage. This time however the boolean has an initial value of False set in the constructor.</p>

<p>A third class is a generic class that will contain all collections to be shown in every group in the GridView</p>

<pre class="code"><span style="background: white; color: blue">public class </span><span style="background: white; color: #2b91af">GroupInfoList</span><span style="background: white; color: black">&lt;T&gt; : </span><span style="background: white; color: #2b91af">List</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: blue">object</span><span style="background: white; color: black">&gt;
{
    </span><span style="background: white; color: blue">public object </span><span style="background: white; color: black">Key { </span><span style="background: white; color: blue">get</span><span style="background: white; color: black">; </span><span style="background: white; color: blue">set</span><span style="background: white; color: black">; }</span><span style="background: white; color: black">
</span><span style="background: white; color: black">
    </span><span style="background: white; color: blue">public new </span><span style="background: white; color: #2b91af">IEnumerator</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: blue">object</span><span style="background: white; color: black">&gt; GetEnumerator()
    {
        </span><span style="background: white; color: blue">return base</span><span style="background: white; color: black">.GetEnumerator();
    }
}</span></pre>

<p>This is a pretty basic implementation that you will find on many blogs and samples about grouped GridView.</p>

<p>The next step is in the viewmodel, where I’ll load in the data and prepare everything to be shown in the Grouped GridView.</p>

<pre class="code"><span style="background: white; color: blue">private async void </span><span style="background: white; color: black">LoadData()
{
    IssueGroups = </span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">ObservableCollection</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: #2b91af">GroupInfoList</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: blue">object</span><span style="background: white; color: black">&gt;&gt;();
    </span><span style="background: white; color: blue">var </span><span style="background: white; color: black">issueDetails = </span><span style="background: white; color: blue">await </span><span style="background: white; color: black">_service.GetIssueDetail(SelectedIssue.Url);

    </span><span style="background: white; color: blue">var </span><span style="background: white; color: black">cover = </span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">GroupInfoList</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: blue">object</span><span style="background: white; color: black">&gt; { Key = </span><span style="background: white; color: #a31515">&quot;Cover&quot; </span><span style="background: white; color: black">};
    SelectedIssue.IsImage = </span><span style="background: white; color: blue">true</span><span style="background: white; color: black">;
    cover.Add(SelectedIssue);
    IssueGroups.Add(cover);

    </span><span style="background: white; color: blue">var </span><span style="background: white; color: black">info = </span><span style="background: white; color: blue">new </span><span style="background: white; color: #2b91af">GroupInfoList</span><span style="background: white; color: black">&lt;</span><span style="background: white; color: blue">object</span><span style="background: white; color: black">&gt; { Key = </span><span style="background: white; color: #a31515">&quot;Characters&quot; </span><span style="background: white; color: black">};
    info.AddRange(issueDetails.Characters);
    IssueGroups.Add(info);
}</span></pre>

<p>First I create an ObservableCollection of type GroupInfoList, the class I’ve created in the previous step. Then I’ll ask my service to get me all the details of the issue. Once I have all the info I start dividing it into the groups that I want it shown on the page. I wanted to start off with the cover in the first group but I can’t just put the image url in the group because that way I can’t pass anything to my converter later on. So instead I just put the entire issue object in the first group and I set the IsImage property to True.</p>

<p>The second group will contain all the characters, remember that Character sets IsImage to false in the constructor, so no need to do that here explicitly. I now have everything set to show two groups in my GridView. Onto the XAML we go.</p>

<p>So now we reached the actual problem. We can set one ItemTemplate but I need two. Here’s what my template looks like.</p>

<pre class="code"><span style="background: white; color: blue">&lt;</span><span style="background: white; color: #a31515">GridView.ItemTemplate</span><span style="background: white; color: blue">&gt;
        &lt;</span><span style="background: white; color: #a31515">DataTemplate</span><span style="background: white; color: blue">&gt;
            &lt;</span><span style="background: white; color: #a31515">StackPanel</span><span style="background: white; color: blue">&gt;
            &lt;</span><span style="background: white; color: #a31515">Border </span><span style="background: white; color: red">BorderBrush</span><span style="background: white; color: blue">=&quot;Black&quot; </span><span style="background: white; color: red">BorderThickness</span><span style="background: white; color: blue">=&quot;2&quot; </span><span style="background: white; color: red">Width</span><span style="background: white; color: blue">=&quot;300&quot; </span><span style="background: white; color: red">HorizontalAlignment</span><span style="background: white; color: blue">=&quot;Left&quot;<br /></span><span style="background: white; color: blue"> </span><span style="background: white; color: red">Height</span><span style="background: white; color: blue">=&quot;120&quot; </span><span style="background: white; color: red">Visibility</span><span style="background: white; color: blue">=&quot;{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">IsImage</span><span style="background: white; color: blue">, <br /></span><span style="background: white; color: red">Converter</span><span style="background: white; color: blue">={</span><span style="background: white; color: #a31515">StaticResource </span><span style="background: white; color: red">KeyToVisibilityConverterReverse</span><span style="background: white; color: blue">}}&quot;&gt;
                &lt;</span><span style="background: white; color: #a31515">StackPanel </span><span style="background: white; color: red">Orientation</span><span style="background: white; color: blue">=&quot;Horizontal&quot; </span><span style="background: white; color: red">VerticalAlignment</span><span style="background: white; color: blue">=&quot;Center&quot; </span><span style="background: white; color: red">Margin</span><span style="background: white; color: blue">=&quot;10,0,0,0&quot;&gt;
                    &lt;</span><span style="background: white; color: #a31515">Image </span><span style="background: white; color: red">Source</span><span style="background: white; color: blue">=&quot;{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">Image</span><span style="background: white; color: blue">}&quot; </span><span style="background: white; color: red">Height</span><span style="background: white; color: blue">=&quot;100&quot; /&gt;
                    &lt;</span><span style="background: white; color: #a31515">StackPanel</span><span style="background: white; color: blue">&gt;
                        &lt;</span><span style="background: white; color: #a31515">TextBlock </span><span style="background: white; color: red">Text</span><span style="background: white; color: blue">=&quot;{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">Name</span><span style="background: white; color: blue">}&quot; </span><span style="background: white; color: red">Width</span><span style="background: white; color: blue">=&quot;180&quot; </span><span style="background: white; color: red">Foreground</span><span style="background: white; color: blue">=&quot;Black&quot; <br /></span><span style="background: white; color: red">Margin</span><span style="background: white; color: blue">=&quot;12,0,0,0&quot; </span><span style="background: white; color: red">TextWrapping</span><span style="background: white; color: blue">=&quot;Wrap&quot; /&gt;
                        &lt;</span><span style="background: white; color: #a31515">TextBlock </span><span style="background: white; color: red">Text</span><span style="background: white; color: blue">=&quot;{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">Role</span><span style="background: white; color: blue">}&quot; </span><span style="background: white; color: red">Width</span><span style="background: white; color: blue">=&quot;180&quot; </span><span style="background: white; color: red">Foreground</span><span style="background: white; color: blue">=&quot;Black&quot; <br /></span><span style="background: white; color: red">Margin</span><span style="background: white; color: blue">=&quot;12,0,0,0&quot; </span><span style="background: white; color: red">TextWrapping</span><span style="background: white; color: blue">=&quot;Wrap&quot; /&gt;
                    &lt;/</span><span style="background: white; color: #a31515">StackPanel</span><span style="background: white; color: blue">&gt;
                &lt;/</span><span style="background: white; color: #a31515">StackPanel</span><span style="background: white; color: blue">&gt;
            &lt;/</span><span style="background: white; color: #a31515">Border</span><span style="background: white; color: blue">&gt;
            &lt;</span><span style="background: white; color: #a31515">Image </span><span style="background: white; color: red">Source</span><span style="background: white; color: blue">=&quot;{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">Image</span><span style="background: white; color: blue">}&quot; </span><span style="background: white; color: red">Height</span><span style="background: white; color: blue">=&quot;500&quot; </span><span style="background: white; color: red">Visibility</span><span style="background: white; color: blue">=&quot;{</span><span style="background: white; color: #a31515">Binding </span><span style="background: white; color: red">IsImage</span><span style="background: white; color: blue">, <br /></span><span style="background: white; color: red">Converter</span><span style="background: white; color: blue">={</span><span style="background: white; color: #a31515">StaticResource </span><span style="background: white; color: red">KeyToVisibilityConverter</span><span style="background: white; color: blue">}}&quot; /&gt;
        &lt;/</span><span style="background: white; color: #a31515">StackPanel</span><span style="background: white; color: blue">&gt;
        &lt;/</span><span style="background: white; color: #a31515">DataTemplate</span><span style="background: white; color: blue">&gt;
&lt;/</span><span style="background: white; color: #a31515">GridView.ItemTemplate</span><span style="background: white; color: blue">&gt;</span></pre>

<p>I've build a stackpanel that contains both my templates, one is just a simple image bound to the cover image. The second is a border containing a smaller image and a few textboxes. And as you can see, the Visibility of both templates are bound to IsImage. Now I have two converters to bind too, one has to return “Visible” when IsImage is True while the other one has to return “Collapsed”. Here’s what the converters look like.</p>

<pre class="code"><span style="background: white; color: blue">public class </span><span style="background: white; color: #2b91af">KeyToVisibilityConverter </span><span style="background: white; color: black">: </span><span style="background: white; color: #2b91af">IValueConverter
</span><span style="background: white; color: black">{
    </span><span style="background: white; color: blue">public object </span><span style="background: white; color: black">Convert(</span><span style="background: white; color: blue">object </span><span style="background: white; color: black">value, </span><span style="background: white; color: #2b91af">Type </span><span style="background: white; color: black">targetType, </span><span style="background: white; color: blue">object </span><span style="background: white; color: black">parameter, </span><span style="background: white; color: blue">string </span><span style="background: white; color: black">language)
    {
        </span><span style="background: white; color: blue">return </span><span style="background: white; color: black">(</span><span style="background: white; color: blue">bool</span><span style="background: white; color: black">)value ? </span><span style="background: white; color: #a31515">&quot;Visible&quot; </span><span style="background: white; color: black">: </span><span style="background: white; color: #a31515">&quot;Collapsed&quot;</span><span style="background: white; color: black">;
    }

    </span><span style="background: white; color: blue">public object </span><span style="background: white; color: black">ConvertBack(</span><span style="background: white; color: blue">object </span><span style="background: white; color: black">value, </span><span style="background: white; color: #2b91af">Type </span><span style="background: white; color: black">targetType, </span><span style="background: white; color: blue">object </span><span style="background: white; color: black">parameter, </span><span style="background: white; color: blue">string </span><span style="background: white; color: black">language)
    {
        </span><span style="background: white; color: blue">throw new </span><span style="background: white; color: #00008b">NotImplementedException</span><span style="background: white; color: black">();
    }
}

</span><span style="background: white; color: blue">public class </span><span style="background: white; color: #2b91af">KeyToVisibilityConverterReverse </span><span style="background: white; color: black">: </span><span style="background: white; color: #2b91af">IValueConverter
</span><span style="background: white; color: black">{
    </span><span style="background: white; color: blue">public object </span><span style="background: white; color: black">Convert(</span><span style="background: white; color: blue">object </span><span style="background: white; color: black">value, </span><span style="background: white; color: #2b91af">Type </span><span style="background: white; color: black">targetType, </span><span style="background: white; color: blue">object </span><span style="background: white; color: black">parameter, </span><span style="background: white; color: blue">string </span><span style="background: white; color: black">language)
    {
        </span><span style="background: white; color: blue">return </span><span style="background: white; color: black">(</span><span style="background: white; color: blue">bool</span><span style="background: white; color: black">)value ? </span><span style="background: white; color: #a31515">&quot;Collapsed&quot; </span><span style="background: white; color: black">: </span><span style="background: white; color: #a31515">&quot;Visible&quot;</span><span style="background: white; color: black">;

    }

    </span><span style="background: white; color: blue">public object </span><span style="background: white; color: black">ConvertBack(</span><span style="background: white; color: blue">object </span><span style="background: white; color: black">value, </span><span style="background: white; color: #2b91af">Type </span><span style="background: white; color: black">targetType, </span><span style="background: white; color: blue">object </span><span style="background: white; color: black">parameter, </span><span style="background: white; color: blue">string </span><span style="background: white; color: black">language)
    {
        </span><span style="background: white; color: blue">throw new </span><span style="background: white; color: #00008b">NotImplementedException</span><span style="background: white; color: black">();
    }
}</span></pre>

<p>And that did the trick for me, this is what my result looks like.</p>

<p><a href="http://i47.tinypic.com/nxj9xz.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i47.tinypic.com/nxj9xz.jpg" width="320" height="180" /></a></p>



<p>&#160;</p>

<p>I hope I helped some people out with this. Like I’ve said at the beginning of this post, this feels more like some sort of dirty hack than a decent solution but it works. Please let me know if you have another way of doing this.</p>]]></content>
      <post-name type="text"><![CDATA[WinRT: GroupedGridView first item other template]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="9c77deea-3c7b-4642-bb17-7cc73f7658ca" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-19T14:27:21" date-modified="2013-06-19T14:27:21" approved="false" user-name="Georgetta" user-email="georgetta_sander@inbox.com" user-ip="173.208.153.160" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[A &#39;s chief of dermatologic drugs, said patients should tell a doctor if they were her own grandchildren to tolerate them. Such changes are common in: teenagers, both in economic terms and in terms of treatment time, treatment versatility and enhanced ease of use. Operator Thank you We will make the concealer heavier, while longer strokes will make the coverage heavier while longer strokes will make the light shaving even easier and promote better How to get rid of acne ::  Georgetta - http://letsgetridofacne.weebly.com/  :: skin care moisturizer.]]></content>
        </comment>
        <comment id="58445b0d-d35d-42e9-a2a3-d1ac7708c345" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T09:45:21" date-modified="2013-06-20T09:45:21" approved="false" user-name="Recommended Site" user-email="franciscallaway@live.com" user-ip="184.154.253.19" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[I love it whenever people get together and share opinions. Great blog, continue the good work!

my web page  Recommended Site - http://strangeside.com/taxes-unfair-ones-for-jews/ ]]></content>
        </comment>
        <comment id="716c1048-338b-4cf0-a7f0-081d126701d3" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-21T02:03:14" date-modified="2013-06-21T02:03:14" approved="false" user-name="Look At This" user-email="brennamoen@freenet.de" user-ip="199.180.128.98" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[Nice post. I used to be checking constantly this weblog and I&#39;m impressed! Extremely useful information particularly the closing phase :) I take care of such info much. I used to be seeking this certain info for a long time. Thanks and good luck.

My blog post:  Look At This - http://providence.simming.net/wiki/index.php?title=User:JulianneL ]]></content>
        </comment>
        <comment id="98c5d1fe-617f-4bd5-a19b-3eae84c8a2b5" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-21T02:54:15" date-modified="2013-06-21T02:54:15" approved="false" user-name="Nike Air Max" user-email="rodrigo.wiese@gmail.com" user-ip="74.221.217.196" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[Thanks for your marvelous posting! I certainly enjoyed reading it, you might be a great author. I will be sure to bookmark your blog and will come back in the foreseeable future. I want to encourage that you continue your great work, have a nice morning!

Take a look at my weblog:  Nike Air Max - http://smu-fr.org/airmaxpascher.html ]]></content>
        </comment>
        <comment id="80637b2c-f0a2-4493-bb78-fd03d7e2c059" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-22T02:13:11" date-modified="2013-06-22T02:13:11" approved="false" user-name="Air Jordan" user-email="rodrigonix@gmail.com" user-ip="184.154.100.22" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[Does your website have a contact page? I&#39;m having a tough time locating it but, I&#39;d like to shoot you an email. I&#39;ve got some creative ideas for your blog you might be interested in hearing. Either way, great website and I look forward to seeing it develop over time.

Also visit my web-site -  Air Jordan - http://smu-fr.org/airjordanpascher.html ]]></content>
        </comment>
        <comment id="1e2587d1-fbac-453b-bbf0-0032a61540de" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T23:01:32" date-modified="2013-06-25T23:01:32" approved="false" user-name="LeBron James 9" user-email="maurine.ballinger@yahoo.com" user-ip="184.154.74.214" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[Helpful info. Lucky me I discovered your website by accident, and I&#39;m stunned why this accident didn&#39;t happened earlier! I bookmarked it.

Also visit my webpage ::  LeBron James 9 - http://nysacpr.org/lebrojamesshoes.html ]]></content>
        </comment>
        <comment id="2482a8d0-f0c1-43d9-871f-dbf1049824ec" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T07:45:36" date-modified="2013-06-27T07:45:36" approved="false" user-name="LeBron 10 Shoes" user-email="zeldacyr@yahoo.de" user-ip="96.127.191.163" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[I think this is among the most vital info for me. And i am glad reading your article. But should remark on some general things, The web site style is great, the articles is really great : D. Good job, cheers

my blog post  LeBron 10 Shoes - http://nysacpr.org/lebrojamesshoes.html ]]></content>
        </comment>
        <comment id="ebee92c4-b6c7-4bc8-b69d-e34e15aa8365" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T21:57:40" date-modified="2013-06-28T21:57:40" approved="false" user-name="KD Shoes" user-email="leroyarnett@live.com" user-ip="37.72.190.104" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[If some one needs to be updated with most recent technologies after that he must be go to see this website and be up to date every day.

Here is my site ::  KD Shoes - http://nysacpr.org/kevindurantshoes.html ]]></content>
        </comment>
        <comment id="d42dad93-0e11-49ce-8b77-eb5a4c15814a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T23:50:53" date-modified="2013-06-28T23:50:53" approved="false" user-name="Louis Vuitton" user-email="franziskanation@arcor.de" user-ip="96.127.130.238" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[If you desire to improve your experience only keep visiting this site and be updated with the latest information posted here.

My web page ::  Louis Vuitton - http://overuc.com/louisvuitton.html ]]></content>
        </comment>
        <comment id="8034f386-1e3b-4aed-8ccd-2fab7af3efdd" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T23:55:03" date-modified="2013-06-28T23:55:03" approved="false" user-name="Kobe Bryant Shoes 2013" user-email="jamisonbeauchamp@aol.com" user-ip="96.127.130.238" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[Hi there! This is kind of off topic but I need some advice from an established blog. Is it hard to set up your own blog? I&#39;m not very techincal but I can figure things out pretty quick. I&#39;m thinking about creating my own but I&#39;m not sure where to start. Do you have any tips or suggestions?  Appreciate it

Also visit my web site;  Kobe Bryant Shoes 2013 - http://nysacpr.org/kobebryantshoes.html ]]></content>
        </comment>
        <comment id="bb410b82-9225-41e1-8fdf-680b95bf9af9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T23:08:26" date-modified="2013-06-30T23:08:26" approved="false" user-name="kobe bryant Shoes commercial" user-email="maynard-winchester@your-mail.com" user-ip="96.127.191.163" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[Everything posted was actually very reasonable. However, what about this? what if you were to create a awesome title? I mean, I don&#39;t want to tell you how to run your website, however suppose you added a post title that grabbed people&#39;s attention? I mean Nico&#39;s digital footprint | WinRT: GroupedGridView first item other template is a little boring. You should look at Yahoo&#39;s home page and see how they create news titles to grab people to click. You might add a video or a picture or two to get people interested about everything&#39;ve written. In my opinion, it might make your posts a little livelier.

My homepage  kobe bryant Shoes commercial - http://www.iaaccs.com/kobebryantshoes.html ]]></content>
        </comment>
        <comment id="89b2ba5e-a6f5-4a8d-9070-61359dd52be1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T03:59:52" date-modified="2013-07-01T03:59:52" approved="false" user-name="LeBron James 9" user-email="wendicleveland@t-online.de" user-ip="37.72.190.104" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[I am genuinely thankful to the owner of this web site who has shared this impressive article at at this place.

My web page ...  LeBron James 9 - http://nysacpr.org/lebrojamesshoes.html ]]></content>
        </comment>
        <comment id="d99227ec-9738-4b6b-bf6f-5c862934c36c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T16:22:52" date-modified="2013-07-03T16:22:52" approved="false" user-name="overuc.com" user-email="trinidadperreault@gmail.com" user-ip="96.127.149.170" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[

Here is my site - web page -  overuc.com - http://overuc.com/louisvuitton.html  -]]></content>
        </comment>
        <comment id="0aa108d9-ae04-4724-b8ec-376433c4b5fb" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-07T18:24:38" date-modified="2013-07-07T18:24:38" approved="false" user-name="homepage" user-email="naominoriega@gawab.com" user-ip="184.154.105.52" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[

Also visit my webpage ...  homepage - http://natural-alternative-medicine.com ]]></content>
        </comment>
        <comment id="77898b76-4c2f-4609-927a-84e7cefe3aaa" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-07T20:32:13" date-modified="2013-07-07T20:32:13" approved="false" user-name="web site" user-email="christopher-doolittle@gmail.com" user-ip="96.127.149.170" user-url="">
          <title type="text"><![CDATA[re: WinRT: GroupedGridView first item other template]]></title>
          <content type="text"><![CDATA[

Look into my page ...  web site - http://www.lgfo.org ]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="7d9067a3-8351-4961-8c20-1c8cbd4e18ac" date-created="2012-08-15T13:37:30" date-modified="2012-08-15T13:37:30" approved="true" url="http://www.silverlightshow.net/news/WinRT-GroupedGridView-first-item-other-template.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

WinRT: GroupedGridView first item other template]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="1dd71b45-f0b2-4530-9b67-f9827f7631a3" date-created="2012-08-05T21:09:11" date-modified="2013-05-29T00:10:18" approved="true" post-url="/blog/post/2012/08/05/Weekly-update-on-my-XNA-project.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Weekly update on my XNA project]]></title>
      <content type="text"><![CDATA[<p>My first week back on the job is finished, that means I’ve had about 5 hours of time to work on my lunch game. Progress started of pretty small because of some enemy placement issues that showed up after I changed the complete control scheme. After loosing about an hour of time trying to fix it, I’ve decided to revert back to the virtual thumbsticks. About half an hour and some Mercurial commands later I was back to the original controls, the enemy movement behavior also reverted back to normal.</p>  <p>Day 2 I decided it was about time to make the enemy move, the character itself was moving up and down but without any animation, he was just sliding up and down. My animations are done using a spritesheet, the eight walking directions each have a line in the spritesheet. In the code itself I have a rectangle that has the width and height of one texture on the sheet, using the Update method I move the rectangle after x amount of time. This is the piece of code that creates the animation</p>  <pre class="code"><span style="color: blue">protected </span><span style="color: #2b91af">Rectangle </span>SourceRectRunning;
<span style="color: blue">protected readonly </span><span style="color: #2b91af">TimeSpan </span>RunRate = <span style="color: #2b91af">TimeSpan</span>.FromSeconds(0.1);
<span style="color: blue">protected </span><span style="color: #2b91af">TimeSpan </span>RunTimer;

<span style="color: blue">public override void </span>Update(<span style="color: #2b91af">GameTime </span>gameTime)
{
    RunTimer -= gameTime.ElapsedGameTime;

    <span style="color: blue">if </span>(RunTimer &lt;= <span style="color: #2b91af">TimeSpan</span>.Zero)
    {
        <span style="color: blue">if </span>(CharState == <span style="color: #2b91af">State</span>.Running)
        {
            <span style="color: blue">if </span>(SourceRectRunning.X &gt;= TextureWidth * 7)
            {
                SourceRectRunning.X = 0;
                <span style="color: blue">return</span>;
            }

            SourceRectRunning.X = SourceRectRunning.X + (<span style="color: blue">int</span>)TextureWidth;
        }

        RunTimer = RunRate;
    }
}</pre>

<p>&#160;</p>

<p>The CharState is just en enum that I’ve build. The enum looks like this</p>

<pre class="code"><span style="color: blue">public enum </span><span style="color: #2b91af">State
</span>{
    Running,
    Standing,
    Spotted,
    Walking
}</pre>

<br />This makes it very easy for me to call the right code when the player starts moving or when he’s spotted by the enemy. 

<p>I was very happy of how the animation looked like, so I figured it was about time to do something about the collision detection. This is something I’ve implemented quite some time ago but it never really worked how it should. The way collision detection is working in my app is a pretty nifty one. I found it in the demo code of the tile engine that I’m using. </p>

<p>A map build with Tiled consist of several layers, I have a layer that contains only the floor textures and a second layer that contains stuff like trees, walls and other non-interactable objects. The demo project contained with the WP7 Tiled engine has a method that can get the color of a certain tile on a certain layer. I take the player’s position, add a few pixels to it and determine the color on that location of the Objects layer, if the color is NULL then there’s no object in the way. Let me show you the code</p>

<pre class="code"><span style="color: #2b91af">Color</span>? collColor = _level.Map.GetColorAt(<span style="color: #a31515">&quot;Objects&quot;</span>, _player.WorldPosition + 
    (<span style="color: #2b91af">VirtualThumbsticks</span>.LeftThumbstick * 5));

<span style="color: blue">if </span>(collColor == <span style="color: blue">null</span>)
{
    <span style="color: green">//player can move
</span>}</pre>

<p>The GetColorAt method looks like this</p>

<pre class="code"><span style="color: blue">public </span><span style="color: #2b91af">Color</span>? GetColorAt(<span style="color: blue">string </span>layerName, <span style="color: #2b91af">Vector2 </span>position)
{
    <span style="color: blue">var </span>l = GetLayer(layerName);

    <span style="color: #2b91af">TileLayer </span>tileLayer = l <span style="color: blue">as </span><span style="color: #2b91af">TileLayer</span>;

    position.X = (<span style="color: blue">int</span>)position.X;
    position.Y = (<span style="color: blue">int</span>)position.Y;

    <span style="color: #2b91af">Vector2 </span>tilePosition = <span style="color: blue">new </span><span style="color: #2b91af">Vector2</span>((<span style="color: blue">int</span>)(position.X / TileWidth), (<span style="color: blue">int</span>)(position.Y/TileHeight));

    <span style="color: #2b91af">Tile </span>collisionTile = tileLayer.Tiles[(<span style="color: blue">int</span>)tilePosition.X, (<span style="color: blue">int</span>)tilePosition.Y];

    <span style="color: blue">if </span>(collisionTile == <span style="color: blue">null</span>)
        <span style="color: blue">return null</span>;

    <span style="color: blue">if </span>(collisionTile.CollisionData != <span style="color: blue">null</span>)
    {
        <span style="color: blue">int </span>positionOnTileX = ((<span style="color: blue">int</span>)position.X - (((<span style="color: blue">int</span>)position.X / TileWidth) * TileWidth));
        <span style="color: blue">int </span>positionOnTileY = ((<span style="color: blue">int</span>)position.Y - (((<span style="color: blue">int</span>)position.Y / TileHeight) * TileHeight));
        positionOnTileX = (<span style="color: blue">int</span>)<span style="color: #2b91af">MathHelper</span>.Clamp(positionOnTileX, 0, TileWidth);
        positionOnTileY = (<span style="color: blue">int</span>)<span style="color: #2b91af">MathHelper</span>.Clamp(positionOnTileY, 0, TileHeight);

        <span style="color: blue">int </span>pixelCheckX = (collisionTile.Source.X) + positionOnTileX;
        <span style="color: blue">int </span>pixelCheckY = (collisionTile.Source.Y) + positionOnTileY;

        <span style="color: blue">return </span>collisionTile.CollisionData[(pixelCheckY * collisionTile.Texture.Width) + pixelCheckX];
    }
    <span style="color: blue">else
    </span>{
        <span style="color: blue">return null</span>;
    }
}</pre>


<p>As I’ve said, this piece of code comes from the Tiled engine I’ve found on <a href="http://www.garethpw.co.uk/2010/09/phone-7-xna-tile-engine-base-solution.html" target="_blank">this site.</a></p>

<p>The problem I was having before was that I was passing the player’s coordinate on the screen to the method instead of the player’s position on the map. It does work much better now but currently I’m passing the coordinate of the upper left corner of the texture (XNA default) so it does need some fine-tuning.</p>

<p>I’m thinking next week to do some more work on the level editor or maybe start working on interactable objects. I’ll write another post next week, so stay tuned or follow me on Twitter to get daily updates.</p>]]></content>
      <post-name type="text"><![CDATA[Weekly update on my XNA project]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="a821ad2d-92f6-4bd5-b5ec-b3a894bb2329" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
      </categories>
    </post>
    <post id="135979e0-0bb3-4a00-90d4-9c2cebf67473" date-created="2012-07-16T20:34:32" date-modified="2012-07-16T20:34:35" approved="true" post-url="/blog/post/2012/07/16/XNA-Lunch-game-update.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[XNA Lunch game update]]></title>
      <content type="text"><![CDATA[<p>So I’ve already missed my first blog appointment about the Windows Phone game that I’m developing during my lunch brakes. Not a good start, but I’m taking two weeks off work so I do have a valid excuse <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_9.png" /></p>  <p>Last week I worked 3 hours on the game in total, my vacation started on Thursday with the app-a-thon. In those three hours I reworked the control scheme. Previously the character was moved using a virtual, on-screen thumbstick. That worked great but on a device with such small screen estate and my huge thumbs there wasn’t much left to see. So I reworked that into a point and click system, tap on the screen and the character will move to the position of the tap. A side effect of this new system is that some enemy movement bug got fixed automagically, that was a rather nice surprise.</p>  <p>Next to the control scheme I made some progress on the collision detection system, since my level engine is a tile based layered engine it was quite easy to do. I’ll probably dedicate a separate post on the collision detection system.</p>  <p>All in all good progress with little time. The project will now be shelved until the end of June, the day my vacation ends is the day I’ll pick the game back up. So that’ll be two weeks without updates.</p>  <p>Keep an eye on Twitter for upcoming updates and see you in two weeks!</p>  <p align="center"><img src="http://cdn.noknok.tv.s3.amazonaws.com/wp-content/uploads/2011/10/windows-phone-logo.jpg" width="142" height="142" />&#160;&#160;&#160;&#160;&#160; <img src="http://www.selectgame.com.br/wp-content/uploads/xna-logo.png" width="175" height="80" /></p>]]></content>
      <post-name type="text"><![CDATA[XNA Lunch game update]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
      </categories>
    </post>
    <post id="28839f09-81c4-4846-907e-d7ce908dfd5f" date-created="2012-07-16T09:54:21" date-modified="2012-07-16T10:06:34" approved="true" post-url="/blog/post/2012/07/16/Windows-8-Summer-app-a-thon.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Windows 8 Summer app-a-thon]]></title>
      <content type="text"><![CDATA[<p>Last week, on June 12, Microsoft Belgium organised a Windows 8 App-a-thon. Place to be this time was the casino in Blankenberge, a city at the Belgian coast. The concept: two app-a-thons, one during the day and one during the night. Gather a team, build an app in a few hours and show it off to the rest.</p>  <p><a href="http://i50.tinypic.com/192f0y.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i50.tinypic.com/192f0y.jpg" width="159" height="212" /></a></p>  <p>As usual I arrived a few hours early, always prefer arriving early then arriving late and have an entire room stare at you as you enter. The room was quite big, there were about 50 registrations for the event, a small and entertaining group. Once everyone of the day group arrived and got setup the introduction of the day began. Katrien De Graeve, a Microsoft Belgium Evangelist, gave the intro with me giving a small demo of Trello, the online board system that the app-a-thon community is using to divide the groups and brainstorm about different ideas.</p>  <p align="center"><a href="http://i50.tinypic.com/swqrzs.jpg" target="_blank"><img src="http://i50.tinypic.com/swqrzs.jpg" width="160" height="120" /></a>&#160; <a href="http://i47.tinypic.com/dcsehz.jpg" target="_blank"><img src="http://i47.tinypic.com/dcsehz.jpg" width="160" height="120" /></a>&#160; <a href="http://i47.tinypic.com/34hvvpi.jpg" target="_blank"><img src="http://i47.tinypic.com/34hvvpi.jpg" width="158" height="119" /></a></p>  <br clear="all" />  <p>After all the introductions were done, it was time to grab the first Red Bull of the day and started coding. My team would arrive for the night so during the day I mostly worked on my ComicDB app. This was also my first public appearance as a MEET member. This meant I would be a helper on people getting stuck. I did help some people with small issues and it felt good, being part of a community means helping people out and getting help from others. And you get fancy t-shirts <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_8.png" />.</p>  <p align="center"><font color="#4c6a75"><a href="http://i48.tinypic.com/uyfph.jpg" target="_blank"><img src="http://i48.tinypic.com/uyfph.jpg" width="95" height="127" /></a>&#160; <a href="http://i46.tinypic.com/a26sz7.jpg" target="_blank"><img src="http://i46.tinypic.com/a26sz7.jpg" width="170" height="127" /></a>&#160; <a href="http://i49.tinypic.com/33lcc41.jpg" target="_blank"><img src="http://i49.tinypic.com/33lcc41.jpg" width="169" height="127" /></a></font></p>  <p>   <br clear="all" /><font color="#333333">There were no demos after the day event because most teams stayed to continue working on their app during the night. Between both events it was time to get out and get some ice cream and seeing the beach. Yes that’s right, a bunch of developers went out to the beach instead of staying in a room behind a computer.</font></p>  <p align="center"><a href="http://i45.tinypic.com/vpaywo.jpg" target="_blank"><img src="http://i45.tinypic.com/vpaywo.jpg" width="133" height="100" /></a>&#160; <a href="http://i49.tinypic.com/5jwwzs.jpg" target="_blank"><img src="http://i49.tinypic.com/5jwwzs.jpg" width="133" height="100" /></a></p>  <p align="left">Then it was time for the night event, while eagerly awaiting the pizza me and my newly arrived team started working. We were working on a XBMC remote for Windows 8. We’ve spent some time before the event getting to know the API (which is a JSON-RPC API) and started working an a .NET wrapper for it. Our team proved to be pretty efficient and new functionality got spit out constantly. Never the less we couldn’t get all functionality working, playing a movie from within the app proved to be a big challenge, something we’re currently still working on.</p>  <p align="left">After some pretty darn good slices of pizza and some hours of coding it was demo time. Some impressive apps got shown off, an app to check the type of beer based on its color, an app that provides you with color schemes that you can use, a MovieDB app and a random funny sentence generator (that one was pretty hilarious).</p>  <p>After that we got one more cocktail at the beach and then it was time to get to the parking lot in the rain and start heading home. It was a very fun day, met some nice people, met some people in real life that I know from Twitter and had a great time working with friends on an app.</p>  <p>I can’t wait for the next app-a-thon in August! And the one in September that the community is currently begging for <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_8.png" /></p>  <p>&#160;</p>  <p>PS: About our XBMC remote app, we are currently still working on it and we do plan to get it in the store. At that time it will also get open-sourced. The name is currently MetroRemote but that can still change.   <br clear="all" /></p>  <p>All my pictures can be found <a href="http://nl.tinypic.com/a/2s0uh/1" target="_blank">here</a>, should you be on one and wish for me to remove it please send me an email or contact me through Twitter</p>]]></content>
      <post-name type="text"><![CDATA[Windows 8 Summer app-a-thon]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="ede0158f-4d97-4d35-a6ad-b42fd7dbb625" />
      </categories>
    </post>
    <post id="b30a36f2-ab2c-468b-b8f3-b1c1a9d4af65" date-created="2012-07-07T14:42:13" date-modified="2012-07-07T14:42:18" approved="true" post-url="/blog/post/2012/07/07/Lunch-development.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Lunch development]]></title>
      <content type="text"><![CDATA[<p>For the last couple of weeks I’ve been developing a game during my lunch break at work. Why? Mainly because I had this project in my mind for a while and I wanted something fun to do while eating lunch. Since I’ve started working on it I made a habit of tweeting my progress after the break, around 1PM GMT+1. Since I’ve started doing so a lot of people have shown interest in the project, providing tips and some even wanted to see the source code or wanted to help on the project.</p>  <p>I never expected to get this much feedback from something like this so I’ve decided to try and write weekly blog posts about the project, I will still tweet daily about the progress and then make a weekly summary post with findings, problems and fixes.</p>  <p>Now, about the game. The game is a stealth, sneak around the level, isometric 2D XNA game build for Windows Phone 7.5. If I finish it and I’m happy enough with the result to submit it to the marketplace then I’ll port it to Monogame and release it on some other platforms (no, not you iOS). </p>  <p>What I have so far: I have a map, created with a free, open source program called <a href="http://www.mapeditor.org/" target="_blank">Tiled</a>. I use Tiled because it’s pretty easy to use and it provides libraries for Windows Phone to read the maps in an XNA project. Next to the map I have a player that can run around on the map, the player always stays in the center of the screen so I basically move the map around. I have an enemy, with a triangular field of view, who moves up and down between two points. The player gets spotted when he enters the field of view of the enemy.</p>  <p>What I’m working on now: I’m currently building a level editor with winforms. This will make it easier for me to create lots of levels with enemies and objects in them. I currently have the form, I can open a map and read out the size date from the .tmx file (.tmx get’s created with Tiled). I want to finish the editor now so I can complete a first level. Once I have a complete level I can finetune the gameplay.</p>  <p>Will I open source this? Currently not, there are a few people that I know personally who have access to the source code but the repository will remain private for now. Why? because I’m thinking about making this my first paid app (with a free, ad containing version) on the WP7 marketplace. If I get completely stuck I might get some other developers involved, but for the time being I will remain the only developer.</p>  <p>Can I give more information about the story or setting? I probably could <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_7.png" /> but I won’t for now, I’m going to build up the hype meter for this project so that everyone will want to get it and I will get rich. Once I’m rich I can start up my own game developer studio, create Version 2 of this, get even richer, buy EA and finally get them to make decent games again. Then I’ll probably wake up and realize this was all a dream.</p>  <p>Should you be interested in following my project, please follow me on Twitter (<a href="https://twitter.com/nicovermeir" target="_blank">@NicoVermeir</a>) for daily updates or stay tuned for weekly updates on my blog.</p>  <p>PS: I’m going on holiday from June 12th until August 1st so there will probably be little to no updates in that timeframe.</p>]]></content>
      <post-name type="text"><![CDATA[Lunch development]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
        <category ref="a821ad2d-92f6-4bd5-b5ec-b3a894bb2329" />
      </categories>
    </post>
    <post id="085044c5-6617-447f-9b73-9b2b4d177c5b" date-created="2012-06-28T13:32:00" date-modified="2012-06-28T13:36:58" approved="true" post-url="/blog/post/2012/06/28/slides-and-demo-for-my-WiPhug-talk.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[slides and demo for my WiPhug talk]]></title>
      <content type="text"><![CDATA[<p>Yesterday I did a talk in the Belgian Windows Phone User Group about beginning XNA development. It was the first time I did a talk in my own user group and I had a great time.</p>
<p>I also learned a very valuable lesson: don't name your Autohotkey snippets the same as your classes. It was quite the hilarious moment when I entered the class name in the "Add File" dialog and hit the Enter key.</p>
<p>Besides that small setback everything went great. The slidedeck and demo (shooting iphones down with a <span style="text-decoration: line-through;">pink</span> magenta Lumia) are zipped up and can be found <a href="http://sdrv.ms/LD7P8Q" target="_blank">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[slides and demo for my WiPhug talk]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
      </categories>
      <comments />
      <trackbacks>
        <trackback id="f0600d7c-dcc2-4dfb-b236-e9622b3f3519" date-created="2012-07-03T21:32:21" date-modified="2012-07-03T21:32:21" approved="true" url="http://www.wiphug.be/?p=173">
          <title type="text"><![CDATA[Pingback from wiphug.be

WiPhug  &raquo; Archive   &raquo; 3 times Windows Phone 7]]></title>
        </trackback>
        <trackback id="dfd13f4e-6c21-4bf9-80d2-064f681f3d70" date-created="2012-08-08T22:11:14" date-modified="2012-08-08T22:11:14" approved="true" url="http://www.madn.be/post/2012/07/29/3-times-Windows-Phone-7.aspx">
          <title type="text"><![CDATA[3 times Windows Phone 7

3 times Windows Phone 7]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="9ae1e843-aa6c-45fd-9687-51fd30cd4dff" date-created="2012-06-22T08:47:00" date-modified="2012-06-22T09:36:58" approved="true" post-url="/blog/post/2012/06/22/My-community-day-session-slides-and-demos-are-online.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[My community day session slides and demos are online]]></title>
      <content type="text"><![CDATA[<p>Yesterday was Community Day, the biggest community driven event in Belgium.</p>
<p>I did a talk there about porting over a Windows Phone 7 app to Windows 8. It was very exciting, I never spoke to such a crowd before, let alone hooked up my portable to a cinema beamer.</p>
<p>The talk itself went pretty well but I did suffer from demo failure, what was really odd since the demo worked perfectly an hour earlier. I researched the error after the talk and it seems that in a Windows 8 Metro app the path to the manifest file is an absolute path for some reason. I suddenly remembered that I moved the solution to another folder right before the talk, so it was my own fault. Reminder to self: never move a folder before doing a talk.</p>
<p>Anyway, it was a great day, I've met some nice people, had fun discussions and attended an App clinic on UI (thanks Lesley for the useful information!). See you next year community day!</p>
<p>Download my slides and demos <a href="http://sdrv.ms/MAddYa" target="_blank">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[My community day session slides and demos are online]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="f016512c-1ad9-4a28-ab23-13e5ef3086b7" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="cc3ee34d-7511-4bee-9efd-8f2b2cf96458" parentid="00000000-0000-0000-0000-000000000000" date-created="2012-06-28T15:08:07" date-modified="2012-06-28T15:08:07" approved="true" user-name="Tom" user-email="Tom.Zander@zues.us" user-ip="212.35.120.90" user-url="">
          <title type="text"><![CDATA[re: My community day session slides and demos are online]]></title>
          <content type="text"><![CDATA[Is this the real working version, or still the &quot;fucked up&quot; version like you were trying to show?]]></content>
        </comment>
        <comment id="ae2614e0-2381-4eff-ad17-fbc01cf4e200" parentid="00000000-0000-0000-0000-000000000000" date-created="2012-06-29T13:52:49" date-modified="2012-06-29T13:52:49" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="194.78.28.169" user-url="">
          <title type="text"><![CDATA[re: My community day session slides and demos are online]]></title>
          <content type="text"><![CDATA[well the one I was trying to show actually worked, the path to the manifest file got wrong somehow. so if you encounter an error while building the solution, that&#39;s the reason.]]></content>
        </comment>
        <comment id="3628e209-f387-433a-abd4-b3817766509e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T23:32:19" date-modified="2013-07-02T23:32:19" approved="false" user-name="betting sites" user-email="randi-westbrook@freenet.de" user-ip="5.135.240.52" user-url="">
          <title type="text"><![CDATA[re: My community day session slides and demos are online]]></title>
          <content type="text"><![CDATA[Wow, awesome blog structure! How long have you been blogging for? you make running a blog glance easy. The overall look of your web site is magnificent, as neatly as the content material!

Feel free to visit my website ...  betting sites - http://www.bookiesbetting.com ]]></content>
        </comment>
        <comment id="2d659b45-9db1-4514-b10e-1beb9b3b6051" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T00:33:54" date-modified="2013-07-03T00:33:54" approved="false" user-name="reel king" user-email="victorinabevins@web.de" user-ip="178.32.160.95" user-url="">
          <title type="text"><![CDATA[re: My community day session slides and demos are online]]></title>
          <content type="text"><![CDATA[Hi! I could have sworn I&#39;ve been to this blog before but after checking through some of the post I realized it&#39;s new to me. Anyways, I&#39;m definitely delighted I found it and I&#39;ll be bookmarking and checking back frequently!

Feel free to surf to my blog post -  reel king - http://www.reelking.net ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="285777a7-0174-4861-a620-ca371ef817d9" date-created="2012-06-19T12:13:00" date-modified="2012-06-19T12:28:18" approved="true" post-url="/blog/post/2012/06/19/What-I-expect-from-the-WP-summits-keynote.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[What I expect from the WP summit's keynote]]></title>
      <content type="text"><![CDATA[<p>Tomorrow we will get the first details of the next Windows Phone version. A moment I've been waiting for since the first details of Apollo (the codename for WP8) started showing up. That said, I feel like a kid the evening before Christmas, staring at presents unable to open them or to take a peek inside.</p>
<p>What do I expect from the keynote? I expect announcements concerning new resolutions, multi-core CPU's, private marketplace, IE10, NFC, Wallet, new camera features, swappable SD cards.</p>
<p>Those are the most obvious things and I'm pretty sure that we'll hear about 95% of them tomorrow. Besides this I hope to hear from WP 7.7 or even better, existing devices will get a complete upgrade to WP8.</p>
<p>And let's not forget the dev related stuff, WP8 will run on WinRT, the kernel used in Windows 8, allowing devs to share 99% of apps between Windows Phone, Windows 8 and maybe even Xbox. I also hope for beta SDK availability tomorrow at the event and a release date set at about the same time as Windows 8 (around October). Maybe we'll even get some early access to the Smartglass SDK, that would be a whole lot of epicness.</p>
<p>No matter how it turns out, I'm pretty confident that it will be awesome. I'm already looking forward to using the complete WinRT ecosystem, but even more to developing apps that plug into each and every WinRT client.</p>
<p>I'll be following the livestream with our User Group's board and our friends at Microsoft while enjoying some beer and pizza, so setting is perfect. I'll also be spamming Twitter, so keep an eye on it there.</p>
<p>BEWARE: everything I talked about in this post is my own opinion, I have no knowledge of what effectively will be shown at tomorrow's keynote.</p>]]></content>
      <post-name type="text"><![CDATA[What I expect from the WP summit's keynote]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="a3f18305-7737-4491-be20-f4faa970daff" />
      </categories>
    </post>
    <post id="544b0125-3e5a-4acf-a75b-33d3aa9bba9b" date-created="2012-06-07T21:29:21" date-modified="2012-06-07T23:35:04" approved="true" post-url="/blog/post/2012/06/07/Will-Microsoft-pull-a-hattrick.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Will Microsoft pull a hattrick]]></title>
      <content type="text"><![CDATA[<p>Microsoft has had a busy week and currently is the topic on social media. How come? Well for starters at their E3 (Electronic Entertainment Expo) they announced SmartGlass, a technology that connects the devices throughout your home. You can, for example, start watching a movie on your phone on your way home, keep watching it on your television by using your Xbox360 and then finish it on your tablet when your wife wants to see her favorite soap opera. And the best part of this? It will all be free, it’s just an app on your phone, tablet and/or xbox. It will even be available on iOS and Android. That’s right! Microsoft is supporting the competition now, although it’s pretty safe to assume that the Windows ecosystem will have some extra features compared to Google and Apple.</p>  <p>So pretty impressive start of the week for Microsoft, techies around the world (myself definitely included) were pretty excited about this announcement. Skip ahead a few days later, today on Thursday 7th of June Microsoft announced the next version of Windows Azure, their cloud based platform. And what an announcement it was! Scott “The Gu” Guthrie showed off some of the new features and the world saw that it was good. Azure will include features like Caching, Media Services, Virtual Machines and Websites. You will be able to setup a virtual machine locally and upload the VHD to the cloud, and it doesn’t even have to run a Microsoft operating system. Azure now has support for Linux virtual machines. They have a partnership with Suse and Ubuntu to offer you the server versions of their OS with all the scalability features that a Cloud OS should have. Next to that you can soon host your blog in the Cloud with a free website subscription (free as in free for a year, definitive pricing isn’t known yet). This feature has support for PHP and ASP.net obviously but Azure now brings support for Python as well. Oh and on a “small” sidenote: you can use MySQL now for your Azure apps. There’s a lot more announced for Azure today, just take a look at the keynote or read the blogs from the various Azure MVP’s. Or just search for #meetazure on Twitter but prepare to have your mind blown.</p>  <p>So that’s two days that Microsoft succeeded in actually announcing spectacular technologies, social media is exploding in awe, screaming that Microsoft is finally doing it right. I really agree with this. Datacenters and webhosting companies will have a difficult time competing against the Azure system. Even vmWare and Amazon AWS are facing dark times. In my opinion, Microsoft has officially won the war for the living room with SmartGlass and the war for the cloud with Azure vNext.</p>  <p>So what remains then? The war for the mobile world obviously. At the moment this war is being fought by Apple and Google, ammo mostly being patents. But on June 20th the WP7 summit will start, the keynote will be live streamed just like Azure’s keynote today. So if you put 2 and 2 together, it’s pretty obvious that MS will be announcing WP8 end of this month. If all the rumours about WP8 prove to be true they will effectively surprise the big audience a third time in one month, thus pulling a hattrick.</p>  <p>And how I hope they do! It’s long overdue that they succeed in changing their image from a monster company only interested in money. That was maybe true years ago, but to me they now are a company that dares to innovate, Windows 8 is the biggest proof of that. And they actually listen to their users while supporting the open source scene. Who would’ve thought that of the big bad Microsoft?</p>  <p>To wrap things up, I really like where they are going with all this. I enjoy Windows 8 a lot these days, I’m impressed by both SmartGlass and Azure and I’m eagerly awaiting Windows Phone 8. You’re doing great Microsoft, keep it up! </p>]]></content>
      <post-name type="text"><![CDATA[Will Microsoft pull a hattrick?]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="4aadb0fd-12e8-47f0-a2e0-d4b4021f9c83" date-created="2012-05-30T13:25:00" date-modified="2012-05-30T13:33:05" approved="true" post-url="/blog/post/2012/05/30/Visug-WP7-live-tiles-slides-and-demos.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Visug: WP7 live tiles slides and demos]]></title>
      <content type="text"><![CDATA[<p>Yesterday I did a session about Windows Phone Live Tiles at Visug. Visug is the Belgian Visual Studio User Group.</p>
<p>I had a great time, lots of fun, met some nice people, had some drinks and laughs. All in all a very productive evening. Except for the Microsoft Proxy (the event was hosted by Microsoft Belgium) that blocked my connection to the Microsoft Push Notification Service (go figure...).</p>
<p>Anyway, I hope to speak at Visug again in the future, the slides and demos from yesterday's event can be downloaded <a href="http://sdrv.ms/KHxtaD" target="_blank">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[Visug: WP7 live tiles slides and demos]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="f016512c-1ad9-4a28-ab23-13e5ef3086b7" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
      </categories>
    </post>
    <post id="993d8a78-483f-4aa6-9ed6-4b9daa2e800c" date-created="2012-05-10T13:51:00" date-modified="2012-05-10T13:56:41" approved="true" post-url="/blog/post/2012/05/10/Community-Day-2012.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Community Day 2012]]></title>
      <content type="text"><![CDATA[<p>Here in Belgium we .net developers have an awesome community. An entire washlist of User groups (including the Windows Phone User Group that I'm a founding member off) that organise free events on a regular base.</p>
<p>Once a year all user groups get together for a full day, completely free event called Community Day. This year Community Day will take place on June 21st and will have 6 tracks full of IT-pro and developer sessions.</p>
<p>For me it will be the third time that I'll attend this great event but it will be my first time actually doing a session there, I'll be presenting about converting a Windows Phone 7 application to Windows 8 Metro. I'm really looking forward to this as I never talked in front of such a big audience, let alone did a talk in a movie theatre.</p>
<p>If you're attending as well, feel free to come talk to me about anything.</p>
<p>&nbsp;</p>
<p>See you there!</p>
<p style="text-align: center;"><img src="http://www.communityday.be/data/downloads/ComDay2012-imaspeaker.png" alt="" /></p>]]></content>
      <post-name type="text"><![CDATA[Community Day 2012]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
    </post>
    <post id="025b3d8c-88f8-4a2e-acad-6d6f9f50d688" date-created="2012-04-12T17:18:01" date-modified="2012-04-14T20:23:23" approved="true" post-url="/blog/post/2012/04/12/Filtering-collections-from-XAML-using-CollectionViewSource.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Filtering collections from XAML using CollectionViewSource]]></title>
      <content type="text"><![CDATA[<p>I find that I often run into the need of separating a collection of items into several collections just so I can bind them to multiple listboxes, for example a list of sessions spanning several tracks and each track is shown in his own listbox in a pivotitem. To get this done you can start by adding multiple collections to your viewmodel and divide the items there. However this makes your viewmodel very big in a very short time. A better way to do this is using CollectionViewSource items in XAML. Let me show you how.</p>  <p>First thing I did was building a demo class existing out of a title and a description, these two properties will be shown in the listbox later on. A third property is the one we’ll use to filter the data, here’s the completed class.</p>  <pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">DemoClass
</span>{
    <span style="color: blue">public string </span>Title { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
    <span style="color: blue">public string </span>Description { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
    <span style="color: blue">public </span><span style="color: #2b91af">Pivot </span>PivotToAppearIn { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }
}</pre>

<p>Nothing special here. Notice the Pivot instance, this is just an Enum that will be the way to filter later on.</p>

<pre class="code"><span style="color: blue">public enum </span><span style="color: #2b91af">Pivot
</span>{
    First,
    Second,
    All
}</pre>

<p>For the demo’s purpose I’ll be creating a bunch of dummy data in the viewmodel. The project template I’ve used here is the default pivot app template in the Windows Phone 7.1.1 SDK. It comes with a bunch of dummy data, I’ve used the same data but put them in instances of the DemoClass. Those instances are put inside an ObservableCollection.</p>

<p>This is the viewmodel</p>

<pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">MainViewModel </span>: <span style="color: #2b91af">INotifyPropertyChanged
</span>{
    <span style="color: blue">public const string </span>ItemsPropertyName = <span style="color: #a31515">&quot;Items&quot;</span>;
    <span style="color: blue">private </span><span style="color: #2b91af">ObservableCollection</span>&lt;<span style="color: #2b91af">DemoClass</span>&gt; items;
    <span style="color: blue">public </span><span style="color: #2b91af">ObservableCollection</span>&lt;<span style="color: #2b91af">DemoClass</span>&gt; Items
    {
        <span style="color: blue">get
        </span>{
            <span style="color: blue">return </span>items;
        }

        <span style="color: blue">set
        </span>{
            <span style="color: blue">if </span>(items == <span style="color: blue">value</span>)
            {
                <span style="color: blue">return</span>;
            }

            items = <span style="color: blue">value</span>;
            NotifyPropertyChanged(ItemsPropertyName);
        }
    }

    <span style="color: blue">public </span>MainViewModel()
    {
        <span style="color: blue">this</span>.Items = <span style="color: blue">new </span><span style="color: #2b91af">ObservableCollection</span>&lt;<span style="color: #2b91af">DemoClass</span>&gt;();
        LoadData();
    }

    <span style="color: blue">public void </span>LoadData()
    {
        Items.Add(<span style="color: blue">new </span><span style="color: #2b91af">DemoClass 
        </span>{ 
            Title = <span style="color: #a31515">&quot;runtime one&quot;</span>, 
            Description = <span style="color: #a31515">&quot;Maecenas praesent accumsan bibendum&quot;</span>, 
            PivotToAppearIn = <span style="color: #2b91af">Pivot</span>.First 
        });
    }

    <span style="color: blue">public event </span><span style="color: #2b91af">PropertyChangedEventHandler </span>PropertyChanged;
    <span style="color: blue">private void </span>NotifyPropertyChanged(<span style="color: #2b91af">String </span>propertyName)
    {
        <span style="color: #2b91af">PropertyChangedEventHandler </span>handler = PropertyChanged;
        <span style="color: blue">if </span>(<span style="color: blue">null </span>!= handler)
        {
            handler(<span style="color: blue">this</span>, <span style="color: blue">new </span><span style="color: #2b91af">PropertyChangedEventArgs</span>(propertyName));
        }
    }
}</pre>

<p>So we’ve got our basic bindable property here and a method that loads in the dummy data. In the demo project there’s obviously more then one item in the collection, there’s about 16 to be precise.</p>

<p>In the design I didn’t change a lot from the default template. I’ve just copied the ItemTemplate from the listbox to the pageresources so that it can be reused in the second listbox.</p>

<p>This is the template.</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">phone</span><span style="color: blue">:</span><span style="color: #a31515">PhoneApplicationPage.Resources</span><span style="color: blue">&gt;
    </span><span style="color: green">&lt;!-- template for the listboxes --&gt;
    </span><span style="color: blue">&lt;</span><span style="color: #a31515">DataTemplate </span><span style="color: red">x</span><span style="color: blue">:</span><span style="color: red">Name</span><span style="color: blue">=&quot;ListBoxTemplate&quot;&gt;
            &lt;</span><span style="color: #a31515">StackPanel </span><span style="color: red">Margin</span><span style="color: blue">=&quot;0,0,0,17&quot; </span><span style="color: red">Width</span><span style="color: blue">=&quot;432&quot; </span><span style="color: red">Height</span><span style="color: blue">=&quot;78&quot;&gt;
                &lt;</span><span style="color: #a31515">TextBlock </span><span style="color: red">Text</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Title</span><span style="color: blue">}&quot; </span><span style="color: red">TextWrapping</span><span style="color: blue">=&quot;Wrap&quot; 
                           </span><span style="color: red">Style</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">StaticResource </span><span style="color: red">PhoneTextExtraLargeStyle</span><span style="color: blue">}&quot;/&gt;
                &lt;</span><span style="color: #a31515">TextBlock </span><span style="color: red">Text</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Description</span><span style="color: blue">}&quot; </span><span style="color: red">TextWrapping</span><span style="color: blue">=&quot;Wrap&quot; 
                           </span><span style="color: red">Margin</span><span style="color: blue">=&quot;12,-6,12,0&quot; </span><span style="color: red">Style</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">StaticResource </span><span style="color: red">PhoneTextSubtleStyle</span><span style="color: blue">}&quot;/&gt;
            &lt;/</span><span style="color: #a31515">StackPanel</span><span style="color: blue">&gt;
        &lt;/</span><span style="color: #a31515">DataTemplate</span><span style="color: blue">&gt;
&lt;/</span><span style="color: #a31515">phone</span><span style="color: blue">:</span><span style="color: #a31515">PhoneApplicationPage.Resources</span><span style="color: blue">&gt;
</span></pre>

<p>All right now that the preparations are set, time to get into the filtering. First step is to add a CollectionViewSource for each listbox. These are set on the same place as I’ve put the listbox ItemTemplate, in the pageresources. For this demo I need two CollectionViewSources.</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">CollectionViewSource </span><span style="color: red">x</span><span style="color: blue">:</span><span style="color: red">Name</span><span style="color: blue">=&quot;FirstPivot&quot; </span><span style="color: red">Filter</span><span style="color: blue">=&quot;FirstPivot_Filter&quot; </span><span style="color: red">Source</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Items</span><span style="color: blue">}&quot; /&gt;
&lt;</span><span style="color: #a31515">CollectionViewSource </span><span style="color: red">x</span><span style="color: blue">:</span><span style="color: red">Name</span><span style="color: blue">=&quot;SecondPivot&quot; </span><span style="color: red">Filter</span><span style="color: blue">=&quot;SecondPivot_Filter&quot; </span><span style="color: red">Source</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Items</span><span style="color: blue">}&quot; /&gt;
</span></pre>

<p>So what’s all this? x:Name is like in any other XAML object, it’s just the name that can be used to reference the object. The source is the ObservableCollection that was created in the viewmodel. And last but definitely not least is the Filter event. This event will fire for every item in the collection that is bound to the Source property.</p>

<p>Now for the event handler, I’ll just post the event handler FirstPivot_Filter here because they are basically the same.</p>

<pre class="code"><span style="color: blue">private void </span>FirstPivot_Filter(<span style="color: blue">object </span>sender, System.Windows.Data.<span style="color: #2b91af">FilterEventArgs </span>e)
{
    e.Accepted = (e.Item <span style="color: blue">as </span><span style="color: #2b91af">DemoClass</span>).PivotToAppearIn == Model.<span style="color: #2b91af">Pivot</span>.First || 
        (e.Item <span style="color: blue">as </span><span style="color: #2b91af">DemoClass</span>).PivotToAppearIn == Model.<span style="color: #2b91af">Pivot</span>.All;
}</pre>

<p>FilterEventArgs has two properties, Accepted is a boolean that when true shows the item in the listbox that is bound to the CollectionViewSource. Item is the current item in the collection. Remember that this event is triggered for each item in the collection. So what we do here is casting the Item property to an instance of DemoClass then check if the PivotToAppearIn property, that was an instance of the enum, is either First or All.</p>

<p>Now that we have the CollectionViewSources and the event handlers in place it’s time to bind the ViewSource to the listbox.</p>

<pre class="code"><span style="color: blue">&lt;</span><span style="color: #a31515">controls</span><span style="color: blue">:</span><span style="color: #a31515">PivotItem </span><span style="color: red">Header</span><span style="color: blue">=&quot;first&quot;&gt;
    &lt;</span><span style="color: #a31515">ListBox </span><span style="color: red">x</span><span style="color: blue">:</span><span style="color: red">Name</span><span style="color: blue">=&quot;FirstListBox&quot; </span><span style="color: red">Margin</span><span style="color: blue">=&quot;0,0,-12,0&quot; 
             </span><span style="color: red">ItemsSource</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">Binding </span><span style="color: red">Source</span><span style="color: blue">={</span><span style="color: #a31515">StaticResource </span><span style="color: red">FirstPivot</span><span style="color: blue">}}&quot;
             </span><span style="color: red">ItemTemplate</span><span style="color: blue">=&quot;{</span><span style="color: #a31515">StaticResource </span><span style="color: red">ListBoxTemplate</span><span style="color: blue">}&quot; /&gt;
&lt;/</span><span style="color: #a31515">controls</span><span style="color: blue">:</span><span style="color: #a31515">PivotItem</span><span style="color: blue">&gt;
</span></pre>

<p>The bindingsource of ItemsSource is bound to the CollectionViewSource that filters for this listbox. And that’s it!</p>

<p>&#160;</p>

<p>In this article I’ve shown how you can filter a collection using a CollectionViewSource in XAML. This is an easy and fast way to visually filter data while keeping a clean ViewModel.</p>

<p>Download the Demo project <a href="https://skydrive.live.com/redir.aspx?cid=5a345bb15e973473&amp;resid=5A345BB15E973473!250&amp;parid=root" target="_blank">here</a>.</p>]]></content>
      <post-name type="text"><![CDATA[Filtering collections from XAML using CollectionViewSource]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="540177e8-fd15-4be6-b0ba-6f2c19913278" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="22302a23-f019-4a09-80a2-91b58db4d241" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
      </categories>
      <comments>
        <comment id="cb46e172-78dc-4112-9271-673b1557248e" parentid="00000000-0000-0000-0000-000000000000" date-created="2012-04-13T20:18:00" date-modified="2012-04-13T20:18:00" approved="true" user-name="Andreas Hammar" user-email="andreas.hammar@jayway.com" user-ip="78.69.59.127" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[Nice post! I like the idea.

How is the perf? All the filtering will be done on the UI thead right?]]></content>
        </comment>
        <comment id="2cb259cf-983f-42fb-8124-f6b77eff6b07" parentid="cb46e172-78dc-4112-9271-673b1557248e" date-created="2012-04-14T20:21:26" date-modified="2012-04-14T20:21:26" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="78.20.136.190" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[performance is really good, I haven&#39;t done it on huge collections yet but so far I get lightning fast results]]></content>
        </comment>
        <comment id="0bdaaee7-c3c7-4666-bf2b-5dcf90df3f21" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-13T07:32:21" date-modified="2013-06-13T07:32:21" approved="true" user-name="Nathan" user-email="nato24@gmail.com" user-ip="67.161.103.189" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[Hi Nico,

Any chance you have a similar example of how to achieve this using a LongListSelector with alpha key grouping?]]></content>
        </comment>
        <comment id="962500bc-3544-41cd-8aac-595bc6de2b0e" parentid="0bdaaee7-c3c7-4666-bf2b-5dcf90df3f21" date-created="2013-06-13T10:16:51" date-modified="2013-06-13T10:16:51" approved="true" user-name="Nico" user-email="nico@spikie.be" user-ip="81.83.148.116" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[Hi Nathan,

I haven&#39;t tried this approach with a LongListSelector yet (it is a silly control after all ;-) )

stackoverflow did point me to this: http://stackoverflow.com/questions/14251274/longlistselector-grouping-using-collectionview-in-windows-phone-7-or-windows-pho

I hope this helps]]></content>
        </comment>
        <comment id="96f45b4a-ed6c-40c0-beaa-d5319ae26456" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-13T16:52:44" date-modified="2013-06-13T16:52:44" approved="true" user-name="Nathan" user-email="nato24@gmail.com" user-ip="207.170.228.19" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[I was thinking that might be the case.  The control is good approach for certain UI situation, but agree it&#39;s a bit wonky.

Your blog has been extremely helpful as I ramp up on WP8.

Thanks,
Nathan]]></content>
        </comment>
        <comment id="bb5328bc-2610-46cc-9d7b-9a37b7cfde77" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T14:55:20" date-modified="2013-06-20T14:55:20" approved="false" user-name="FAG bearings" user-email="percyralph@gmail.com" user-ip="5.135.53.238" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[As to the bearings which are ready to endure the load of large effect and alternative bending anxiety, AFG adopts carburizing steels. These people could not send an email to send the blueprints to this amazing advanced weaponry so people may use it. Just place your order on any ball bearing and roller bearing that you need.

Feel free to visit my weblog ::  FAG bearings - http://www.fortforum.se/wiki/index.php?title=Realistic_Products_For_FAG_bearings_Across_The_USA ]]></content>
        </comment>
        <comment id="bf7dfcc8-c357-4e18-8563-fc3bcd7f64c9" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T18:18:29" date-modified="2013-06-27T18:18:29" approved="false" user-name="Joshua" user-email="joshuaherndon@yahoo.de" user-ip="202.177.165.52" user-url="">
          <title type="text"><![CDATA[re: Filtering collections from XAML using CollectionViewSource]]></title>
          <content type="text"><![CDATA[It&#39;s in fact very complicated in this busy life to listen news on TV, thus I only use world wide web for that reason, and get the newest information.

Here is my web blog ... Live webcam shows ( Joshua - http://www.icamzlive.com/search.php?langchoice=sv&amp;pagenum=7 )]]></content>
        </comment>
      </comments>
      <trackbacks>
        <trackback id="bc6408a4-685e-4cfc-8262-b199d0d608e2" date-created="2012-04-13T12:18:08" date-modified="2012-04-13T12:18:08" approved="true" url="http://www.silverlightshow.net/news/Filtering-collections-from-XAML-using-CollectionViewSource.aspx">
          <title type="text"><![CDATA[Pingback from silverlightshow.net

Filtering collections from XAML using CollectionViewSource]]></title>
        </trackback>
        <trackback id="2277ea99-14ee-4640-bf7d-e3ac9ff2c43b" date-created="2012-04-15T00:02:11" date-modified="2012-04-15T00:02:11" approved="true" url="http://www.dotnetkicks.com/WindowsPhone7/Filtering_collections_from_XAML_using_CollectionViewSource">
          <title type="text"><![CDATA[Filtering collections from XAML using CollectionViewSource

You've been kicked (a good thing) - Trackback from DotNetKicks.com]]></title>
        </trackback>
        <trackback id="44a2d418-f83c-4952-851f-b787643aa8e8" date-created="2014-12-10T19:40:30" date-modified="2014-12-10T19:40:30" approved="true" url="http://charmianswers.org/wordpress/yawn/2014/12/10/quick-and-efficient-filtering-of-a-listbox-bound-to-a-collection-in-the-viewmodel/">
          <title type="text"><![CDATA[Pingback from charmianswers.org

Quick and efficient filtering of a listbox bound to a collection in the ViewModel | Yawn Answers]]></title>
        </trackback>
      </trackbacks>
    </post>
    <post id="4297905b-6c23-4f6e-8119-be98fd521952" date-created="2012-03-14T21:58:32" date-modified="2012-03-15T22:33:45" approved="true" post-url="/blog/post/2012/03/14/Not-another-rant-on-Windows-8.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Not another rant on Windows 8]]></title>
      <content type="text"><![CDATA[<p>So Windows 8 consumer preview is available for a couple of weeks now and I see a lot of different reactions. Most negative reactions I’m seeing is about the Metro UI. I don’t understand why people don’t like it, personally I love the Metro UI and here’s why.</p>  <p>First of all, stop begging Microsoft to bring back the old Start menu. This is called innovation people, if Microsoft never changed the UI of Windows we would all still be working on this:</p>  <p><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i44.tinypic.com/v8fndv.jpg" width="317" height="238" /></p>  <p>So nothing wrong with some good innovation. Yes I know that change can be scary, but just really how different is Windows 8 from Windows 7? When you take a closer look at it Windows 8 takes features from Windows 7 that have proven their worth and improves on them.</p>  <p>Don’t believe me? Let’s take the Start menu for example. The Windows 7 start menu has this really great feature that is the search box. Hit the Windows key on the keyboard, type the name or part of the name of the application you want to open and Windows performs a real-time search with the results being displayed inside of the start menu.</p>  <p><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i39.tinypic.com/25ppxs3.jpg" /></p>  <p>You can do the same in Windows 8, when on the Metro UI just start typing and Windows starts the same real-time search with the results being displayed in the Metro UI. So more space for the results and you can even specify where you want to search, on your pc, in your mails, on the web, etc. all from the same feature that we’ve come to know and love in Windows 7.    <br /><a href="http://i43.tinypic.com/i6juq0.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i43.tinypic.com/i6juq0.jpg" width="489" height="275" /></a></p>  <p>The Start menu in Windows 7 has a great way of showing your most used applications so you can easily access them. The Start screen in Windows 8 lets you organise and order every application in the way you prefer and makes you feel most comfortable. Another good concept made great.</p>  <p><a href="http://i42.tinypic.com/rizxhh.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i42.tinypic.com/rizxhh.jpg" width="239" height="303" /></a>    <br />The Windows 7 Start menu has some links to administrative tools like the Control Panel, Devices and Printers, Computer, … stuff that is only used by those who know what they’re for, so it’s mostly wasted space. In Windows 8 all these options and a lot more are hidden behind a right-click context menu, something the power users will definitly find and won’t bug the “normal” users.</p>  <p align="center"><img src="http://i41.tinypic.com/2v1rfci.jpg" width="105" height="362" />&#160; VS&#160; <img src="http://i39.tinypic.com/29vb0cp.jpg" width="308" height="343" /></p>  <p align="left">Next on the list of big improvements is the “All Programs” option in the Windows 7 Start menu, this just lists all folders inside of the Program Files and Program Files (x86) directories, it should be called “All Directories” instead of All Programs. Also due to the rather small nature of the Start menu only about 20 items can be seen without scrolling and they are really tiny. In Windows 8 I can place up to 60 items on one screen without scrolling, even when I divide them all into groups I get way more apps in my Start screen and it’s the shortcuts to the app themselves, not their installation folder.</p>  <p align="center"><a href="http://i41.tinypic.com/4s1zzt.jpg" target="_blank"><img src="http://i41.tinypic.com/4s1zzt.jpg" width="154" height="281" /></a> VS <a href="http://i39.tinypic.com/11jqlhy.jpg" target="_blank"><img src="http://i39.tinypic.com/11jqlhy.jpg" width="491" height="277" /></a></p>  <p>Enough about the Start menu and the Start screen. Let’s take a look at Windows explorer. The explorer in Windows 7 had some nice shortcuts depending on where you are. For example when you open “Computer” you get this:</p>  <p><a href="http://i44.tinypic.com/dysrkp.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i44.tinypic.com/dysrkp.jpg" width="616" height="58" /></a></p>  <p>Really cool way to get to System Properties, Control Panel, map a network drive, etc. Now in Windows 8 they’ve implemented the Ribbon like it exists in Office 2007 and 2010. However since some people out there don’t like the Ribbon for some obscure reason it starts collapsed.</p>  <p><a href="http://i43.tinypic.com/168zb6f.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i43.tinypic.com/168zb6f.jpg" width="608" height="56" /></a></p>  <p>After a click on the small white arrow in the upper right corner it turns into this:</p>  <p><a href="http://i44.tinypic.com/119phyq.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i44.tinypic.com/119phyq.jpg" width="608" height="111" /></a></p>  <p>Same options but more visually. The fact that they are bigger and have an icon makes them more accessible.</p>  <p>Now let’s take a look at some features that are new to Windows 8. For example, when you right click on the metro UI there’s an option to show all apps. On this overview when you click the zoom button in the bottom right corner you can select a letter or a group to quickly jump the applist to your selection.</p>  <p><a href="http://i43.tinypic.com/2qu7thg.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i43.tinypic.com/2qu7thg.jpg" width="508" height="286" /></a></p>  <p>Another new feature is the charms bar. This appears when you place the mouse cursor in the upper right corner of the screen, or on a touchscreen you can draw the bar in from the right. This bar contains a Start button that will take you to the Start screen. It has a Search button which does the obvious. The devices button shows all plugged in devices like printers, scanners, secondary monitors, etc. The Settings button shows options like volume, wireless networks, etc. Most of these are also available on the Desktop, just like on Windows 7. </p>  <p><a href="http://i44.tinypic.com/zjyt6t.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i44.tinypic.com/zjyt6t.jpg" width="35" height="208" /></a></p>  <p>The most impressive feature however is the Share button. The function of this button differs depending on what you’re doing. Let’s say for example that you’re reading a cool article on your favorite blog. Click the Share button and you can immediately share the article with some friends using the Mail application </p>    <p><a href="http://i43.tinypic.com/a4mpmx.jpg" target="_blank"><img style="float: none; margin-left: auto; display: block; margin-right: auto" src="http://i43.tinypic.com/a4mpmx.jpg" width="375" height="211" /></a></p>  <p>At the moment this Share option only works on Metro apps, developers can build in the Share possibilities themselves.</p>  <p>Another feature of the Start screen that is completely new is the Store. Windows now has an online store where you can download apps. These apps are called Metro application and can only run in full screen or snapped next to another app. When you download an app from the store you can rest assure that the app is thoroughly tested on performance and capabilities. No viruses, spyware or other scary stuff in those apps, only clean good running apps.</p>  <p>A side note on Metro apps: a bunch of them has a so called App bar, just right-click in the app to bring it up. Since those applications run in full screen there is no close button. The apps can be closed by pressing Alt-F4 or by dragging the app from the top of the screen (where the titlebar would be in a normal app) to the bottom of the screen.</p>  <p>Now pay attention class, the next part could be important. The Metro applications can be closed if you want to but why would you? Windows 8 Metro apps work a lot like iOS and WP7 apps. When you press the Windows button on your keyboard you go back to the Start screen and the application itself stays in memory in a so called Tombstoned state. This means that it utilizes a bit of memory to keep alive but uses no CPU. If Windows notices that it doesn’t have enough free memory it will start closing the oldest tombstoned apps. I’ve told you that all Metro apps are tested by Microsoft, this includes a memory test that makes sure that an app doesn’t utilize more memory then is allowed. So please consider using the tombstoned state, Metro is designed this way and stop ranting that Metro apps can’t be closed because they can but they shouldn’t.</p>  <p>With that I would like to conclude this post. I hope I’ve shown you that Windows 8 is really worth looking into and that it’s a huge step forward. Microsoft is going for unity among platforms, the so called 3-screen strategy where phone, pc and television (Xbox360) all work in the same way. If you ask me why I like Windows 8 so much the answer would be because it changes everything and nothing at the same time. Everyone can keep working like they always have but the changes they’ve made are all made to make everyone more productive. And it works.</p>  <p>My final message: Stop saying that Windows 8 sucks. Install it on a VHD, second partition or second hard drive and use it for at least 2 weeks for all your daily work. That is the ONLY way to get a decent view on how it works. And please, do not install it in a virtual machine, make 2 clicks and rant on every forum you can find about how you don’t want the Metro UI.</p>]]></content>
      <post-name type="text"><![CDATA[Not another rant on Windows 8]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
      </categories>
      <comments>
        <comment id="404cdfe6-fe7a-4e2e-99ea-9213ef5ee08b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-20T10:37:50" date-modified="2013-06-20T10:37:50" approved="false" user-name="volvo occasions" user-email="DoortjeJansen@yahoo.nl" user-ip="188.24.107.15" user-url="">
          <title type="text"><![CDATA[re: Not another rant on Windows 8]]></title>
          <content type="text"><![CDATA[On our pages you will find a large number of used Volvo&#39;s in excellent condition. A Volvo possesses these properties as a new Volvo, but is considerably cheaper. Volvo stands for reliability and durability. - http://www.hooftman.nl/volvosales/volvo-occasions.html]]></content>
        </comment>
        <comment id="457f3f34-b0b6-4e66-8df7-055689ac1c93" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T07:23:33" date-modified="2013-06-28T07:23:33" approved="false" user-name="small business internet marketing" user-email="houstonromero@gmail.com" user-ip="23.19.132.32" user-url="">
          <title type="text"><![CDATA[re: Not another rant on Windows 8]]></title>
          <content type="text"><![CDATA[Hmm it seems like your website ate my first comment (it was super long) so I guess I&#39;ll just sum it up what I submitted and say, I&#39;m thoroughly enjoying your blog. I too am an aspiring blog writer but I&#39;m still new to the whole thing. Do you have any points for rookie blog writers? I&#39;d definitely appreciate it.

Feel free to surf to my page ...  small business internet marketing - http://en.netlog.com/pearlwatkins/blog ]]></content>
        </comment>
        <comment id="2257cabf-59ef-463e-84bc-4fd5ad9f0d47" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T17:00:25" date-modified="2013-06-29T17:00:25" approved="false" user-name="womens shoes" user-email="seymour_conn@t-online.de" user-ip="23.19.132.32" user-url="">
          <title type="text"><![CDATA[re: Not another rant on Windows 8]]></title>
          <content type="text"><![CDATA[Pretty section of content. I just stumbled upon your weblog and in accession capital to assert that I get in fact enjoyed account your blog posts. Any way I&#39;ll be subscribing to your feeds and even I achievement you access consistently quickly.

Here is my page ::  womens shoes - http://jeffereysiler.tumblr.com/post/53348317244/start-looking-fashionable-with-these-helpful-tips ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="f38df27b-efac-49be-97ae-a2c7f756ea55" date-created="2012-02-28T20:54:41" date-modified="2012-02-29T08:06:38" approved="true" post-url="/blog/post/2012/02/28/Make-your-WP75-app-run-on-low-end-devices.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Make your WP7.5 app run on low-end devices]]></title>
      <content type="text"><![CDATA[<p>On MWC the first Windows Phone Tango devices were announced. The Nokia Lumia 610 and the ZTE Orbit are low-end devices running on only 256MB of RAM. This is made possible thanks to a new, lower end version of the Windows Phone platform. Developers need to make their applications available for either low-end or high-end devices or both. This is determined by the memory usage of the application and if it’s set in the manifest file. Since the new devices only have 256MB of ram your application can use a maximum of 90MB according to the developer guidelines. The memory consumption of your application can be tested with the marketplace test kit by right clicking on your WP7.5 project in Visual Studio 2010.</p>  <p><img style="display: block; float: none; margin-left: auto; margin-right: auto" src="http://i43.tinypic.com/izrfxf.jpg" width="618" height="292" /></p>  <p>The refresh of the WP7.1 SDK includes a second emulator running on the low end version of Windows Phone. With this developers can now test if their applications will keep running on the cheaper devices. If not, the user will get an error when trying to install your application stating that it won’t run on their low-end device. Users with a mid –or high-end device can keep using your app without any problems.</p>  <p><img style="display: block; float: none; margin-left: auto; margin-right: auto" src="http://i44.tinypic.com/2d9ptv7.jpg" /></p>  <p>This is in fact the same emulator but running on a different image. After installing the update you won’t be able to launch the emulator from the Windows start menu anymore, to fix this add either –256 or –512 to the shortcut depending on what image you want to load in the emulator.</p>  <p>With that, let’s dive into some code and figure out what we can do on the low-end device.</p>  <p>I’ve created a demo project that on launch checks for the available amount of memory using a Device Extended Property from the new SDK called ApplicationWorkingSetLimit. I’ve poured this into a method that sets a private boolean to true if it’s a low-end device</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:de873b1a-dac6-429d-9403-4fbc8c533529" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> CheckWP7Version()</li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#008000">//check if the device is low-end</span></li> <li style="background: #f3f3f3">    <span style="color:#0000ff">long</span> result = (<span style="color:#0000ff">long</span>) <span style="color:#2b91af">DeviceExtendedProperties</span>.GetValue(<span style="color:#a31515">&quot;ApplicationWorkingSetLimit&quot;</span>);</li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">if</span> (result &lt; 94371840)</li> <li>    {</li> <li style="background: #f3f3f3">        isLowEndDevice = <span style="color:#0000ff">true</span>;</li> <li>    }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">else</span></li> <li>    {</li> <li style="background: #f3f3f3">        isLowEndDevice = <span style="color:#0000ff">false</span>;</li> <li>    }</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <br />  <p>Note that the ApplicationWorkingSetLimit is a hardcoded string, so be very careful of typos. The 94371840 is the maximum amount of bytes my application can use on a low-end device.</p>  <p>Another limitation of Windows Phone Tango is that it currently does not support background agents and that includes both periodic tasks as well as resource intensive tasks. When you try to add a background agent on a low-end device you get this:</p>  <p><img style="display: block; float: none; margin-left: auto; margin-right: auto" src="http://i39.tinypic.com/2iide9g.jpg" /></p>  <p>That’s not a very clear error message is it? The inner exception doesn’t tell us much more. This will probably change once the new SDK is completely finished. So when you’re using background tasks in your application, please update your app with checks of the version. Don’t submit the update to the marketplace just yet because the current CTP version of the SDK doesn’t have a go-live license so it won’t pass marketplace certification.</p>  <p>My example is an app that will set a random count to the application’s tile if it’s pinned to the start screen. In debug mode it will do this every 30 seconds. When you install it on the 256MB version of the emulator it won’t be able to register the agent, in fact it won’t even try because I have a build-in check for low memory devices.</p>  <p>In my example I’ve used a boolean to store whether or not the device has low memory. This works because my app only has one page. In a real life application it would be better to store this into the IsolatedStorageSettings using this code.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4321094c-a20d-40b3-a6bb-185cfd3bd8e8" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> CheckWP7Version()</li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">bool</span> isLowEndDevice;</li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="color:#008000">//check if the device is low-end</span></li> <li style="background: #f3f3f3">    <span style="color:#0000ff">long</span> result = (<span style="color:#0000ff">long</span>)<span style="color:#2b91af">DeviceExtendedProperties</span>.GetValue(<span style="color:#a31515">&quot;ApplicationWorkingSetLimit&quot;</span>);</li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">if</span> (result &lt; 94371840)</li> <li>    {</li> <li style="background: #f3f3f3">        isLowEndDevice = <span style="color:#0000ff">true</span>;</li> <li>    }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">else</span></li> <li>    {</li> <li style="background: #f3f3f3">        isLowEndDevice = <span style="color:#0000ff">false</span>;</li> <li>    }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="color:#0000ff">if</span> (<span style="color:#2b91af">IsolatedStorageSettings</span>.ApplicationSettings.Contains(<span style="color:#a31515">&quot;IsLowEndDevice&quot;</span>))</li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#2b91af">IsolatedStorageSettings</span>.ApplicationSettings[<span style="color:#a31515">&quot;IsLowEndDevice&quot;</span>] = isLowEndDevice;</li> <li style="background: #f3f3f3">    }</li> <li>    <span style="color:#0000ff">else</span></li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#2b91af">IsolatedStorageSettings</span>.ApplicationSettings.Add(<span style="color:#a31515">&quot;IsLowEndDevice&quot;</span>, isLowEndDevice);</li> <li style="background: #f3f3f3">    }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>And load the value anywhere in your application again like this</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c607b1e5-a2a2-4eb9-9575-1e6c4b4a3a2b" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">var</span> isLowEndDevice = <span style="color:#2b91af">IsolatedStorageSettings</span>.ApplicationSettings[<span style="color:#a31515">&quot;IsLowEndDevice&quot;</span>];</li> </ol> </div> </div> </div>  <p>If for some reason your application can’t run on low-end devices you can block those devices from downloading it. To do this you need to add some lines to the application’s manifest file, right below the capabilities.</p>  <p>   <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:af74d60b-b526-4103-9786-b4e7e6a46c68" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Requirements</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">  <span style="color:#0000ff">&lt;</span><span style="color:#a31515">Requirement</span><span style="color:#0000ff"> </span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=</span>&quot;<span style="color:#0000ff">ID_REQ_MEMORY_90</span>&quot;<span style="color:#0000ff"> /&gt;</span></li> <li><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">Requirements</span><span style="color:#0000ff">&gt;</span></li> </ol> </div> </div> </div> </p>  <p>With this in place the low-end devices will get a message stating that their device is not suited to run your application.</p>  <p>I hope I gave you a good overview about what to expect with the new low-end devices and that you can adjust your applications to support these devices. Don’t be too worried about the memory limitations on the new devices, Microsoft scanned all available applications and found only 5 that utilise too much memory, they’ve contacted the developers and are working together with them to overcome these problems.</p>  <p>The solution of my example can be found <a href="https://skydrive.live.com/#cid=5A345BB15E973473&amp;id=5A345BB15E973473%21250" target="_blank">here(SkyDrive link).</a></p>]]></content>
      <post-name type="text"><![CDATA[Make your WP7.5 app run on low-end devices]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
      </categories>
      <comments>
        <comment id="a4ab7289-eaae-42a4-afaf-add026f69748" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T23:49:10" date-modified="2013-07-02T23:49:10" approved="false" user-name="procera review" user-email="haisellars@web.de" user-ip="69.175.58.61" user-url="">
          <title type="text"><![CDATA[re: Make your WP7.5 app run on low-end devices]]></title>
          <content type="text"><![CDATA[So in place of strolling at a constant pace for say an hour, you&#39;d probably transform items up by alternating brief bursts of extreme walking for say a minute followed by a recovery time period with slower strolling immediately after every extreme time period. Just continue to keep alternating for twenty minutes to start and add time when you turn into a lot more match. You are able to use interval education with all phases with the procera avh - http://proceramemoryavh.blogspot.com/   to enhance your effects.

Also if you do any type of exercise it really is strongly recommended you drink plenty of water just before all through and right after to keep your body correctly hydrated.]]></content>
        </comment>
        <comment id="f5c561f2-ffbd-4746-901e-88afcb7c5ccc" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T00:12:27" date-modified="2013-07-03T00:12:27" approved="false" user-name="procera side effects" user-email="rebbeca-kimbrough@zoho.com" user-ip="173.213.108.106" user-url="">
          <title type="text"><![CDATA[re: Make your WP7.5 app run on low-end devices]]></title>
          <content type="text"><![CDATA[So as an alternative to walking at a constant tempo for say an hour, you&#39;d probably change issues up by alternating short bursts of extreme walking for say a minute followed by a recovery time period with slower strolling after each intense period. Just continue to keep alternating for twenty minutes to start and add time as you develop into more fit. You may use interval coaching with all phases of your  procera avh - http://proceramemoryguide.blogspot.com/   to boost your success.

Also whenever you do any form of exercise it is strongly encouraged you drink plenty of water just before all through and just after to keep your body thoroughly hydrated.]]></content>
        </comment>
        <comment id="8dc2be56-2c26-4931-ba49-936e4401bace" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T00:26:38" date-modified="2013-07-03T00:26:38" approved="false" user-name="improve memory supplement" user-email="rick-chan@gmail.com" user-ip="173.0.50.50" user-url="">
          <title type="text"><![CDATA[re: Make your WP7.5 app run on low-end devices]]></title>
          <content type="text"><![CDATA[So in place of strolling at a constant pace for say an hour, you&#39;d adjust issues up by alternating quick bursts of intense walking for say a minute followed by a recovery period with slower strolling right after each extreme period. Just retain alternating for twenty minutes to start out and include time when you grow to be more fit. You&#39;ll be able to use interval teaching with all phases with the procera avh - http://proceraavhmemoryguide.blogspot.com/   to enhance your final results.

Also any time you do any kind of workout it can be strongly encouraged which you drink tons of water ahead of through and following to maintain your whole body adequately hydrated.]]></content>
        </comment>
        <comment id="5431c2ae-d262-4085-8d3b-6b89babf1288" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T00:27:56" date-modified="2013-07-03T00:27:56" approved="false" user-name="procera avh gnc" user-email="eva_fife@gmail.com" user-ip="173.0.50.50" user-url="">
          <title type="text"><![CDATA[re: Make your WP7.5 app run on low-end devices]]></title>
          <content type="text"><![CDATA[So in lieu of strolling at a constant pace for say an hour, you&#39;d transform items up by alternating brief bursts of extreme walking for say a minute followed by a recovery time period with slower walking right after each and every extreme time period. Just hold alternating for twenty minutes to start and add time as you become much more match. You are able to use interval training with all phases in the procera avh - http://proceraavhmemoryreview.blogspot.com/   to enhance your results.

Also after you do any kind of workout it really is strongly encouraged that you just drink lots of water ahead of through and following to maintain your system properly hydrated.]]></content>
        </comment>
        <comment id="8a4d231c-d8a4-44bc-b47d-f7475d60a9f7" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T12:04:00" date-modified="2013-07-03T12:04:00" approved="false" user-name="procera avh" user-email="maxwellford@gmail.com" user-ip="50.115.175.254" user-url="">
          <title type="text"><![CDATA[re: Make your WP7.5 app run on low-end devices]]></title>
          <content type="text"><![CDATA[So in place of strolling at a continuous tempo for say an hour, you&#39;d modify factors up by alternating short bursts of intense strolling for say a minute followed by a recovery time period with slower walking immediately after every extreme period. Just preserve alternating for 20 minutes to begin and add time while you grow to be much more fit. You may use interval teaching with all phases of your  procera avh - http://proceraavhmemoryguide.blogspot.com/   to enhance your benefits.

Also if you do any type of training it&#39;s strongly recommended which you drink plenty of water in advance of in the course of and just after to help keep your body appropriately hydrated.]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="701fc004-d271-45c1-b634-793c66ac6099" date-created="2012-02-23T07:47:35" date-modified="2012-02-23T07:47:44" approved="true" post-url="/blog/post/2012/02/23/BlockAddiction-V20-online-now.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[BlockAddiction V2.0 online now]]></title>
      <content type="text"><![CDATA[<p>Version 2.0 of BlockAddiction has passed marketplace certification and is available for download now. The biggest change is the all new Time Attack mode where you have to survive for 60 seconds and score as high as possible. Game Over means no score.</p>  <p>BlockAddiction has reached well over 400 downloads and is available on Windows Phone marketplace (<a href="http://www.windowsphone.com/nl-BE/apps/7c1427fc-c472-4a8a-abf8-433c823e1636" target="_blank">Link</a>).</p>  <p>I was thinking about an About page and advertising but I figured ads could ruin the experience and I completely forgot about the About page. <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_6.png" /> I might add it in the future but for now my focus shifted to some other projects.</p>  <p>If you’ve got ideas, bug reports or some other feedback, leave a comment, contact me via Twitter or send me a mail!</p>]]></content>
      <post-name type="text"><![CDATA[BlockAddiction V2.0 online now]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
      </categories>
    </post>
    <post id="780cb4e6-b6ee-47c6-895d-56d5fe75eb23" date-created="2012-02-10T15:57:23" date-modified="2012-02-10T21:02:17" approved="true" post-url="/blog/post/2012/02/10/Windows-8-the-road-so-far.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Windows 8–the road so far]]></title>
      <content type="text"><![CDATA[<p>So it’s official, the Windows 8 beta, nicknamed Consumer Preview, will hit the worldwide web on February 29th. Time to list what we know so far.</p>  <p><strong><u>For consumers:</u></strong></p>  <ul>   <li>the classic start menu has been replaced by a Metro interface, still unsure if there will be an option to bring back the classic menu </li>    <li>the windows desktop has now been extracted from the kernel and is just an app </li>    <li>Windows 8 utilizes much less resources then Windows 7, allowing it to run smoothly on weaker hardware </li>    <li>boot time is impressive, it takes mere seconds to launch. The cause is the fact that Windows 8 doesn’t shutdown completely, it’s kernel goes into hibernation. When you do a hard reset of the device you’ll notice that booting takes more time but it’s still noticeably faster than Win 7 </li>    <li>Windows 8 will have two types of applications, the classic ones like we know them on Win 7 and Metro style applications. These Metro apps run completely full screen, no chrome like titlebars or borders </li>    <li>Metro apps run either full screen or snapped, running side by side with another app (even desktop apps) </li>    <li>Windows 8 comes with it’s very own Marketplace. Here you can download all kinds of Metro style applications </li>    <li>the ribbon that has been in Office since version 2007 now makes it’s way into the Windows explorer but it will be collapsed by default </li>    <li>Pinball and solitaire are installed games by default. Available in the store at launch will be:      <ul>       <li>Hydro Thunder </li>        <li>Toy Soldiers </li>        <li>Reckless Racing </li>        <li>Angry Birds </li>        <li>Ilomilo </li>        <li>Rocket Riot </li>        <li>Full House Poker </li>        <li>Tentacles </li>        <li>Crash Course </li>        <li>Ms Splosion Man </li>        <li>Wordament </li>     </ul>   </li>    <li>Following apps will be included in the Consumer Preview      <ul>       <li>Camera </li>        <li>Messaging </li>        <li>Mail </li>        <li>Calendar </li>        <li>SkyDrive </li>        <li>People </li>        <li>Photos </li>        <li>Video </li>        <li>Music </li>     </ul>   </li>    <li>Win 8 will be available on x86/x64 cpu’s and for the first time on ARM, mostly used in tablets </li>    <li>ARM versions of Windows will have both desktop and metro interface and comes with Office 15, a new Office version </li>    <li>Your profile (settings, wallpaper, …) will be synched to skydrive so that every time you buy a new Win 8 pc you don’t need to set everything manually </li>    <li>Refresh and Reset options, a refresh will keep all files and folders but will put Windows back in a fresh installed state, removing all installed applications and settings while a reset will do the same but also deletes all files and folders for all profiles </li>    <li>native USB 3.0 support </li>    <li>Windows 8 can mount and browse ISO and VHD files </li>    <li>UEFI Safe boot to prevent boot sector virusses </li>    <li>full backwards compatibility </li> </ul>  <p align="center"><img src="http://www.computerworld.com/common/images/site/features/2011/09/Windows8/Metro.jpg" width="472" height="354" /></p>  <p><strong><u>For Developers:</u></strong></p>  <ul>   <li>anyone with XAML experience will be able to build Metro apps </li>    <li>Metro style takes a lot of the concepts of Windows Phone 7 and Silverlight </li>    <li>Instead of using the dreadful Win32 API developers can now use WinRT which provides a much cleaner way to interact with the OS </li>    <li>Metro apps are NOT .net code </li>    <li>.net 4.5 is included in Win 8 </li>    <li>Metro apps in C#/VB/C++ + XAML or Javascript + HTML </li> </ul>  <p align="center"><img src="http://photos4.meetupstatic.com/photos/event/6/f/a/6/event_56788582.jpeg" width="485" height="271" /></p>  <p align="left">&#160;</p>  <p align="left">Windows 8 will be pretty different compared to win 7. The developer preview has been out since September and I’ve been using it on a Iconia Tab W500 tablet since December. At the time I started using it I also had an iPad 2 but there’s just something special about a full blown OS on a tablet device, especially when running Win 8. I like the OS so far. The developer preview has lots of bugs, obviously, so I’m very curious about the performance and stability of the Consumer preview. Due to the stability problems I haven’t spend much time developing metro apps, this will change with the consumer preview. I’ll probably start by converting my WP7 apps to Win 8. More about that when I get to it.</p>]]></content>
      <post-name type="text"><![CDATA[Windows 8–the road so far]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
        <category ref="b9997019-6c8a-474c-a47c-6a1d34db9d4e" />
        <category ref="f2189a5d-1690-4ab5-bc02-2ad5cf6a04f8" />
      </categories>
    </post>
    <post id="c576ebdd-e013-4db0-9e4a-29a1bd195086" date-created="2012-02-02T22:18:11" date-modified="2012-02-02T22:18:13" approved="true" post-url="/blog/post/2012/02/02/Windows-Phone-8-first-official-details!.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Windows Phone 8, first official details!]]></title>
      <content type="text"><![CDATA[<p>A video of Joe Belfiore detailing Windows Phone 8, codename “Apollo”, to Nokia has been leaked. The video has a bunch of rumors that are confirmed and some new features that will find their way into Microsoft’s next mobile OS.</p>  <p>The new features are:</p>  <ul>   <li><strong>Data Smart: </strong>your phone being smart about what network to use, this includes support for carrier wireless networks. </li>    <li><strong>App-to-App communication. </strong>WP apps are sandboxed, in WP8 apps will be able to communicate with each other on a lower level then deeplinking by utilizing some sort of contracts.</li>    <li><strong>Internet Explorer 10 Mobile. </strong>next gen mobile browser, based on the IE10 desktop kernel</li>    <li><strong>Shared components with Windows 8.</strong> The kernel, multi-core processor support, sensor fusion, security model, network, and video and graphics technologies are all coming from Windows 8.</li>    <li><strong>Companion experiences with Windows 8. </strong>the xbox companion app will be integrated into the system. Skydrive will have a deeper integration. All this will give the possibility to share content across phone, pc, console, … Also Zune will make place for some sort of new ActiveSync client, ow yeah! As much as I like Zune, activesync is just better.</li>    <li><strong>Skype app. </strong>Still a separate but better app and not integrated into OS.</li>    <li><strong>NFC and Wallet. </strong>Google wallet but coming from Microsoft, so obviously the same but better <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_5.png" /> Up to the carriers if they’ll support it. It will work both from build-in NFC chips or by special sim cards that have an on-board NFC chip</li>    <li><strong>Local Scout. </strong>Now with personal recommendations and support for carrier hotspots.</li>    <li><strong>Camera improvements.</strong> more powerful experience and some sort of “lens” app, we’ll have to wait and see what this means.</li>    <li><strong>Business features.</strong> WP8 is targeting the&#160; business again with features such as complete bitlocker encryption, secure boot check, system center integration, Exchange activesync policies and inventory possibilities. And, and this one’s kinda big,<strong> private appstores for businesses!</strong> That’s right, your in-house, employee only apps can be hosted on a private store.</li>    <li><strong>For Developers</strong>: the CE kernel is boosted out in favor of the Windows 8 kernel, WP7 apps will be fully backwards compatible. With the new kernel comes support for native code, C++ developers rejoice! This makes porting ios and android apps easier and will make certain very popular apps finally come to our beloved platform.</li>    <li><strong>Hardware</strong>: 4 resolutions, swappable SD card support, multicore CPU, NFC. </li> </ul>  <p>In my opinion, if Microsoft can deliver these features WP8 will be HUGE! This makes the Windows Phone platform on par with the competition and on some levels it exceeds them. Big kudos to Microsoft for making this happen in about 2 years, both Apple and Google have spent over 5 years to get to these kinds of functionality. Only two things remain in the dark, will our current devices get an upgrade? And will they pull this off? WP8 is rumored to roll out in the 4th quarter of 2012.</p>  <p>And remember Joe Belfiore, nothing remains hidden on the internet.</p>  <p align="center"><img src="http://movilzone.org/files/2011/10/Windows-Phone-Apollo-Logo.png" width="248" height="149" /></p>]]></content>
      <post-name type="text"><![CDATA[Windows Phone 8, first official details!]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="082ce3b8-a93b-4b6e-8fa1-f61f265a807e" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
      </categories>
      <comments>
        <comment id="6750c674-c85b-4d1c-956c-7b3a76faf28e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-03-31T01:09:40" date-modified="2013-03-31T01:09:40" approved="true" user-name="antony1971" user-email="lngoodman9769@gmx.com" user-ip="192.157.253.4" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8, first official details!]]></title>
          <content type="text"><![CDATA[Yes]]></content>
        </comment>
        <comment id="e9a08336-1302-49d1-8708-d46d851ebe2d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-03T06:57:31" date-modified="2013-07-03T06:57:31" approved="false" user-name="streetdirectory" user-email="lula-vinson@gmx.net" user-ip="199.180.128.159" user-url="">
          <title type="text"><![CDATA[re: Windows Phone 8, first official details!]]></title>
          <content type="text"><![CDATA[Can I simply say what a comfort to uncover somebody who actually understands what they&#39;re discussing on the net. You certainly realize how to bring an issue to light and make it important. More and more people have to check this out and understand this side of the story. I was surprised that you aren&#39;t more popular because you certainly possess the gift. streetdirectory - http://www.streetdirectory.com/businessfinder/company/8846/Cheese_Cake/ ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="becca640-a6de-4b09-a62c-0009999e6d0c" date-created="2012-02-02T08:27:37" date-modified="2012-02-02T17:51:19" approved="true" post-url="/blog/post/2012/02/02/Techdays-Belgium-2012.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Techdays Belgium 2012]]></title>
      <content type="text"><![CDATA[<p>So Techdays is right around the corner and I’ll be attending for the third time.I’ll be attending all kinds of sessions going from Windows 8 development to the complete deep dive track on web to my favorite subject, Windows Phone 7 development. I’m also excited about the Scott “The Gu” Guthrie doing the opening keynote and doing a session the second day. Also presenting this year is Laurent Bugnion, the father of the awesome MVVM Light framework.</p>  <p><a href="https://skydrive.live.com/redir.aspx?cid=5a345bb15e973473&amp;resid=5A345BB15E973473!471&amp;parid=5A345BB15E973473!250" target="_blank">Here</a>’s the list of sessions I’ll be attending, this list is subject to change depending on if I change my mind the last minute, as I’m known to do sometimes <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_4.png" />.</p>  <p><strong><u>Tuesday February 14th</u></strong></p>  <ul>   <li>Opening keynote with Scott Guthrie </li>    <li>Welcome to the Metro Application Platform </li>    <li>Windows Phone Fast App Switching, Tombstoning and Multitasking </li>    <li>The Future of C# and Visual Basic </li>    <li>Devices + Cloud: Using Azure on iOS, Android, Windows Phone, … </li> </ul>  <p><strong><u>Wednesday February 15th</u></strong></p>  <ul>   <li>ScottGu unplugged </li>    <li>Take a ride on the Metro </li>    <li>The zen of async: Best practices for best performance </li>    <li>MVVM Applied: From Silverlight to Windows Phone to Windows 8 </li>    <li>MVVM &amp; WCF RIA Services: an architectural story </li>    <li>Building a data intensive application </li> </ul>  <p><strong><u>Thursday February 16th</u></strong></p>  <blockquote>   <p>This is a deep dive day, I’ll be following the web track that focuses on what’s new in ASP.net 4.5 and Visual Studio 11</p> </blockquote>  <p>&#160;</p>  <p align="center"><img src="http://www.microsoft.com/belux/techdays/2012/images/techdayslogo.png" /></p>]]></content>
      <post-name type="text"><![CDATA[Techdays Belgium 2012]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="f016512c-1ad9-4a28-ab23-13e5ef3086b7" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
      </categories>
    </post>
    <post id="895a3395-0049-406a-b878-39161f7078b5" date-created="2012-01-27T11:31:27" date-modified="2013-04-04T13:47:17" approved="true" post-url="/blog/post/2012/01/27/BlockAddiction-My-WP7-XNA-game.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[BlockAddiction: My WP7 XNA game]]></title>
      <content type="text"><![CDATA[<p>On 8 January my very first game was published to the Windows Phone marketplace. It’s a very simple game called BlockAddiction, the purpose is to keep stacking the blocks on top of each other while they keep speeding up. Now, 19 days later I’ve reached over 250 downloads with this. It may not seem like a lot but I’m pretty pleased with the result <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_3.png" /></p>  <p>Right now, I’m working on version 2.0 and it will include a new game mode and some changes:</p>  <ul>   <li>Time Attack mode: stack as many blocks as possible within 60 seconds without dying (player has 3 lives) </li>    <li>About page </li>    <li>Maybe some ads but only on the menus, I want the game experience to remain the same and completely ad-free </li> </ul>  <p>Time Attack mode is almost complete, just have to develop the difference between time up and game over. Then I need to find out how to add an about page to an XNA game, but more about that later.</p>  <p>For those who want to try out the current version of BlockAddiction, search for it on the marketplace or click <a href="http://windowsphone.com/s?appid=7c1427fc-c472-4a8a-abf8-433c823e1636" target="_blank">here</a>!</p>]]></content>
      <post-name type="text"><![CDATA[BlockAddiction: My WP7 XNA game]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
      </categories>
    </post>
    <post id="41379d40-ac35-4b9a-b6f5-b46ca526af53" date-created="2012-01-25T11:01:04" date-modified="2012-01-25T22:44:59" approved="true" post-url="/blog/post/2012/01/25/Overview-of-WP7-devices.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Overview of WP7 devices]]></title>
      <content type="text"><![CDATA[<p>I’ve created an overview of all currently known Windows Phone devices. I’ll try to keep this as up-to-date as possible but don’t shoot me if it takes some time to add new devices to the list <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_2.png" />.</p>  <p>Every device is linked to a site with all specifications. You can find the page by clicking the link on the right or by clicking <a href="http://www.spikie.be/blog/page/Windows-Phone-Devices.aspx">here</a>.</p>  <p align="center"><img src="http://www.ozymandias.com/wp-content/uploads/2010/04/ILoveWindowsPhoneWallpaper_thumb.png" width="324" height="183" /></p>  <p>For those that are too lazy to check the page, I’ll paste the list here:</p>  <table border="1"><tbody>     <tr>       <th>Name</th>        <th>Release Date</th>        <th>CPU speed</th>        <th>Memory</th>        <th>Display</th>        <th>Notes</th>     </tr>      <tr>       <td><a href="http://www.icecat.biz/EN/p/acer/xph90en003/smartphones-allegro-black-11164616.html" target="_blank">Acer Allegro</a></td>        <td style="text-align: center">November 2011</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB</td>        <td style="text-align: center">3.6&quot; LCD</td>        <td>No flash</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/EN/p/dell/vpro-4650/smartphones-5397063024650-venue-pro-10508768.html" target="_blank">Dell Venue Pro</a></td>        <td style="text-align: center">November 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB/16GB</td>        <td style="text-align: center">4.1&quot; AMOLED</td>        <td>Portrait keyboard</td>     </tr>      <tr>       <td><a href="http://wmpoweruser.com/fujitsu-is12t-full-specs/" target="_blank">Fujitsu Toshiba IS12T</a></td>        <td style="text-align: center">September 2011</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">32GB</td>        <td style="text-align: center">3.7&quot; LCD</td>        <td>13.2MP camera and waterproof</td>     </tr>      <tr>       <td><a href="http://www.htc.com/www/smartphones/htc-7-pro/#specs" target="_blank">HTC Pro 7</a></td>        <td style="text-align: center">January 2011</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB/16GB</td>        <td style="text-align: center">3.6&quot; LCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.htc.com/www/smartphones/htc-7-surround/#specs" target="_blank">HTC Surround</a></td>        <td style="text-align: center">November 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">3.8&quot; LCD</td>        <td>slide out speaker</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/p/htc/99hkm022-00/smartphones-4710937344455-7-trophy-6072822.html" target="_blank">HTC Trophy</a></td>        <td style="text-align: center">October 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB/16GB</td>        <td style="text-align: center">3.8&quot; SLCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.htc.com/www/smartphones/htc-7-mozart/#specs" target="_blank">HTC Mozart</a></td>        <td style="text-align: center">October 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB/16GB</td>        <td style="text-align: center">3.7&quot; SLCD</td>        <td>Xenon flash</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/p/htc/99hly009-00/smartphones-4710937343465-hd7-6830224.html" target="_blank">HTC HD7</a></td>        <td style="text-align: center">October 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB/16GB</td>        <td style="text-align: center">4.3&quot; SLCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/p/htc/99hnv019-00/smartphones-4710937362862-titan-11145877.html" target="_blank">HTC Titan</a></td>        <td style="text-align: center">October 2011</td>        <td style="text-align: center">1.5GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">4.7&quot; SLCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.dreambloggers.com/lte-capable-htc-windows-phone-device-htc-titan-ii-ces-2012/" target="_blank">HTC Titan II</a></td>        <td style="text-align: center">March 2012</td>        <td style="text-align: center">1.5GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">4.7&quot; SLCD</td>        <td>16MP camera, 4G LTE</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/p/htc/99hpf021-00/smartphones-4710937363715-radar-10802573.html" target="_blank">HTC Radar</a></td>        <td style="text-align: center">October 2011</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB</td>        <td style="text-align: center">3.8&quot; SLCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/EN/p/lg/e900aespbk/smartphones-8808992037767-e900-optimus-7-6393057.html" target="_blank">LG Optimus 7</a></td>        <td style="text-align: center">October 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">3.8&quot; LCD</td>        <td>DLNA support</td>     </tr>      <tr>       <td><a href="http://www.phonearena.com/phones/LG-Quantum_id4854/fullspecs" target="_blank">LG Quantum</a></td>        <td style="text-align: center">October 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">3.5&quot; LCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/EN/p/nokia/002z866/smartphones-6438158422537-lumia-710-12074061.html" target="_blank">Nokia Lumia 710</a></td>        <td style="text-align: center">November 2011</td>        <td style="text-align: center">1.4 GHz</td>        <td style="text-align: center">8GB</td>        <td style="text-align: center">3.7&quot; LCD</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/EN/p/nokia/002z4w9/smartphones-lumia-800-11814183.html" target="_blank">Nokia Lumia 800</a></td>        <td style="text-align: center">November 2011</td>        <td style="text-align: center">1.4 GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">3.7&quot; ClearBlack AMOLED</td>        <td>N9 design</td>     </tr>      <tr>       <td><a href="http://www.nokia.com/us-en/products/phone/lumia900/" target="_blank">Nokia Lumia 900</a></td>        <td style="text-align: center">March 2012</td>        <td style="text-align: center">1.4 GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">4.3&quot; ClearBlack AMOLED</td>        <td>4G LTE</td>     </tr>      <tr>       <td><a href="http://www.samsung.com/us/mobile/cell-phones/SGH-I917ZKAATT" target="_blank">Samsung Focus</a></td>        <td style="text-align: center">November 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB</td>        <td style="text-align: center">4&quot; Super AMOLED</td>        <td>microSD support</td>     </tr>      <tr>       <td><a href="http://www.samsung.com/us/mobile/cell-phones/SGH-I937OKAATT" target="_blank">Samsung Focus S</a></td>        <td style="text-align: center">November 2011</td>        <td style="text-align: center">1.4 GHz</td>        <td style="text-align: center">16GB</td>        <td style="text-align: center">4.3&quot; Super AMOLED</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://www.icecat.biz/p/samsung/gt-i8700ykb/smartphones-8806071185248-i8700-omnia-7-7580631.html" target="_blank">Samsung Omnia 7</a></td>        <td style="text-align: center">October 2010</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">8GB/16GB</td>        <td style="text-align: center">4&quot; Super AMOLED</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://wmpoweruser.com/samsung-omnia-w-detailed-specs/" target="_blank">Samsung Omnia W</a></td>        <td style="text-align: center">November 2011</td>        <td style="text-align: center">1.4 GHz</td>        <td style="text-align: center">8GB</td>        <td style="text-align: center">3.7&quot; Super AMOLED</td>        <td>&#160;</td>     </tr>      <tr>       <td><a href="http://wmpoweruser.com/tania-ztes-first-windows-phone-device-revealed/" target="_blank">ZTE Tania</a></td>        <td style="text-align: center">December 2011</td>        <td style="text-align: center">1 GHz</td>        <td style="text-align: center">4GB</td>        <td style="text-align: center">4.3&quot; LCD</td>        <td>&#160;</td>     </tr>   </tbody></table>]]></content>
      <post-name type="text"><![CDATA[Overview of WP7 devices]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="4a94883b-c6b8-4030-85a1-dcd11467c5d3" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
      </categories>
    </post>
    <post id="c2c1fb29-4050-416b-a986-de2b9d4adc63" date-created="2012-01-24T13:07:42" date-modified="2013-05-29T00:24:14" approved="true" post-url="/blog/post/2012/01/24/Nokia-Lumia-800-launch-party.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Nokia Lumia 800 launch party]]></title>
      <content type="text"><![CDATA[<p>Last friday Nokia Belgium officially showed the Lumia 800 to the crowd in Belgium. 1300 people signed up for the event, 100 received an invitation. I was one of the lucky few that was there.</p>  <p>The party started at 6PM in the Event Lounge in Brussels. The lounge was nicely decorated with balloons, banners and promo girls from Nokia. Microsoft had some xbox360 systems available with Kinect for some fun and entertainment (Fruit Ninja Kinect is a blast!). Immediately at the entrance there was a possibility to try the Lumia 800 in all its different colors. After about an hour of fun and networking it was time to start the presentations.</p>  <p align="center"><img src="https://pwn7gq.blu.livefilestore.com/y1moin3v7r_v3BIQmv0CrWAIKdeL41vmKV0u2jVDNcDzr6foF9SJRpTJcul8pLqoiSdCkbFk-lspRrqKHUw08BNMsKwI_4qpZSFagb4MvlTMZ0/WP_000141.jpg?psid=1" width="180" height="240" /></p>  <p>The first speaker was Jurgen Thysmans, Communications Manager at Nokia Belgium. He told the audience that the Lumia 800 will be available on the 1st of February for about 499 euros. The Lumia 710 will be available on the 1st of March exclusively at Proximus, a Belgian provider. No price was given for the 710.</p>  <p>After Jurgen a reviewer from ZDnet took over, he wrote a review on the Lumia 800 and had some negative points about the device. Afterwards it became clear that he wrote a review based on a prototype with pre-release hard and software. Where I come from we call that a Preview but hey, what’s in a word… His mock-up of the Microkia logo was pretty funny but that’s about all I remember about his talk.</p>  <p align="center"><img src="https://pwn7gq.blu.livefilestore.com/y1mAg9AHWusf4HaxO0yK4R50k-030BMJVOTyVxf8_JmklBI1MiVIpwVGHc336JOg46PvkVFIxVTr3wwNQA5OPC2ErLQ2NntUjb_Jfhp4S5dn6E/WP_000145.jpg?psid=1" width="240" height="180" /></p>  <p>Closing the presentation was Jeroen Van Hees, he’s a Portfolio Manager at Microsoft Belgium. He gave us a live demo on his personal Lumia 800 device, whooing a lot of the guests with the snappyness of WP7 and the awesome design of the Lumia. The reactions were amazing, both in the room and on Twitter (hashtag #lumiabxl).</p>  <p>After the presentation, a young lady from Nokia did some challenges like Ben the pc guy did on CES. She challenged the attendees to put their non-WP7 smartphone against the Lumia, if they could beat her they’d receive a Nokia Play 360 wireless speaker. She smoked them all. Off course, the challenges were made to compliment the features of WP7, like taking pictures from the lockscreen, posting messages on Twitter, Facebook and LinkedIn at the same time.</p>  <p>After the presentations it was time for food and drinks, did some more networking, met some really cool guys. It was a very fun and entertaining evening, and I got a Nokia Play 360 because I smoked the girl with the Lumia using my own Lumia 800 <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile_1.png" /></p>  <p align="center"><img src="https://pwn7gq.blu.livefilestore.com/y1msY2J8c21DRMYtHHm-yGJ-Eg3oXoSfUuJ_aXBNah_mIOFaCvjq-OShKnxeESoXLP34WzSI8AjVxIKoifsmelfFmjpax8pOvHgi3RcmrZduz4/WP_000149.jpg?psid=1" width="240" height="180" /></p>  <p>Thank you Microsoft and Nokia for an awesome event and see you hopefully at the Lumia 900 launch event!</p>  <p>For all the pictures, check out my <a href="https://skydrive.live.com/redir.aspx?cid=5a345bb15e973473&amp;resid=5A345BB15E973473!500&amp;parid=5A345BB15E973473!170&amp;authkey=!ADKYaBfJVczZ8uY" target="_blank">SkyDrive</a>.    <br />All pictures are taken with my Lumia 800.</p>]]></content>
      <post-name type="text"><![CDATA[Nokia Lumia 800 launch party]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
      </categories>
      <comments>
        <comment id="b4ef2f55-f03c-4b44-b6fe-c4e29b46698b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-17T14:08:30" date-modified="2013-06-17T14:08:30" approved="false" user-name="play blackjack online for money mac" user-email="kathaleen_willoughby@bigstring.com" user-ip="5.19.255.238" user-url="">
          <title type="text"><![CDATA[re: Nokia Lumia 800 launch party]]></title>
          <content type="text"><![CDATA[Heya i&#39;m for the first time here. I found this board and I find It really useful &amp; it helped me out much. I hope to give something back and aid others like you aided me.

my webpage ...  play blackjack online for money mac - http://efektywnie.com/index.php/Slot_Device_Gambling_Associated_Posts ]]></content>
        </comment>
        <comment id="fa482b14-0be8-4561-a94f-383a5ff1d515" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-18T23:58:05" date-modified="2013-06-18T23:58:05" approved="false" user-name="pictures of ankle bracelet tattoos" user-email="helenamosley@arcor.de" user-ip="199.180.119.230" user-url="">
          <title type="text"><![CDATA[re: Nokia Lumia 800 launch party]]></title>
          <content type="text"><![CDATA[Cool blog! Is your theme custom made or did you download it from somewhere? A theme like yours with a few simple tweeks would really make my blog shine. Please let me know where you got your design. Cheers

Here is my blog ::  pictures of ankle bracelet tattoos - http://www.go4food.com/IsmaelMcki ]]></content>
        </comment>
        <comment id="029b56a1-d8b6-4427-aa31-431003a3624d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T06:34:29" date-modified="2013-07-02T06:34:29" approved="false" user-name="slot machine prior" user-email="brookehitchcock@vegemail.com" user-ip="151.237.191.249" user-url="">
          <title type="text"><![CDATA[re: Nokia Lumia 800 launch party]]></title>
          <content type="text"><![CDATA[Excellent pieces. Keep posting such kind of information on your site. Im really impressed by it.
Hey there,  You have done a fantastic job. I&#39;ll definitely digg it and in my opinion recommend to my friends. I am confident they will be benefited from this web site.

my homepage ::  slot machine prior - http://www.maydaymaddie.net/guestbook/ ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="bba0e255-392a-48a4-99e9-71b5e5e7a63d" date-created="2011-12-21T18:51:29" date-modified="2011-12-21T18:52:19" approved="true" post-url="/blog/post/2011/12/21/FollowMyFeed-app-submission-the-result.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[FollowMyFeed app submission: the result]]></title>
      <content type="text"><![CDATA[<p>Yesterday, a few days after I submitted my app that was generated by FollowMyFeed (see previous blog post) I got the result. The app passed certification and is now available on the marketplace. Hooray!</p>  <p>But there’s one thing that’s kind off weird. The marketplace certification rules clearly say that every app should launch and be ready to use in under 5 seconds. The generated app takes 7-8 seconds on my Omnia 7. I can think of two reasons why the app still passed certification.</p>  <ul>   <li>The test team only used second generation devices and they boot up the apps faster</li>    <li>They don’t care since FollowMyFeed is a Microsoft product and it would be bad for them if they shot down apps generated by their own software.</li> </ul>  <p>Anyhow, now you can have an app to read my blog and follow my Twitter feed. Get the app <a href="http://windowsphone.com/s?appid=a656f406-a1e7-4ac2-8624-dbc26747db5aparid=5A345BB15E973473!250" target="_blank">here</a></p>]]></content>
      <post-name type="text"><![CDATA[FollowMyFeed app submission: the result]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
      <comments>
        <comment id="4de229aa-8c9e-4b32-b704-13590d701dd6" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-24T12:56:15" date-modified="2013-06-24T12:56:15" approved="false" user-name="Nike Free Run" user-email="ricardovillarreal@web.de" user-ip="208.89.208.75" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Hello, i think that i saw you visited my website thus i came to “return the favor”.I am trying to find things to improve my site!I suppose its ok to use a few of your ideas!!

Here is my webpage;  Nike Free Run - http://ngosummit.com/nike-free-run.html ]]></content>
        </comment>
        <comment id="515bffd4-4157-40f4-ae20-da7ee79dd9be" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T12:26:52" date-modified="2013-06-25T12:26:52" approved="false" user-name="Tory Burch Handbags" user-email="darlagunderson@gmail.com" user-ip="173.0.51.100" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[It&#39;s very simple to find out any matter on net as compared to books, as I found this piece of writing at this web page.

Here is my weblog;  Tory Burch Handbags - http://ngosummit.com/tory-burch-outlet.html ]]></content>
        </comment>
        <comment id="8d3f2801-e224-4e44-b81c-5019475db9fd" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T13:04:43" date-modified="2013-06-25T13:04:43" approved="false" user-name="click the following document" user-email="virginia.kimble@web.de" user-ip="96.127.147.43" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[I was suggested this website through my cousin. I am no longer sure whether this put up is written via him as nobody else realize such precise approximately my difficulty. You are amazing! Thanks!

My weblog: Nike Free * click the following document - http://ngosummit.com/nike-free-run.html *]]></content>
        </comment>
        <comment id="99ca7bf8-3540-4fec-9baf-e79508bd8e7e" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T00:20:07" date-modified="2013-06-26T00:20:07" approved="false" user-name="Louis Vuitton Pas Cher" user-email="earlnorfleet@gmail.com" user-ip="96.127.179.3" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Hello just wanted to give you a brief heads up and let you know a few of the pictures aren&#39;t loading properly. I&#39;m not sure why but I think its a linking issue. I&#39;ve tried it in two different browsers and both show the same results.

my webpage  Louis Vuitton Pas Cher - http://nysacpr.org/louisvuittonpascher.html ]]></content>
        </comment>
        <comment id="8b19bb6c-96da-4399-b547-e962bd6afb8f" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T15:11:25" date-modified="2013-06-26T15:11:25" approved="false" user-name="marketplace books" user-email="monikaperreault@zoho.com" user-ip="80.248.100.67" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Yesterday, while I was at work, my cousin stole my iphone and tested to see if it can survive a forty foot drop, just so she can be a youtube sensation. My apple ipad is now broken and she has 83 views. I know this is completely off topic but I had to share it with someone!

My homepage:  marketplace books - http://marketplace.sigaboy.com ]]></content>
        </comment>
        <comment id="a260535a-977a-4d21-820c-86d5a2f43565" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T18:05:51" date-modified="2013-06-26T18:05:51" approved="false" user-name="Cheap NFL Jerseys" user-email="janette_moriarty@gmail.com" user-ip="96.127.179.3" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[You really make it appear really easy with your presentation however I to find this topic to be actually one thing that I feel I&#39;d never understand. It sort of feels too complex and extremely vast for me. I&#39;m taking a look ahead for your subsequent publish, I&#39;ll try to get the cling of it!

My webpage:  Cheap NFL Jerseys - http://nysacpr.org/cheapjerseys.html ]]></content>
        </comment>
        <comment id="bffa7e7a-c12c-4be8-973f-e60cb5a21f80" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T18:05:24" date-modified="2013-06-28T18:05:24" approved="false" user-name="Caitlin" user-email="caitlinpellegrino@gmail.com" user-ip="198.143.130.141" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Keep on writing, great job!

Also visit my homepage: Cheap Jerseys ( Caitlin - http://nysacpr.org/cheapjerseys.html )]]></content>
        </comment>
        <comment id="77e841b5-4839-4472-9112-0a3fc938ee73" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T18:20:05" date-modified="2013-06-28T18:20:05" approved="false" user-name="Christian Louboutin UK" user-email="marcoyancey@zoho.com" user-ip="173.0.51.100" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[What&#39;s up Dear, are you really visiting this web page regularly, if so then you will without doubt obtain nice knowledge.

My web site:  Christian Louboutin UK - http://ngosummit.com/christian-louboutin-outlet.html ]]></content>
        </comment>
        <comment id="c6c9d832-2bb3-4118-94ad-bfc7c5011180" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T20:51:59" date-modified="2013-06-28T20:51:59" approved="false" user-name="http://nysacpr.org/airmaxpascher.html" user-email="lina_langlois@aol.com" user-ip="50.115.169.206" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Pretty! This was a really wonderful post. Thank you for providing these details.

my site ... nike air Max ( http://nysacpr.org/airmaxpascher.html - http://nysacpr.org/airmaxpascher.html )]]></content>
        </comment>
        <comment id="798bde47-a3de-4230-9e11-1a3263da6052" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-29T07:57:04" date-modified="2013-06-29T07:57:04" approved="false" user-name="Louis Vuitton Purses" user-email="crystle-huffman@zoho.com" user-ip="184.154.114.76" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Thank you for another informative blog. The place else may just I get that type of info written in such an ideal approach? I&#39;ve a project that I am simply now running on, and I&#39;ve been on the look out for such info.

my homepage ...  Louis Vuitton Purses - http://ngosummit.com/louisvuitton-outlet.html ]]></content>
        </comment>
        <comment id="56b16206-66c4-464f-a89d-e17894dfe34d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T05:05:22" date-modified="2013-07-01T05:05:22" approved="false" user-name="Christian Louboutin" user-email="patti-gilbert@gmail.com" user-ip="173.0.51.100" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Your style is so unique compared to other people I have read stuff from. Thank you for posting when you&#39;ve got the opportunity, Guess I&#39;ll just book mark this site.

Also visit my web blog ::  Christian Louboutin - http://ngosummit.com/christian-louboutin-outlet.html ]]></content>
        </comment>
        <comment id="b25bfa1a-4a40-4546-a116-c3c6d380cc87" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T18:59:39" date-modified="2013-07-04T18:59:39" approved="false" user-name="KD Basketball Shoes" user-email="gerardseidel@bigstring.com" user-ip="199.119.226.180" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[kevin durant espn is my most understand one of the most talented in 30 years.

My web page -  KD Basketball Shoes - http://www.avlogbook.com/kevin-durant-shoes.html ]]></content>
        </comment>
        <comment id="c7cfd4d7-56ce-44d6-a1dc-5370f8380272" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T18:41:51" date-modified="2013-07-05T18:41:51" approved="false" user-name="Kevin Durant 5 Shoes" user-email="jayjung@bigstring.com" user-ip="96.127.147.43" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[2 points and 11 rebounds. 23 -- because you&#39;re playing like Jordan. The spot features NBA All-Star kevin durant easter shoes 2013 alongside a passionate &#39;real&#39; fan who enjoys the experience of a lifetime. kevin durant easter shoes 2013 missed a jump shot and Serge Ibaka. The former Giants quarterback has seemingly been around forever - it was his 7th Super Bowl as an analyst, next to only John Madden for the most affordable costs.

Feel free to visit my homepage -  Kevin Durant 5 Shoes - http://nysacpr.org/kevindurantshoes.html ]]></content>
        </comment>
        <comment id="7cc80b3c-9af0-44c1-a7e0-ff8674fdcade" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T19:00:45" date-modified="2013-07-05T19:00:45" approved="false" user-name="Cheap LeBron James Shoes" user-email="candelaria-janes@hotmail.com" user-ip="108.163.252.213" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[This web site really has all of the information I needed concerning this subject and didn&#39;t know who to ask.

Review my site ::  Cheap LeBron James Shoes - http://www.lampsontew.com/lebronjamesshoes.htm ]]></content>
        </comment>
        <comment id="5e5cfe27-93c2-48dc-aaa6-586f8a1c1308" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T21:25:34" date-modified="2013-07-05T21:25:34" approved="false" user-name="New LeBron Shoes" user-email="delorespeterson@gmail.com" user-ip="173.213.112.164" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[It&#39;s fantastic that you are getting thoughts from this piece of writing as well as from our dialogue made at this time.

Here is my web site  New LeBron Shoes - http://www.lampsontew.com/lebronjamesshoes.htm ]]></content>
        </comment>
        <comment id="1452bf50-ed69-49ac-a083-3abfe2896939" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-08T06:00:14" date-modified="2013-07-08T06:00:14" approved="false" user-name="LeBron James X Shoes" user-email="mellissanavarrete@animail.net" user-ip="108.178.23.116" user-url="">
          <title type="text"><![CDATA[re: FollowMyFeed app submission: the result]]></title>
          <content type="text"><![CDATA[Nike lebron 10 shoes 2009, Women&#39;s Nike lebron 10 shoes 2010. The reigning Edmonton Eskimos nominee for Most Outstanding Rookie is enrolled in this week&#39;s rookie camp, despite exploding onto the CFL scene with four consecutive 100-yard-rushing games to end the 2010 season.

my homepage  LeBron James X Shoes - http://nysacpr.org/lebrojamesshoes.html ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="7757f91d-cc23-46eb-89c8-45be3c4daa58" date-created="2011-12-15T16:11:00" date-modified="2011-12-15T16:13:03" approved="true" post-url="/blog/post/2011/12/15/FollowMyFeed-generate-WP7-apps-without-any-coding.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[FollowMyFeed: generate WP7 apps without any coding]]></title>
      <content type="text"><![CDATA[<p>Some time ago MIcrosoft launched a website called <a href="http://www.followmyfeed.net/" target="_blank">FollowMyFeed</a>. The site is a service that allows anyone with an RSS feed to generate an application for Windows Phone 7 in mere minutes, without any coding. Sounds like fun, so I decided to test the service with the RSS from this blog.</p>
<p>These are the features, copied from the site:</p>
<ul>
<li>Multiple RSS feeds</li>
<li>Logo, Tile, Background, Pivotbackground custom</li>
<li>Offline content</li>
<li>Comments (online)</li>
<li>Share to social networks (online)</li>
</ul>
<p>Before you get started you do need to prepare some graphics like a splash screen, background and icons. For this purpose Microsoft put some templates on FollowMyFeed in both Photoshop and Paint.Net format. The templates are in a zip file and contain all the graphics needed to build an app. All graphics accept all the different icon sizes that are needed, luckily there&rsquo;s an app for that. Someone build an app that takes an image, you select a square that you want used as icons, click save and the app will save the icon in all the necessary sizes. WP IconMaker can be found <a href="http://wpiconmaker.codeplex.com/" target="_blank">here (codeplex)</a>.</p>
<p>Generating a new application is as easy as following a small wizard, selecting the correct graphics and colors, setting the RSS feed and you&rsquo;re done. I did encounter 1 issue, when I uploaded the splash screen it didn&rsquo;t work. A splash screen can be maximum 480x800 pixels, the resolution of all WP7 devices, my splash screen was exactly that size but didn&rsquo;t work. I&rsquo;ve resized it to 479x799 and it worked flawlessly. Besides this small bug I didn&rsquo;t encounter any problems, I&rsquo;ve downloaded the .XAP file, installed it onto the emulator to take some screenshots and submitted it to the marketplace, once I got the result of my submission, I&rsquo;ll let you know.</p>
<p>I made some screenshots of the entire process, those can be found <a href="https://skydrive.live.com/redir.aspx?cid=5a345bb15e973473&amp;resid=5A345BB15E973473!475&amp;parid=5A345BB15E973473!260" target="_blank">here</a></p>]]></content>
      <post-name type="text"><![CDATA[FollowMyFeed: generate WP7 apps without any coding]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
      </categories>
    </post>
    <post id="3c719c4f-c315-4f96-99d6-517171f10c35" date-created="2011-12-13T13:30:47" date-modified="2011-12-13T18:28:41" approved="true" post-url="/blog/post/2011/12/13/Binding-a-dynamic-Pivot-in-Windows-Phone-7.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Binding a dynamic Pivot in Windows Phone 7]]></title>
      <content type="text"><![CDATA[<p>I’m currently working on a Windows Phone 7 application that needs a dynamic Pivot. For every item in a list there should be a pivot item. Besides that, every dynamic pivot item should have a listbox that is bound to another list. I found very little information on these topics so I decided to write it down myself.</p>  <p>Both the header binding and the listbox binding are done from the same class. The class is called DemoClass and contains a string Name that will be bound to the header of the pivot item and a list of strings called Result that will be bound to the pivot item’s body. Here’s the code for the class:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a752fbcf-a38f-43c0-ba48-25fe2f4710a0" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System.Collections.ObjectModel;</li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="color:#0000ff">namespace</span> BindingDynamicPivotDemo</li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">DemoClass</span></li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> Name { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#0000ff">string</span>&gt; Result { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> DemoClass()</li> <li>        {</li> <li style="background: #f3f3f3">            Result = <span style="color:#0000ff">new</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#0000ff">string</span>&gt;();</li> <li>        }</li> <li style="background: #f3f3f3">    }</li> <li>}</li> </ol> </div> </div> </div>  <p>I used ObservableCollection here instead of List because ObservableCollection already implements INotifyPropertyChanged and takes care of notifying all it’s subscribers when it changes. It’s perfectly possible to use a IList&lt;string&gt; instead of the ObservableCollection but then the DemoClass needs to implement INotifyPropertyChanged. In the constructor of the class the collection gets initialized.</p>  <p>Next thing I needed was a viewmodel to bind to my xaml page. The viewmodel declares a collection of DemoClass instances and fills those instances with dummy data.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b3ec391b-8961-4e21-84dc-3bf3aba31418" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.ObjectModel;</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BindingDynamicPivotDemo</li> <li>{</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">MainViewModel</span></li> <li>    {</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#2b91af">DemoClass</span>&gt; PivotItems { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>        </li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> MainViewModel()</li> <li>        {</li> <li style="background: #f3f3f3">            PivotItems = <span style="color:#0000ff">new</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#2b91af">DemoClass</span>&gt;();</li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="color:#008000">//load pivot headers</span></li> <li>            LoadData();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="color:#008000">//load random dummy data for the pivot body</span></li> <li style="background: #f3f3f3">            FillLists();</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> LoadData()</li> <li style="background: #f3f3f3">        {</li> <li>            <span style="color:#008000">//pivot headers</span></li> <li style="background: #f3f3f3">            <span style="color:#0000ff">for</span> (<span style="color:#0000ff">int</span> i = 1; i &lt;= 10; i++)</li> <li>            {</li> <li style="background: #f3f3f3">                <span style="color:#2b91af">DemoClass</span> newClass = <span style="color:#0000ff">new</span> <span style="color:#2b91af">DemoClass</span> {Name = <span style="color:#a31515">&quot;pivotItem &quot;</span> + i};</li> <li>&nbsp;</li> <li style="background: #f3f3f3">                PivotItems.Add(newClass);</li> <li>            }</li> <li style="background: #f3f3f3">        }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FillLists()</li> <li>        {</li> <li style="background: #f3f3f3">            <span style="color:#2b91af">Random</span> rnd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Random</span>();</li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="color:#008000">//fill each list with dummy data, this will be shown in the pivot body</span></li> <li>            <span style="color:#0000ff">foreach</span> (<span style="color:#2b91af">DemoClass</span> pivotItem <span style="color:#0000ff">in</span> PivotItems)</li> <li style="background: #f3f3f3">            {</li> <li>                pivotItem.Result.Clear();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>                <span style="color:#0000ff">for</span> (<span style="color:#0000ff">int</span> j = 0; j &lt; 10; j++)</li> <li style="background: #f3f3f3">                {</li> <li>                    pivotItem.Result.Add(<span style="color:#a31515">&quot;item &quot;</span> + rnd.Next(0, 1000));</li> <li style="background: #f3f3f3">                }</li> <li>            }</li> <li style="background: #f3f3f3">        }</li> <li>    }</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>I am again using an ObservableCollection for the same reason as I did in the DemoClass. LoadData() creates 10 instances of DemoClass and adds them to the PivotItems collection. FillLists() will fill the Result collection of every DemoClass instance with random dummy data.</p>  <p>Next step is to let the view know where it needs to look for its data. This can be done from xaml or from code behind. MVVM Light takes the xaml approach while the default Visual Studio projects do it from code behind, since this is a default project I followed the code behind approach. This is how my MainPage.xaml.cs looks liks.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0af1932a-6a1d-496c-99a9-c0f316cc2a17" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System.Windows;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">using</span> Microsoft.Phone.Controls;</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BindingDynamicPivotDemo</li> <li>{</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">partial</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">MainPage</span> : <span style="color:#2b91af">PhoneApplicationPage</span></li> <li>    {</li> <li style="background: #f3f3f3">        <span style="color:#008000">// Constructor</span></li> <li>        <span style="color:#0000ff">public</span> MainPage()</li> <li style="background: #f3f3f3">        {</li> <li>            InitializeComponent();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="color:#008000">// Set the data context of the listbox control to the sample data</span></li> <li style="background: #f3f3f3">            DataContext = <span style="color:#2b91af">App</span>.ViewModel;</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> Button_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">RoutedEventArgs</span> e)</li> <li style="background: #f3f3f3">        {</li> <li>            <span style="color:#2b91af">App</span>.ViewModel.FillLists();</li> <li style="background: #f3f3f3">        }</li> <li>    }</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>Instantiation of the ViewModel occurs in App.xaml.cs and is auto-generated code. The Button_Click method is an event handler for a button, obviously. It will call a method on the ViewModel that regenerates new random dummy data for the pivot body. This shows how an ObservableCollection gives a powerful auto-updating binding while keeping the DemoClass nice and clean.</p>  <p>Now let’s take a look at the xaml and specifically at the bindings. This is the MainPage.xaml.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ea9dba85-96b0-4c9a-a9da-757e9a78504b" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Grid</span><span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;LayoutRoot&quot;</span><span style="color:#ff0000"> Background</span><span style="color:#0000ff">=&quot;Transparent&quot;&gt;</span></li> <li style="background: #f3f3f3">        <span style="color:#a31515"></span><span style="color:#008000">&lt;!--Pivot Control--&gt;</span></li> <li>        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot</span><span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;PivotPlatform&quot;</span><span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0,0,8,77&quot;</span><span style="color:#ff0000"> Title</span><span style="color:#0000ff">=&quot;BindingDynamicPivotDemo&quot;</span><span style="color:#ff0000"> ItemsSource</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> PivotItems}</span><span style="color:#0000ff">&quot; &gt;</span></li> <li style="background: #f3f3f3">            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.HeaderTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span><span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> Name}</span><span style="color:#0000ff">&quot;/&gt;</span></li> <li>                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.HeaderTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">ListBox</span><span style="color:#ff0000"> ItemsSource</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> Result}</span><span style="color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">                        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">ListBox.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span><span style="color:#ff0000"> TextWrapping</span><span style="color:#0000ff">=&quot;Wrap&quot;</span><span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding}</span><span style="color:#0000ff">&quot; /&gt;</span></li> <li>                            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">ListBox.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">ListBox</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot</span><span style="color:#0000ff">&gt;</span></li> <li>        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Button</span><span style="color:#ff0000"> Content</span><span style="color:#0000ff">=&quot;Randomize&quot;</span><span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span><span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Bottom&quot;</span><span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0,0,0,4&quot;</span><span style="color:#ff0000"> Click</span><span style="color:#0000ff">=&quot;Button_Click&quot;/&gt;</span></li> <li style="background: #f3f3f3">    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">Grid</span><span style="color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>I only pasted the layoutRoot grid here because all the xml namespaces are the default ones from a WP7 project. So for starters I’ve bound the Pivot’s ItemsSource to the PivotItems collection. Then I declare two templates, the header template is the title of the pivot item, by binding it to name it will use the Name property from the DemoClass. Since the Pivot’s ItemsSource is bound to PivotItems, the textblock in the header template is now bound to PivotItems.Name. The itemtemplate is what makes up the pivot’s body, it contains a listbox that is bound to PivotItems.Result. Underneath the pivot is a button that triggers the event handler in MainPage.xaml.cs.</p>  <p>When this is executed you’ll see an automatically generated pivot bound to dummy data, every time the button is clicked new data will be generated and shown in the pivot immediately thanks to the ObservableCollection.</p>  <p><a href="http://www.spikie.be/blog/image.axd?picture=screen.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="screen" border="0" alt="screen" src="http://www.spikie.be/blog/image.axd?picture=screen_thumb.png" width="148" height="244" /></a></p>  <p>The source of this project can be found <a href="https://skydrive.live.com/redir.aspx?cid=5a345bb15e973473&amp;resid=5A345BB15E973473!471&amp;parid=5A345BB15E973473!250" target="_blank">here</a>.</p>  <h3>Conclusion</h3>  <p>In this small article I explained how you can databind a pivot so that it’s items are automatically generated and bound to other properties. It’s not hard to do but it took me some time to figure out so I hope I’ve helped someone by writing down my findings.</p>]]></content>
      <post-name type="text"><![CDATA[Binding a dynamic Pivot in Windows Phone 7]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="b9f3b64e-0a04-4fad-bac9-bd9494f433a8" />
        <category ref="fcfc21d5-ab47-49c6-bf43-cda37ddbc30c" />
        <category ref="540177e8-fd15-4be6-b0ba-6f2c19913278" />
        <category ref="22302a23-f019-4a09-80a2-91b58db4d241" />
      </categories>
      <comments>
        <comment id="7a8a19d2-3939-4d25-98a4-9292eab6b5ce" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-27T02:00:03" date-modified="2013-06-27T02:00:03" approved="false" user-name="Earl" user-email="earl_mclaughlin@bigstring.com" user-ip="178.32.232.212" user-url="">
          <title type="text"><![CDATA[re: Binding a dynamic Pivot in Windows Phone 7]]></title>
          <content type="text"><![CDATA[Simply want to say your article is as astounding. The clarity in your post is simply cool and i could assume you are an expert on this subject. Well with your permission allow me to grab your RSS feed to keep up to date with forthcoming post. Thanks a million and please continue the enjoyable work.

Visit my page - click here ( Earl - http://butchraw.com/read_blog/18067/nourishment-hints-that-everybody-can-reside-with )]]></content>
        </comment>
        <comment id="dac0a349-a0b8-4f5d-8b23-d6a9ff94ab5d" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-04T23:20:49" date-modified="2013-07-04T23:20:49" approved="false" user-name="Jenna" user-email="jenna.wilkes@arcor.de" user-ip="200.222.15.122" user-url="">
          <title type="text"><![CDATA[re: Binding a dynamic Pivot in Windows Phone 7]]></title>
          <content type="text"><![CDATA[Hi mates, nice article and pleasant urging commented at this place, I am truly enjoying by these.

Here is my page custom orthotic inserts ::  Jenna - https://www.scs-ptc.com/author/ThomasNyb  ::]]></content>
        </comment>
        <comment id="8bf5b52c-ff9c-44de-bc4d-bd270b6d2301" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-05T16:07:26" date-modified="2013-07-05T16:07:26" approved="false" user-name="Lateral Collateral Ligament" user-email="jillianlittleton@web.de" user-ip="64.191.51.159" user-url="">
          <title type="text"><![CDATA[re: Binding a dynamic Pivot in Windows Phone 7]]></title>
          <content type="text"><![CDATA[I just could not go away your website prior to suggesting that I actually enjoyed the standard info a person provide for your visitors? Is gonna be again continuously in order to investigate cross-check new posts

My web site -  Lateral Collateral Ligament - http://mail.mywikibiz.com/User:SiennaURV ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="b1f8cd49-2673-40a5-ae63-196106437730" date-created="2011-10-21T19:56:00" date-modified="2013-05-29T01:09:54" approved="true" post-url="/blog/post/2011/10/21/Comic-Organizer-Part-III-MainViewModel-and-Facade-pattern.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Comic Organizer Part III: MainViewModel and Facade pattern]]></title>
      <content type="text"><![CDATA[<p>Last time we did some Xaml work to setup the metro style that will be used throughout the application, now it’s time to dive into some C# code. In this part we’ll start adding some properties to the MainViewModel that can be used for databinding and we’ll talk a bit about the Façade pattern, the first of the design patterns that we’ll try to implement.</p>  <p>&#160;</p>  <h1></h1>  <h1>ViewModel</h1>  <p>To show data in the views of an MVVM application we need some bindable properties. Those properties are called bindable because they can be bound to a control on the view, for example a string property can be bound to a textbox so that the value of the string is shown as the textbox.Text property. Or the other way around, or both ways. Creating those properties works in the same way you’d create a property in any class but they can’t be auto properties, you need to create them the old-fashioned way. For the moment I need two properties, a string that will contain the text that a user typed into the searchbox and a list that will contain the searchresults.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:710aeb9e-8148-4b29-8827-5d1fe26b883d" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">private</span> <span style="color:#0000ff">string</span> searchString;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> SearchString</li> <li>{</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> searchString; }</li> <li>    <span style="color:#0000ff">set</span></li> <li style="background: #f3f3f3">    {</li> <li>        searchString = <span style="color:#0000ff">value</span>;</li> <li style="background: #f3f3f3">        RaisePropertyChanged(SearchStringPropertyName);</li> <li>    }</li> <li style="background: #f3f3f3">}</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">private</span> <span style="color:#2b91af">Response</span> searchResult;</li> <li><span style="color:#0000ff">public</span> <span style="color:#2b91af">Response</span> SearchResult</li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">get</span> { <span style="color:#0000ff">return</span> searchResult; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">set</span> </li> <li>    {</li> <li style="background: #f3f3f3">        searchResult = <span style="color:#0000ff">value</span>;</li> <li>        RaisePropertyChanged(SearchResultPropertyName);</li> <li style="background: #f3f3f3">    }</li> <li>}</li> </ol> </div> </div> </div>  <p>“Wait, I thought you said one of them would be a list?”    <br />Yes I did     <br />“But I see no list”     <br />Deceiving looks can be my young Padawan.</p>  <p>“Response” is a class I build that contains the list I previously mentioned, it’s in a separate class so that later on I can use the MVVM Light messenger to pass it around, the messenger won’t pass around a list so this is a work-around, more about that when we get to that.</p>  <p>&#160;</p>  <h1>Domain Project</h1>  <h1></h1>  <h1></h1>  <p>The response classed is declared in a separate project, I’ve added a C# class library to the solution and called it “ComicOrganizer.Domain”. It will contain all the classes I’ll be needing, for now it just contains the Response class</p>  <p>The Response class looks like this:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e79f9491-4c6e-436b-9934-98d48f0f8f31" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">Response</span></li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">int</span> NumberOfPageResults { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">int</span> StatusCode { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> Error { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#2b91af">IList</span>&lt;<span style="color:#2b91af">SearchResult</span>&gt; Results { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">int</span> Limit { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">int</span> Offset { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">int</span> NumberOfTotalResults { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>So it has a few more properties than just a list, but we’ll need them later. These can be auto properties because we won’t be binding them to a control in the view.</p>  <p>The application will be using a normal List&lt;T&gt; but I’ve declared it here as an IList&lt;T&gt; so that, if we in the future build our own list, based on IList&lt;T&gt; we won’t need to adapt our class. Working with interfaces instead of implementations is also a best practice and helps utilising the Open/Close principle.</p>  <p>The IList expects members of type “SearchResult”, which is also one of my homecooked classes. A small background before we dive into that one. The purpose here is to accept a searchstring by the user, send the string to the Comicvine api, which returns the result as a JSON object (more about that later). We deserialize the JSON object in objects that our application can understand and pass it to the ViewModel. A JSON result returned by ComicVine looks like the Response class above, it states how many pages it contains (20 items per page), it has a StatusCode which is 0 if everything went peachy, if it hasn’t it sends the error. It has an array with 20 results, a total results and an Offset. With the offset we can ask the API for results 0-20 or 20-40 and so on.</p>  <p>The results themselves look like the SearchResult class I’ve build:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d970216a-7dda-4b99-b1ab-585f81fd5cdf" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">SearchResult</span> : <span style="color:#2b91af">IResource</span></li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#2b91af">Publisher</span> PublishedBy { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#2b91af">Image</span> Images { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> Name { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> ApiDetailUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>}</li> </ol> </div> </div> </div>  <p>As you can see this class implements the IResource interface, which is just an empty interface, the use will become clear later on. Also the Image type used here isn’t the .net Image type, it’s again a custom class, just like Publisher.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e5b869b2-da0a-487b-b3a4-71a3d40c23a5" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">Image</span> : <span style="color:#2b91af">IResource</span></li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> IconUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> MediumUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> TinyUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> SmallUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> ThumbUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> ScreenUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> SuperUrl { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">}</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">Publisher</span> : <span style="color:#2b91af">IResource</span></li> <li>    {</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> LocationCity { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> LocationState { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> LocationAddress { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>}</li> </ol> </div> </div> </div>  <p>And that’s all the classes we need for now. The returned JSON contains a whole lot more information but we won’t be using that, so we filter it out.</p>  <p>&#160;</p>  <h1>Facade Pattern</h1>  <p>The Façade Pattern according to dofactory.com:</p>  <p><em>Provide a unified interface to a set of interfaces in a subsystem. Façade defines a higher-level interface that makes the subsystem easier to use.</em> </p>  <p>The façade pattern creates some sort of API on top of an API, there are many reasons to do so. In our case it’s because the Comicvine API is very big and we only need a portion of it, also the Comicvine API returns JSON results, we need .net objects. So we create a wrapper around it, this wrapper is called the Façade pattern.</p>  <p>I’m going to start with just one method in the façade pattern, we will expand it as this series moves along. For starters I created an interface called IApi, the interface has one method called SearchVolume. This will search the Comicvine database for all comic series (called Volumes by Comicvine) that contain the searchstring the user entered. The interface looks like this:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f726d87d-8222-42cc-8c42-9377785fe6e8" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">interface</span> <span style="color:#2b91af">IApi</span></li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">void</span> SearchVolume(<span style="color:#0000ff">string</span> searchString);</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>It accepts the searchstring but doesn’t return any value because getting the info will happen asynchronously and we will return the result by using the MVVM Light Messenger.</p>  <p>Now, why would I want to use an interface for my façade pattern? Let’s say that in a few months I run against another comicsite that offers an api that I want to include in my application. I can just build a second façade that again implements the interface but talks to the new API. I don’t have to adjust any logic in my view or viewmodel because it uses all the same methods and returns the same types, pretty cool huh?</p>  <p>Okay, let’s implement the interface in a class called ComicVineApi</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3162ac7d-3938-41b0-bfdb-7c18bad70c54" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">ComicVineApi</span> : <span style="color:#2b91af">IApi</span></li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> SearchVolume(<span style="color:#0000ff">string</span> searchString)</li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#0000ff">string</span> completeUrl = <span style="color:#2b91af">ComicVineConstants</span>.Url + <span style="color:#a31515">&quot;search/&quot;</span> + <span style="color:#2b91af">ComicVineConstants</span>.Key + <span style="color:#a31515">&quot;&amp;query=&quot;</span> + searchString + <span style="color:#a31515">&quot;&amp;resources=volume&quot;</span> + <span style="color:#a31515">&quot;&amp;field_list=&quot;</span> + <span style="color:#2b91af">ComicVineConstants</span>.VolumeFields + <span style="color:#2b91af">ComicVineConstants</span>.Format;</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        Download(completeUrl);</li> <li style="background: #f3f3f3">    }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> Download(<span style="color:#0000ff">string</span> url)</li> <li>    {</li> <li style="background: #f3f3f3">        <span style="color:#2b91af">WebClient</span> client = <span style="color:#0000ff">new</span> <span style="color:#2b91af">WebClient</span>();</li> <li>        client.DownloadStringCompleted += <span style="color:#0000ff">new</span> <span style="color:#2b91af">DownloadStringCompletedEventHandler</span>(ClientDownloadDetailStringCompleted);</li> <li style="background: #f3f3f3">        client.DownloadStringAsync(<span style="color:#0000ff">new</span> <span style="color:#2b91af">Uri</span>(url));</li> <li>    }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> ClientDownloadDetailStringCompleted(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">DownloadStringCompletedEventArgs</span> e)</li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#0000ff">if</span> (e.Error == <span style="color:#0000ff">null</span> &amp;&amp; !e.Cancelled)</li> <li style="background: #f3f3f3">        {</li> <li>            <span style="color:#2b91af">JsonSerializer</span> jsonrep = <span style="color:#0000ff">new</span> <span style="color:#2b91af">JsonSerializer</span>();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="color:#0000ff">string</span> json = e.Result;</li> <li style="background: #f3f3f3">            <span style="color:#2b91af">Response</span> response = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Response</span>();</li> <li>&nbsp;</li> <li style="background: #f3f3f3">            response = jsonrep.ConvertJson(json);</li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="color:#2b91af">Messenger</span>.Default.Send&lt;<span style="color:#2b91af">Response</span>&gt;(response);</li> <li>        }</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">else</span></li> <li>        {</li> <li style="background: #f3f3f3">            <span style="color:#2b91af">MessageBox</span>.Show(e.Error.Message);</li> <li>        }</li> <li style="background: #f3f3f3">    }</li> <li>}</li> </ol> </div> </div> </div>  <p>So what happens here? In the SearchVolume method we build the url that contains the Comicvine API request. a complete url looks like this:</p>  <p><a href="http://api.comicvine.com/search/?api_key=1234f&amp;query=hulk&amp;resources=volume&amp;field_list=api_detail_url,count_of_issues,description,image,name,start_year,site_detail_url&amp;format=json">http://api.comicvine.com/search/?api_key=1234f&amp;query=hulk&amp;resources=volume&amp;field_list=api_detail_url,count_of_issues,description,     <br />image,name,start_year,site_detail_url&amp;format=json</a></p>  <p>I removed my API key from the URL for obvious reasons, if you want to test this link out you can request your own API key at <a href="http://www.comicvine.com">http://www.comicvine.com</a> it’s completely free.</p>  <p>The ComicVineConstants is a class where I put most of my so called magic strings, strings hard coded in the application.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f6922867-efc0-419e-acc8-c32b33b3148f" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">ComicVineConstants</span></li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">const</span> <span style="color:#0000ff">string</span> VolumeFields = <span style="color:#a31515">&quot;api_detail_url,count_of_issues,description,image,name,start_year,site_detail_url&quot;</span>;</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">const</span> <span style="color:#0000ff">string</span> Key = <span style="color:#a31515">&quot;?api_key=1234&quot;</span>;</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">const</span> <span style="color:#0000ff">string</span> Url = <span style="color:#a31515">&quot;http://api.comicvine.com/&quot;</span>;</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">const</span> <span style="color:#0000ff">string</span> Format = <span style="color:#a31515">&quot;&amp;format=json&quot;</span>;</li> <li>}</li> </ol> </div> </div> </div>  <p>Again, the API key is removed from this code for obvious reasons.</p>  <p>So once the url is build it’s passed into the download method which will start an asynchronous download by using a WebClient instance. After that the application continues to run while the JSON results are downloaded on the background, once the download is complete the DownloadStringCompletedEventHandler will fire. The eventhandler deserialises the JSON into .net objects by using JSON.net, which is available on NuGet, and sends it on it’s way.</p>  <p>The Messenger class is part of the Galasoft.MvvmLight.Messaging assembly. In the eventhandler we say that we want to send an object of type “Response” on the instance called “Default” of the Messenger class. Now every class that has registered to messages of type “Response” will receive the message and can act accordingly. The Messenger class helps the separation of concerns here by allowing us to send the result to any instance of any class available, without it we would have to do the download logic in the ViewModel and that just feels plain wrong.</p>  <p>I will end this part here. In part IV we will start building some UI, do some databinding and register our MainViewModel to the Messenger class. And we will finally start receiving some data from the Comicvine API so we can see our façade pattern in action, until then: Live long and prosper!</p>]]></content>
      <post-name type="text"><![CDATA[Comic Organizer Part III: MainViewModel and Facade pattern]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="cd0e8753-7f49-46cc-b4ed-293f72eb73c7" />
        <category ref="9f5a45ae-6001-46fe-b47b-88bb85087e4a" />
      </categories>
    </post>
    <post id="339f3e9c-b035-4bd4-ac70-82daf10bc5fe" date-created="2011-10-06T19:19:46" date-modified="2011-10-14T18:50:40" approved="true" post-url="/blog/post/2011/10/06/Comic-Organizer-part-II-setting-up-the-project.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Comic Organizer part II: Going metro]]></title>
      <content type="text"><![CDATA[<p>In part 1 I talked about MVVM and MVVM Light, I hope you learned something from it. Now it’s time to move on to the next part, we’re going to start building a WPF application.</p>  <p>First things first, here are the tools I’m going to use:</p>  <ul>   <li><a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-csharp-express" target="_blank">Visual Studio 2010</a> </li>    <li><a href="http://www.microsoft.com/expression/desktop.aspx" target="_blank">Expression Blend 4</a> </li>    <li><a href="http://wpf.codeplex.com/" target="_blank">WPF Toolkit</a> </li>    <li><a href="http://mvvmlight.codeplex.com/" target="_blank">MVVM Light</a> </li> </ul>  <p>The WPF toolkit is a set of controls that extend the default WPF controls, it’s build by Microsoft and updated a few times a year.</p>  <p>If the MVVM Light toolkit is installed you should see new project types when creating a new project in Visual Studio. I’m going to create a new WPF 4 project.</p>  <p><img style="display: block; float: none; margin-left: auto; margin-right: auto" src="http://i55.tinypic.com/168sqp1.jpg" width="540" height="373" /></p>  <p>Now that the project is created, take a look at the solution explorer, there you will find the MVVM parts nicely ordered in separate folders. If you want you can take them and put every part in a separate project, I won’t be doing that for my application since it’s pretty small.</p>  <p align="center"><img src="http://i52.tinypic.com/2lu7tt.jpg" /></p>  <p align="center">&#160;</p>  <p align="left">Now that we got our project, let’s metronize it. For this we need to open the solution in Expression Blend. The best way to work on XAML based projects is to open the solution in both Visual Studio and Expression Blend, changes made in one will automatically be reflected in the other.</p>  <p align="left">Metro isn’t a style that is out of the box available for WPF. While searching for a way to imitate the Metro windows like Microsoft uses it in Zune I stumbled upon the blog of <a href="http://stevenhook.blogspot.com/2011/01/wpf-borderless-window-controls.html" target="_blank">Steven Hook</a>. He had the idea of using the Wingdings font for the upper right buttons. Sounds weird? Let me show you how it works.</p>  <p align="left">In Expression Blend I’ve set the WindowsStyle property to “None” and ResizeMode to “ResizeWithGrip”, the generated XAML looks like this</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1c10456e-b127-41d7-a1dc-e77793b51ee4" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Window</span><span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Class</span><span style="color:#0000ff">=&quot;ComicOrganizer.MainWindow&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> xmlns</span><span style="color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li>       <span style="color:#ff0000"> xmlns</span><span style="color:#0000ff">:</span><span style="color:#ff0000">x</span><span style="color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> xmlns</span><span style="color:#0000ff">:</span><span style="color:#ff0000">d</span><span style="color:#0000ff">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></li> <li>       <span style="color:#ff0000"> xmlns</span><span style="color:#0000ff">:</span><span style="color:#ff0000">mc</span><span style="color:#0000ff">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> mc</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Ignorable</span><span style="color:#0000ff">=&quot;d&quot;</span></li> <li>       <span style="color:#ff0000"> Title</span><span style="color:#0000ff">=&quot;Comic Organizer&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> DataContext</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> Main</span><span style="color:#0000ff">,</span><span style="color:#ff0000"> Source</span><span style="color:#0000ff">={</span><span style="color:#a31515">StaticResource</span><span style="color:#ff0000"> Locator}}</span><span style="color:#0000ff">&quot;</span><span style="color:#ff0000"> WindowStyle</span><span style="color:#0000ff">=&quot;None&quot;</span><span style="color:#ff0000"> ResizeMode</span><span style="color:#0000ff">=&quot;CanResizeWithGrip&quot;</span><span style="color:#ff0000"> AllowsTransparency</span><span style="color:#0000ff">=&quot;True&quot;&gt;</span></li> </ol> </div> </div> </div>  <p>This gives a clean white window without borders that can be resized by using the grip in the lower right corner. Next step is adding the controls for closing, maximizing and minimizing the window. This is the XAML responsible for those buttons</p>    <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7a112a78-763b-4e7b-9a58-c459b3b8aa76" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Grid</span> </li> <li style="background: #f3f3f3">   <span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;HeaderGrid&quot;</span> </li> <li>   <span style="color:#ff0000"> Height</span><span style="color:#0000ff">=&quot;50&quot;</span> </li> <li style="background: #f3f3f3">   <span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Top&quot;</span><span style="color:#ff0000"> Grid.ColumnSpan</span><span style="color:#0000ff">=&quot;2&quot;&gt;</span></li> <li>    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Grid</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;DragableArea&quot;</span></li> <li>       <span style="color:#ff0000"> Background</span><span style="color:#0000ff">=&quot;White&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> MouseDown</span><span style="color:#0000ff">=&quot;DragableGridMouseDown&quot;/&gt;</span></li> <li>    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">StackPanel</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> Orientation</span><span style="color:#0000ff">=&quot;Horizontal&quot;</span></li> <li>       <span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0,5,5,0&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span></li> <li>       <span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Top&quot;</span></li> <li style="background: #f3f3f3">       <span style="color:#ff0000"> Background</span><span style="color:#0000ff">=&quot;White&quot;&gt;</span></li> <li>        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span> </li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;ChangeViewButton&quot;</span></li> <li>           <span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;2&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> FontFamily</span><span style="color:#0000ff">=&quot;Webdings&quot;</span></li> <li>           <span style="color:#ff0000"> Foreground</span><span style="color:#0000ff">=&quot;Gray&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0&quot;</span></li> <li>           <span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Top&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span></li> <li>           <span style="color:#ff0000"> MouseLeftButtonUp</span><span style="color:#0000ff">=&quot;ChangeViewButtonMouseLeftButtonUp&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span></li> <li>           <span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;MinimizeButton&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;0&quot;</span></li> <li>           <span style="color:#ff0000"> FontFamily</span><span style="color:#0000ff">=&quot;Webdings&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> Foreground</span><span style="color:#0000ff">=&quot;Gray&quot;</span></li> <li>           <span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;5,0,0,0&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span></li> <li>           <span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Top&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> MouseLeftButtonUp</span><span style="color:#0000ff">=&quot;MinimizeButtonMouseLeftButtonUp&quot; /&gt;</span></li> <li>        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;MaximizeButton&quot;</span></li> <li>           <span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;1&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> FontFamily</span><span style="color:#0000ff">=&quot;Webdings&quot;</span></li> <li>           <span style="color:#ff0000"> Foreground</span><span style="color:#0000ff">=&quot;Gray&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;5,0,0,0&quot;</span></li> <li>           <span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Top&quot;</span></li> <li>           <span style="color:#ff0000"> MouseLeftButtonUp</span><span style="color:#0000ff">=&quot;MaximizeButtonMouseLeftButtonUp&quot; /&gt;</span></li> <li style="background: #f3f3f3">        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span></li> <li>           <span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;CloseButton&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;r&quot;</span></li> <li>           <span style="color:#ff0000"> FontFamily</span><span style="color:#0000ff">=&quot;Webdings&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> Foreground</span><span style="color:#0000ff">=&quot;Gray&quot;</span></li> <li>           <span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;5,0,0,0&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span></li> <li>           <span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Top&quot;</span></li> <li style="background: #f3f3f3">           <span style="color:#ff0000"> MouseLeftButtonUp</span><span style="color:#0000ff">=&quot;CloseButtonMouseLeftButtonUp&quot; /&gt;</span></li> <li>    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">StackPanel</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">Grid</span><span style="color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>    <p>The “DragableArea” grid will allow the application to be dragged around the screen by the user, just like any app does. The Stackpanel takes care of the 4 buttons in the upper right corner.</p>  <p>Now we need to implement the logic for these buttons, the buttons are actually textblocks but will behave like buttons. The blog that I got this idea from said that the logic of the buttons is the responsibility of the view, so even in an MVVM application it could be placed in the code behind file of the view. I tend to agree with this logic so I’m going to place it in the code behind as well, although it’s perfectly possible to put it in the ViewModel.</p>  <p>The complete code behind file looks like this:</p>  <p>   <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:35855c3e-e52a-47c6-b40f-da346ea56074" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System.Windows;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Windows.Input;</li> <li><span style="color:#0000ff">using</span> ComicOrganizer.ViewModel;</li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="color:#0000ff">namespace</span> ComicOrganizer</li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="color:#808080">///</span><span style="color:#008000"> Interaction logic for MainWindow.xaml</span></li> <li>    <span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">partial</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">MainWindow</span> : <span style="color:#2b91af">Window</span></li> <li>    {</li> <li style="background: #f3f3f3">        <span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;summary&gt;</span></li> <li>        <span style="color:#808080">///</span><span style="color:#008000"> Initializes a new instance of the MainWindow class.</span></li> <li style="background: #f3f3f3">        <span style="color:#808080">///</span><span style="color:#008000"> Metro style logic is done here because it&#39;s the responsibility of the View</span></li> <li>        <span style="color:#808080">///</span><span style="color:#008000"> idea found on http://stevenhook.blogspot.com/2011/01/wpf-borderless-window-controls.html </span></li> <li style="background: #f3f3f3">        <span style="color:#808080">///</span><span style="color:#008000"> </span><span style="color:#808080">&lt;/summary&gt;</span></li> <li>        <span style="color:#0000ff">public</span> MainWindow()</li> <li style="background: #f3f3f3">        {</li> <li>            InitializeComponent();</li> <li style="background: #f3f3f3">            Closing += (s, e) =&gt; <span style="color:#2b91af">ViewModelLocator</span>.Cleanup();</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> CloseButtonMouseLeftButtonUp(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">MouseButtonEventArgs</span> e)</li> <li style="background: #f3f3f3">        {</li> <li>            Close();</li> <li style="background: #f3f3f3">        }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> MaximizeButtonMouseLeftButtonUp(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">MouseButtonEventArgs</span> e)</li> <li>        {</li> <li style="background: #f3f3f3">            WindowState = <span style="color:#2b91af">WindowState</span>.Maximized;</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> ChangeViewButtonMouseLeftButtonUp(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">MouseButtonEventArgs</span> e)</li> <li style="background: #f3f3f3">        {</li> <li>            WindowState = <span style="color:#2b91af">WindowState</span>.Normal;</li> <li style="background: #f3f3f3">        }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> MinimizeButtonMouseLeftButtonUp(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">MouseButtonEventArgs</span> e)</li> <li>        {</li> <li style="background: #f3f3f3">            WindowState = <span style="color:#2b91af">WindowState</span>.Minimized;</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> DragableGridMouseDown(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">MouseButtonEventArgs</span> e)</li> <li style="background: #f3f3f3">        {</li> <li>            <span style="color:#0000ff">if</span> (e.ChangedButton == <span style="color:#2b91af">MouseButton</span>.Left)</li> <li style="background: #f3f3f3">                DragMove();</li> <li>        }</li> <li style="background: #f3f3f3">    }</li> <li>}</li> </ol> </div> </div> </div> </p>  <p>&#160;</p>  <p>These little methods speak for themselves, if you have any questions about them feel free to leave a comment or contact me via mail, twitter, …</p>  <p>That was it for this second part, we now have a running WPF application in Metro style using some easy tricks. I believe that Microsoft will give a real Metro style out to the community, when they do I’ll probably convert this app to use the real style.</p>  <p>In part III we’ll start receiving data and maybe some databinding as well, who knows? <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Glimlach" src="http://www.spikie.be/blog/image.axd?picture=wlEmoticon-smile.png" /></p>  <p>Stay tuned for part III in a couple of weeks!</p>]]></content>
      <post-name type="text"><![CDATA[Comic Organizer part II: Going metro]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="9fa88240-fbbd-4679-9b56-8ae20f8e405a" date-created="2011-10-05T20:22:19" date-modified="2011-10-05T20:56:54" approved="true" post-url="/blog/post/2011/10/05/Comic-Organizer-Part-I-MVVM-Light.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Comic Organizer Part I: MVVM Light]]></title>
      <content type="text"><![CDATA[<p>All right, let’s grab a beer and get this show on the road shall we?</p>  <p>First topic I want to discuss is MVVM, Model-View-ViewModel. A big mistake people tend to make is to call MVVM a framework, in reality MVVM is a design pattern, a best practice guide to build a structured loosely coupled application. MVVM works great in WPF, Silverlight and Windows Phone 7 development. Windows 8 Metro apps will also be great to use MVVM in.</p>  <p>So let’s walk through the different parts of the pattern, I know there are thousands of articles about this subject on the net but bear with me, things will get interesting.</p>  <p>Let’s start off with a small diagram</p>  <p><img style="display: block; float: none; margin-left: auto; margin-right: auto" src="http://i56.tinypic.com/mwcosp.jpg" width="267" height="267" /></p>  <p>All right, keep this in mind and let’s start discussing the different parts.</p>  <h1>The View</h1>  <p>First subject is the view, the view in our WPF application will consist out of XAML files, these files describe the user interface and all the controls on them. This includes buttons, checkboxes, radiobuttons, listboxes, etc. The only thing that the view is aware off is what viewmodel it is binded too and what controls are bound to what property on the viewmodel. There is no business logic in the view and although there is a code-behind file, the rule is to keep it as clean as possible. The viewmodel and control bindings happen in the XAML code, each XAML control has a property that can be bound to a viewmodel property. An example of binding a button:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:55dc5562-300e-4d8e-b46f-3f6e73c91573" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Button</span><span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;SearchButton&quot;</span><span style="color:#ff0000"> Content</span><span style="color:#0000ff">=&quot;Search&quot;</span><span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0,50,0,0&quot;</span><span style="color:#ff0000"> Command</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> SearchCommand</span><span style="color:#0000ff">,</span><span style="color:#ff0000"> Mode</span><span style="color:#0000ff">=OneWay}&quot;/&gt;</span></li> </ol> </div> </div> </div>  <p>When the button is clicked the Binding command goes searching in the viewmodel for a command called SearchCommand and executes it.</p>  <h1>The ViewModel</h1>  <p>The viewmodel contains all the data that needs to be shown on the view. These data are contained in properties that are bound to the controls on the view. Apart from data that is shown on the view, the viewmodel can also contain a bunch of commands that can be bound to events, most often used for a button click. The advantage of seperating form and form logic is that it’s very easy to bind a new view to an existing viewmodel, it’s just a matter of adding controls on the form and binding them to the right properties. The command used in the example of the view is defined like this:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9d1a5471-4895-49bc-a533-457d482b186e" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#2b91af">RelayCommand</span> SearchCommand { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">private</span> <span style="color:#0000ff">set</span>; }</li> </ol> </div> </div> </div>  <p>RelayCommand is a class from MVVM Light that implements the System.Windows.Input.ICommand interface. </p>  <p>The ICommand interface is what you need to implement if you’re not using an MVVM implementation by a third party. The interface looks like this:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ba8f8714-9c1e-4d96-98e2-de25863f2da1" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">public</span> <span style="color:#0000ff">interface</span> <span style="color:#2b91af">ICommand</span></li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#0000ff">bool</span> CanExecute(<span style="color:#0000ff">object</span> parameter);</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">void</span> Execute(<span style="color:#0000ff">object</span> parameter);</li> <li>        <span style="color:#0000ff">event</span> <span style="color:#2b91af">EventHandler</span> CanExecuteChanged;</li> <li style="background: #f3f3f3">    }</li> </ol> </div> </div> </div>  <p>The relaycommand now needs to know what method to execute when it’s called. This is usually done in an InitiateCommands method like this:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f1edf038-008e-4c18-945c-ac7d381da398" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> InstantiateCommands()</li> <li style="background: #f3f3f3">        {</li> <li>            SearchCommand = <span style="color:#0000ff">new</span> <span style="color:#2b91af">RelayCommand</span>(LoadList);</li> <li style="background: #f3f3f3">        }</li> </ol> </div> </div> </div>  <p>This will call a method called LoadList when the button is clicked. You can, off course, use anonymous methods like this:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fa994b67-f690-430e-b9c5-5ea622dc75c8" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> InstantiateCommands()</li> <li style="background: #f3f3f3">{</li> <li>    SearchCommand = <span style="color:#0000ff">new</span> <span style="color:#2b91af">RelayCommand</span>(()=&gt;</li> <li style="background: #f3f3f3">                                            {</li> <li>                                                <span style="color:#008000">//...</span></li> <li style="background: #f3f3f3">                                            });</li> <li>}</li> </ol> </div> </div> </div>  <p>for those not familiar with anonymous methods, when the button is clicked all instructions between the brackets are executed. I’ll show more examples of databinding as I get further into this serie.</p>  <h1>The Model</h1>  <p>The model is often a separate object and contains the business logic. Classes that process the information that the viewmodel uses to pass to the view or that is passed to the viewmodel from the view. </p>  <h1>MVVM Light</h1>  <p>So what is this MVVM Light thing all about? MVVM Light is an open-source MVVM implementation created by Laurent Bugnion and can be downloaded from <a href="http://mvvmlight.codeplex.com/" target="_blank">Codeplex</a>. MVVM Light can be installed from Codeplex or from NuGet. When you install it from Codeplex you get new project types for WP7, WPF and SilverLight. Laurent recently added a preview version for Windows 8 Metro apps. Now what sets MVVM Light apart from its competitors? For me personally, the ease of use. MVVM Light just makes sense, it’s easy to use, Laurent has some nice documentation and some videos from events where he talked about his toolkit. The toolkit also contains a great messaging system that allows an application to send messages between all classes and projects within an application, a great tool that helps you create nice loosely coupled applications. Recently a very basic IoC container was added to the toolkit, which really shows the dedication and hard work that Laurent puts in his product. The container allows the viewmodels to accept instances from classes without tight coupling them, more about that when we get to it in future posts.</p>  <p>I really hope this first post made some sense, it’s the first time that I’m writing a series of blogposts while learing about the subject myself. If I made any errors or you’ve got some questions, feel free to drop me a message on Twitter, mail or leave a comment.</p>  <p>See you soon in Part 2!</p>]]></content>
      <post-name type="text"><![CDATA[Comic Organizer Part I: MVVM Light]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="07b18771-9765-4109-8ab1-a2aaf7630b04" date-created="2011-10-05T19:36:53" date-modified="2011-10-05T19:36:53" approved="true" post-url="/blog/post/2011/10/05/Starting-new-blogseries.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Starting new blogseries]]></title>
      <content type="text"><![CDATA[<p>My comic application for Windows Phone 7, called ComicDB, has been published for a good month now and as I’m working on version 2 I got an idea to build a Windows desktop application. The application will allow users to maintain a library of comic series and to keep track of owned and read issues, something I’m struggling with myself. I decided to make a blogseries about my progress, I started working on it today so I’ll try to get the first post online in a few days.</p>  <p>Some details:</p>  <ul>   <li>WPF application</li>    <li>Metro style</li>    <li>MVVM Light</li>    <li>trying to use the SOLID principles</li> </ul>  <p>I’m currently learning SOLID principles and design patterns, so some refactoring might occur but I think it’ll be fun for you to follow my learning progress and it’ll be fun for me to build now and to look back to in a few years</p>]]></content>
      <post-name type="text"><![CDATA[Starting new blogseries]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="5027c9cd-499a-422b-8493-a112467f378e" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="fdf478a2-d984-4cb1-b71c-8effabddbe6b" date-created="2011-07-15T14:21:32" date-modified="2013-04-03T22:45:29" approved="true" post-url="/blog/post/2011/07/15/Building-a-game-menu-and-loading-screen-in-XNA.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a game menu and loading screen in XNA]]></title>
      <content type="text"><![CDATA[<p>I’ve spent a lot of time searching for a way to get menus and loading screens working in XNA. XNA has no controls like textboxes and buttons like we’re accustomed to in winforms, ASP and so on.</p>  <p>So after searching and only finding half working solutions I decided to share the way I do it with the community.   <br />The result is a five page guide and a link to my solution</p>  <p><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA.aspx" target="_blank">Click here to get started!</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a game menu and loading screen in XNA]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="08f61bac-ead0-496a-964a-094ab5da5f9d" />
      </categories>
      <comments>
        <comment id="227984d5-0962-457a-80c0-e5144ee43a7a" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T16:25:00" date-modified="2013-06-28T16:25:00" approved="false" user-name="howard15" user-email="jogreen7700@mail.com" user-ip="87.98.185.219" user-url="">
          <title type="text"><![CDATA[re: Building a game menu and loading screen in XNA]]></title>
          <content type="text"><![CDATA[As a Legal Nurse Consultant, unless you are working directly with a Covered Entity (Insurance provider, healthcare provider, pharmacy, etc.), you are a Subcontractor. With or without a Business Associate contract, once you received the PHI, you became a subcontractor who is obligated to follow HIPAAs Rules (notice they don?t call them ?guidelines?, but RULES) and who is now liable and subject to monetary fines and or criminal charges if the PHI (protected health information) is not properly protected. If you are relying on email and routine FTP (file transfer protocol) to secure your information, you are already out of compliance!  You might as well get out your checkbook and write ?HIPAA fine? in the note area and  leave lots of room for zeros.]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="23647ade-1c14-47d9-8627-47f0350b3098" date-created="2011-07-11T09:11:00" date-modified="2011-07-11T09:13:59" approved="true" post-url="/blog/post/2011/07/11/Blog-status.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Blog status]]></title>
      <content type="text"><![CDATA[<p>Work on my own blogengine is going slow but steady.</p>
<p>I currently have a SQL CE 4 database, an Odata service that exposes an entity model of the database and 2 MVC 3 projects, one for the backend and one for the frontend.</p>
<p>For now the backend will have the default asp.net mvc3 template, the frontend will be WP7 style.</p>
<p>Stay tuned!</p>]]></content>
      <post-name type="text"><![CDATA[Blog status]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="d6eca6eb-4ef0-4dfa-88f2-d19cc1c92f8b" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
      </categories>
    </post>
    <post id="3dde3697-2891-4b99-a326-ccdeefaae583" date-created="2011-06-17T14:05:00" date-modified="2011-06-17T14:07:27" approved="true" post-url="/blog/post/2011/06/17/Lightswitch-beta-tutorial.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Lightswitch beta tutorial]]></title>
      <content type="text"><![CDATA[<p>I wrote a tutorial on how to create a basic Lightswitch application without writing a single line of code</p>
<p>check it out <a href="http://www.spikie.be/blog/page/Building-a-basic-Lightswitch-application.aspx">here!</a></p>]]></content>
      <post-name type="text"><![CDATA[Lightswitch beta tutorial]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
    </post>
    <post id="b60c9cef-3755-448d-ae68-4c14796c1589" date-created="2011-05-16T09:53:00" date-modified="2011-05-20T13:01:12" approved="true" post-url="/blog/post/2011/05/16/SQL-server-CE-is-a-life-savior.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[SQL server CE is a life savior]]></title>
      <content type="text"><![CDATA[<p><span style="text-decoration: underline;"><strong>Update</strong></span></p>
<p>So the conversion to MVC3 is about done, I've uploaded the first testversion to <a href="http://www.huizedegraef.be/test">http://www.huizedegraef.be/test</a> and so far it's working fine.<br />The next step is to get the admin panel up and running, stay tuned!</p>
<p><span style="text-decoration: underline;"><strong>Original</strong></span></p>
<p>So the conversion of the Huize De Graef project from asp.net webforms to MVC3 is going really well.<br />A first testversion ran fine on my local test server using the trust configuration of the webhost (thank you SoHosted for providing the file) but unfortunatly once uploaded Entity Framework wouldn't connect to the MySQL DB, always giving security errors.</p>
<p>After spending 2 days researching and mailing with the SoHosted support team still no solution. At Techdays 2011 I heard something about SQL Server compact edition, a Microsoft SQL solution that didn't require an installation. A quick test indeed proved that MVC3 apps using EF and SQL CE work perfectly on the webhost.</p>
<p>So currently I'm converting the MySQL to SQL CE, I'm hoping to have it online by the end of the week.</p>]]></content>
      <post-name type="text"><![CDATA[SQL server CE is a life savior]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
      </categories>
    </post>
    <post id="461017c9-acb7-4cf7-bccb-5bad5742f7a3" date-created="2011-05-12T11:09:00" date-modified="2011-05-12T11:11:05" approved="true" post-url="/blog/post/2011/05/12/Bad-news-for-companies-all-over-the-world.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Bad news for companies all over the world]]></title>
      <content type="text"><![CDATA[<p>I'm guessing there will be a worldwide productivity drop, because the webbased version of Angry Birds has just gone open beta!</p>
<p>You can try it out here: <a href="http://chrome.angrybirds.com/">http://chrome.angrybirds.com/</a></p>
<p>It works really well on my old IBM Thinkpad T60 that has Visual Studio 2010, remote desktop and about 11 IE9 tabs open, so it will basically run on everything!</p>
<p><img style="margin-right: auto; margin-left: auto; display: block;" src="http://www.billrusnak.ca/wp-content/uploads/2011/01/angry-birds.png" alt="" width="345" height="176" /></p>]]></content>
      <post-name type="text"><![CDATA[Bad news for companies all over the world]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
      <comments>
        <comment id="a32dd8ae-7423-4473-9765-d7d6e7a3b486" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T17:32:38" date-modified="2013-07-02T17:32:38" approved="false" user-name="majesticcollectionsanfrancisco.org" user-email="isaac_davis@t-online.de" user-ip="91.121.10.150" user-url="">
          <title type="text"><![CDATA[re: Bad news for companies all over the world]]></title>
          <content type="text"><![CDATA[This blog was... how do I say it? Relevant!! Finally I&#39;ve found something which helped me. Cheers!

Feel free to surf to my site majestic collection san francisco [ majesticcollectionsanfrancisco.org - http://majesticcollectionsanfrancisco.org/ ]]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="f6afe01a-4581-40d9-8e44-e905cd033d55" date-created="2011-05-10T13:16:00" date-modified="2011-05-10T13:24:47" approved="true" post-url="/blog/post/2011/05/10/Blog-updates.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Blog updates]]></title>
      <content type="text"><![CDATA[<p>So keeping a blog does sound simple, but as it turns out it's not so easy to make time to update it :)<br />I'm going to try and update this more often as I continue my current projects</p>
<p>Some of my current projects:</p>
<p>- Migrating the Huize De Graef website from asp.net webforms application to MVC3 and build new admin panel<br />- Building an XNA game for Windows Phone 7<br />- Building a custom blog in MVC3</p>
<p>That's right, I'm working on my own blog software because both Wordpress and .net blogengine don't suffice for the full 100%<br />The plan is to also build a Windows Phone and Windows application to write blogposts.</p>
<p>All these projects are done in my spare time, which I don't really have a lot of, so updates will be slow. Also because I'm learning new stuff as I go.<br />So expect updates more often and hopefully finally some usefull articles as well.</p>]]></content>
      <post-name type="text"><![CDATA[Blog updates]]></post-name>
      <authors>
        <author ref="Nico" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
      </categories>
    </post>
    <post id="ab526946-9389-48ff-bd0f-6359e92e5250" date-created="2011-02-17T10:25:00" date-modified="2011-02-17T10:48:50" approved="true" post-url="/blog/post/2011/02/17/MS-certification.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[MS certification]]></title>
      <content type="text"><![CDATA[<p>I'm currently working on getting my MCPD (Microsoft Certified Professional Developer) certificate on Windows development in VS2010. I need to pass 4 exams for this:</p>
<ul>
<li><a href="http://www.microsoft.com/learning/en/us/Exam.aspx?ID=70-511&amp;Locale=en-us" target="_blank">70-511: TS: Windows Applications Development with Microsoft .NET Framework 4</a></li>
<li><a href="http://www.microsoft.com/learning/en/us/Exam.aspx?ID=70-513&amp;Locale=en-us" target="_blank">70-513: TS: Windows Communication Foundation Development with Microsoft .NET Framework 4</a></li>
<li><a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-516&amp;locale=en-us" target="_blank">70-516: TS: Accessing Data with Microsoft .NET Framework 4</a></li>
<li><a href="http://www.microsoft.com/learning/en/us/exam.aspx?ID=70-518&amp;locale=en-us" target="_blank">70-518: Pro: Designing and Developing Windows Applications Using Microsoft .NET Framework 4</a></li>
</ul>
<p>&nbsp;</p>
<p>You can follow the progress <a href="http://www.spikie.be/blog/page/In-progress.aspx">here</a></p>
<ul>
</ul>]]></content>
      <post-name type="text"><![CDATA[MS certification]]></post-name>
      <authors>
        <author ref="Nico" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="2f789809-c189-4192-a07a-00bb9aeb9b36" date-created="2011-01-05T10:21:00" date-modified="2011-01-05T10:27:34" approved="true" post-url="/blog/post/2011/01/05/null.aspx" type="normal" hasexcerpt="true" views="0" is-published="True">
      <title type="text"><![CDATA[ASP.net Dynamic Data]]></title>
      <content type="text"><![CDATA[<p>I just found an interesting article about Dynamic Data in ASP.net.</p>
<p>This technology allows you to build a SQL powered website in mere minutes. The article is build around the Adventureworks DB and uses .net framework 4.</p>
<p>The article can be found <a href="http://msdn.microsoft.com/nl-be/magazine/gg535665(en-us).aspx" target="_blank">here</a>&nbsp;(MSDN magazine)</p>]]></content>
      <post-name type="text"><![CDATA[ASP.net Dynamic Data]]></post-name>
      <excerpt type="text"><![CDATA[null]]></excerpt>
      <authors>
        <author ref="Nico" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
      </categories>
      <tags>
        <tag ref="null" />
      </tags>
      <comments>
        <comment id="3f6fa37d-a13f-4c40-926c-a5bfde2e51ca" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-25T19:16:42" date-modified="2013-06-25T19:16:42" approved="false" user-name="get twitter followers" user-email="teri_mcclain@inbox.com" user-ip="5.135.85.80" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[Hey there! Do you use Twitter? I&#39;d like to follow you if that would be okay. I&#39;m absolutely enjoying your blog and look forward to new updates.

My webpage  get twitter followers - http://twitch.mobi/article.php?id=331323 ]]></content>
        </comment>
        <comment id="4deab322-e5a5-4473-b6f9-e5e65ad73e7c" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T03:57:46" date-modified="2013-06-26T03:57:46" approved="false" user-name="http://www.oo.pisz.pl/" user-email="myrtlemoeller@gmail.com" user-ip="91.236.75.67" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[I have been surfing online more than three hours today, yet I never found any interesting article like yours. It&#39;s pretty worth enough for me. In my view, if all webmasters and bloggers made good content as you did, the net will be a lot more useful than ever before.

Stop by my webpage :: r ( http://www.oo.pisz.pl/ - http://www.oo.pisz.pl/ )]]></content>
        </comment>
        <comment id="66e6364f-8284-4aee-8364-cb1e93986c0b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-26T10:35:17" date-modified="2013-06-26T10:35:17" approved="false" user-name="imikimi photos" user-email="mitchellloveless@gawab.com" user-ip="166.78.161.49" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[hi!,I love your writing very a lot! percentage we be in contact more about your article on AOL? I require an expert in this house to resolve my problem. May be that&#39;s you! Having a look forward to look you. 
 imikimi photos - http://alawaser.com/profile-2998/info/ ]]></content>
        </comment>
        <comment id="f7c51075-606a-4664-b2a9-db7bc4cd56c1" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-28T01:39:49" date-modified="2013-06-28T01:39:49" approved="false" user-name="vigrx online" user-email="alyssamilliken@t-online.de" user-ip="94.242.241.236" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[Terrific post but I was wanting to know if you could write a litte more on this subject? I&#39;d be very thankful if you could elaborate a little bit more. Thank you!

Visit my blog post ...  vigrx online - http://vigrxplusabout.zohosites.com ]]></content>
        </comment>
        <comment id="d4299c44-9127-438b-b61f-838260f7001b" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-06-30T00:56:12" date-modified="2013-06-30T00:56:12" approved="false" user-name="proxy" user-email="geneva.kang@gmail.com" user-ip="91.237.249.171" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[This isn&#39;t to say they don&#39;t work, but they only work for the most basic of things. Using  Proxy - http://news.powerlinekingdom.com/activity/p/447295/  Switchy is simple, and is a huge time saver. You will be viewing the desired site under the IP address of the web based proxy.]]></content>
        </comment>
        <comment id="1d4f0b27-645b-4850-9e0e-2947d0247a62" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-01T02:32:53" date-modified="2013-07-01T02:32:53" approved="false" user-name="Chang" user-email="chang_seifert@yahoo.com" user-ip="46.105.76.43" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[Well to me Martial Arts means respect and discipline. I have trained in different Martial arts now for well above twenty years. I have seen numerous people appear and disappear but one other thing that I have noticed will be the respect and discipline that has changed those peoples perception of life.
Infants that have started which were on the wrong side of the tracks, always in trouble and no idea how to respect other kids. Place them in a controlled environment with discipline and fighting and they soon start to understand.
Martial arts is a great technique for kids in their teens and adults to get rid of their aggression without hurting or bullying anyone.

Also visit my web-site; tai chi for beginners ( Chang - http://indoorxtreme.co.uk/shop/disciplines/muay-thai.html )]]></content>
        </comment>
        <comment id="2e759ac7-ce04-490d-ae0e-f8ae78cbccb4" parentid="00000000-0000-0000-0000-000000000000" date-created="2013-07-02T14:38:16" date-modified="2013-07-02T14:38:16" approved="false" user-name="writing companies" user-email="kazuko-cronin@t-online.de" user-ip="91.239.15.161" user-url="">
          <title type="text"><![CDATA[re: ASP.net Dynamic Data]]></title>
          <content type="text"><![CDATA[An interesting discussion is worth comment. There&#39;s no doubt that that you should write more about this subject matter, it might not be a taboo subject but generally folks don&#39;t speak about these issues. To the next! Best wishes!!

my web-site  writing companies - http://advancedwriting.net/ ]]></content>
        </comment>
      </comments>
      <trackbacks />
    </post>
    <post id="a16937b9-3b81-43fa-bfe7-98cfb404dda9" date-created="2010-12-29T13:36:00" date-modified="2010-12-29T13:41:49" approved="true" post-url="/blog/post/2010/12/29/Techdays-Belgium-2011.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Techdays Belgium 2011]]></title>
      <content type="text"><![CDATA[<p>The Belgian&nbsp;Microsoft Techdays 2011 will take place 26-27-28 April at Metropolis Antwerp.</p>
<p>I'll be attending, hope it will be as good as last year.<br />Things I look forward to:</p>
<ul>
<li>Silverlight 5</li>
<li>C# 5 (asynchrony in particular)</li>
<li>HTML5 and CSS3</li>
<li>Windows Phone 7 development</li>
<li>Hopefully some XNA session</li>
</ul>
<p>Info on the techdays can be found <a href="http://www.microsoft.com/belux/techdays/2011/" target="_blank">here</a></p>]]></content>
      <post-name type="text"><![CDATA[Techdays Belgium 2011]]></post-name>
      <authors>
        <author ref="Nico" />
      </authors>
      <categories>
        <category ref="6561d219-11f8-4d48-bb0e-8a9078c991af" />
        <category ref="d7d81894-24cc-4de8-a635-0fa0642a97e9" />
        <category ref="79f974f3-46fe-4e57-ad9a-6d9158c113a6" />
        <category ref="22302a23-f019-4a09-80a2-91b58db4d241" />
        <category ref="08fb4670-7d89-4feb-bc58-6efb5ec22118" />
      </categories>
    </post>
    <post id="df782440-b7e2-4213-9a8f-f97513dd6659" date-created="2010-12-08T14:11:00" date-modified="2010-12-08T14:13:37" approved="true" post-url="/blog/post/2010/12/08/Back-to-BlogEngine.aspx" type="normal" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Back to BlogEngine]]></title>
      <content type="text"><![CDATA[<p>I reverted my blog back to BlogEngine.net, the newest version has everything I need. And I felt really dirty using a PHP weblog solution <img title="Smile" src="http://www.spikie.be/editors/tiny_mce_3_3_9_2/plugins/emotions/img/smiley-smile.gif" border="0" alt="Smile" /></p>
<p>So back to ASP.net now, my tutorial is converted, my Twitter feed is connected.</p>
<p>Comments can be placed using a variety of social networks.</p>]]></content>
      <post-name type="text"><![CDATA[Back to BlogEngine]]></post-name>
      <authors>
        <author ref="Admin" />
      </authors>
    </post>
  </posts>
  <posts>
    <post id="470c5697-6499-4ee3-8dc9-327aee152953" date-created="2011-02-23T14:33:37" date-modified="2011-07-15T12:59:52" approved="true" post-url="/blog/page/Acquired-Certificates.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Acquired Certificates]]></title>
      <content type="text"><![CDATA[<p><span style="font-size: small;"><br /></span></p>]]></content>
      <post-name type="text"><![CDATA[Acquired Certificates]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="150de42f-4f83-4a6d-aff1-d592a13b2690" date-created="2011-05-31T22:23:35" date-modified="2012-01-04T10:58:49" approved="true" post-url="/blog/page/Building-a-basic-Lightswitch-application.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a basic Lightswitch application]]></title>
      <content type="text"><![CDATA[<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">Microsoft LightSwitch is an IDE that can build business applications without writing any code. The screens are generated from the data that is used. In this small article I will walk you through creating a simple application.</span></span></p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">First some information about LightSwitch. LS builds 3-tier applications, the interface is build using Microsoft Silverlight in combination with WCF RIA services and Entity Framework, the default datastore for LS is SQL server express. LS also supports data from SQL Azure, MS Sharepoint and SQL server. As for language, support for Visual Basic and C# is build in. LS is currently in its second beta version, a full release is scheduled for end of 2011.</span></span></p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">I&rsquo;m going to create an application that lists superheroes, their owner, powers and city of operations. I will not use an existing database, so LS will use a newly created SQL server express DB.<br /> My development machine is running Windows 7 professional 64-bit with Visual Studio 2010 enterprise and sql server express 2008 R2.</span></span></p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">Naturally we kick this off by starting a new project in VS2010 so go to File &gt; New &gt; Project, select Lightswitch as projecttype and select a C# Lightswitch project. Give it a name and click OK.</span></span></p>
<p style="text-align: center;"><br /> <a href="http://i56.tinypic.com/122ddsh.jpg" target="_blank"><img style="margin-right: auto; margin-left: auto; display: block;" src="http://i56.tinypic.com/122ddsh.jpg" alt="project selection" width="545" height="307" /></a>(Click to enlarge)</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">After the project finishes loading we find ourselves in the very minimalistic interface that is Microsoft Lightswitch, we only have 2 options on the start screen, Create new table or Attach to external data source. These options speak for themselves, create new table creates a new sql server express database for this project, attach to external data source allows you to connect to a sql database, a sharepoint<span style="mso-spacerun: yes;">&nbsp; </span>database or a sql azure database. We will create a new database for our superhero collection, so select Create new table.</span></span></p>
<p style="text-align: center;"><br /><a href="http://i52.tinypic.com/zyhrhz.jpg" target="_blank"><img style="margin-right: auto; margin-left: auto; display: block;" src="http://i52.tinypic.com/zyhrhz.jpg" alt="initial screen" width="545" height="307" /></a>(click to enlarge)</p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">This opens up a graphical table design, start by naming the table and add columns like in the screenshot. In the properties of the ID column deselect the Display by default checkbox, this makes sure that the ID field isn&rsquo;t shown in the application.</span></span></p>
<p style="text-align: center;"><br /><a href="http://i56.tinypic.com/m7tlpj.jpg" target="_blank"><img src="http://i56.tinypic.com/m7tlpj.jpg" alt="initial screen" width="545" height="307" /></a><br /> (click to enlarge)</p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt; text-align: left;"><span style="font-size: small;"><span style="font-family: Calibri;">Create 2 more tables, City and Owner, make them like the screenshots below.</span></span></p>
<p style="text-align: center;"><br /><a href="http://i53.tinypic.com/2daydxd.jpg" target="_blank"><img style="margin-right: auto; margin-left: auto; display: block;" src="http://i53.tinypic.com/2daydxd.jpg" alt="initial screen" width="545" height="307" /></a>(click to enlarge)</p>
<p style="text-align: center;"><a href="http://i56.tinypic.com/2ccrygg.jpg" target="_blank"><img style="margin-right: auto; margin-left: auto; display: block;" src="http://i56.tinypic.com/2ccrygg.jpg" alt="initial screen" width="545" height="307" /></a>(click to enlarge)</p>
<p style="text-align: center;"><a href="http://www.spikie.be/blog/page/Building-a-basic-Lightswitch-application-Page-2.aspx">Next Page --&gt;</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a basic Lightswitch application]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="a40511fc-ffb5-455e-a5b7-b567f8f0a1cf" date-created="2011-05-31T22:55:45" date-modified="2011-06-17T14:03:06" approved="true" post-url="/blog/page/Building-a-basic-Lightswitch-application-Page-2.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a basic Lightswitch application - Page 2]]></title>
      <content type="text"><![CDATA[<p><span style="font-family: Times New Roman; font-size: small;"> </span><span style="font-size: small;"><span style="font-family: Calibri;">When you&rsquo;re in the Owner design screen, click &ldquo;Add relationship&rdquo;, with this function you can create foreign keys in a table. Change the settings so they match the screenshot. </span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /> <a href="http://i56.tinypic.com/314sc9c.jpg" target="_blank"><img src="http://i56.tinypic.com/314sc9c.jpg" alt="initial screen" width="429" height="285" /></a><br />(click to enlarge)</p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">This screen really makes relationships easy as it explains really well what you&rsquo;re relationship will do. Once you add it you will notice that a new column is created in the 2 tables. Next up is the Hero &ndash; City relation, open up the City design screen from the Solution explorer, click add new relationship and follow the screenshot below.</span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /><a href="http://i53.tinypic.com/2mqvt05.jpg" target="_blank"><img src="http://i53.tinypic.com/2mqvt05.jpg" alt="initial screen" width="429" height="285" /></a><br />(click to enlarge)</p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">So, that&rsquo;s quite enough for data, let&rsquo;s move on to creating the screens!</span></span></p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">In the Solution Explorer, right click the Screens folder and click Add Screen. In this screen you can select a template and the data that will be shown in the screen. Select the List and Detail screen and the Hero table for data.</span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /><a href="http://i55.tinypic.com/hukdcm.jpg" target="_blank"><img src="http://i55.tinypic.com/hukdcm.jpg" alt="initial screen" width="504" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">At this point we have a runnable application, when you run it you will see a clean Silverlight interface that allows you to add superheroes and view an entire list. The only problem here is that a superhero requires an owner but we don&rsquo;t have the option to add owners yet, so let&rsquo;s fix this small problem and start building our superhero list!</span></span></p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">Add a screen with a &ldquo;New Data Screen&rdquo; template and choose the Owner table like in the screenshot below.</span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /><a href="http://i54.tinypic.com/2dl3ne1.jpg" target="_blank"><img src="http://i54.tinypic.com/2dl3ne1.jpg" alt="initial screen" width="504" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="mso-no-proof: yes;"><span style="font-size: small;"><span style="font-family: Calibri;">Now when we execute the application there&rsquo;s a new option on the left side for adding an owner, let&rsquo;s add one now. <span style="line-height: 115%; font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;; font-size: 11pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: Calibri; mso-fareast-theme-font: minor-latin; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: &quot;Times New Roman&quot;; mso-bidi-theme-font: minor-bidi; mso-no-proof: yes; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA;">Just enter a name, I used DC Comics and Marvel Comics, and click the save button. </span></span></span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /><a href="http://i55.tinypic.com/2ibkuc2.jpg" target="_blank"><img src="http://i55.tinypic.com/2ibkuc2.jpg" alt="initial screen" width="545" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="mso-no-proof: yes;"><span style="font-size: small;"><span style="font-family: Calibri;">Now when we go back to the hero list and click on the New button, the selection list will be filled with the owners we entered a minute ago.</span></span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /><a href="http://i53.tinypic.com/2zqajad.jpg" target="_blank"><img src="http://i53.tinypic.com/2zqajad.jpg" alt="initial screen" width="545" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;"><span style="font-family: Times New Roman; font-size: small;"> </span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">I entered the details of Superman here, as soon as the OK button is clicked the new record will be shown in the list and the details boxes will be filled as well.</span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"> </span><br /><a href="http://i54.tinypic.com/2uyskzk.jpg" target="_blank"><img src="http://i54.tinypic.com/2uyskzk.jpg" alt="initial screen" width="545" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: center;">&nbsp;<a href="http://www.spikie.be/blog/page/Building-a-basic-Lightswitch-application.aspx">&lt;-- Previous Page</a>&nbsp; -&nbsp; <a href="http://www.spikie.be/blog/page/Building-a-basic-Lightswitch-application-Page-3.aspx">Next Page --&gt;</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a basic Lightswitch application - Page 2]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="94be409c-296b-48ce-ae21-1a6591ea6e62" date-created="2011-05-31T23:12:39" date-modified="2012-01-04T10:58:40" approved="true" post-url="/blog/page/Building-a-basic-Lightswitch-application-Page-3.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a basic Lightswitch application - Page 3]]></title>
      <content type="text"><![CDATA[<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">Notice that the list only shows the firstname of the hero, I don&rsquo;t really like that, I want the hero name to be shown there, let&rsquo;s fix it.</span></span></p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">When the application is running in debug mode you will see a &ldquo;Design screen&rdquo; button in the upper right corner, when you click it, the application will pause and go in design mode, here we will change the list lay-out, but first a small theory lesson.</span></span></p>
<p>&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">Lightswitch applications are build in Silverlight, a Silverlight UI is build using XAML and the power of XAML lies partly in nesting controls and that is exactly what we have here. In the List and Details screen we have a Grid with 2 columns, the left column contains a list and the list contains a summary item. The summary item is the firstname that we saw when running the application, we will switch it to a column lay-out.</span></span></p>
<p style="text-align: center;"><br /><a href="http://i54.tinypic.com/2d9rz1l.jpg" target="_blank"><img src="http://i54.tinypic.com/2d9rz1l.jpg" alt="initial screen" width="205" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">So when we&rsquo;re in the design mode, click on the small arrow of the summary item and select Columns layout. Notice that now all fields are shown, so delete all unnecessary columns and click the save button in the upper right corner.</span></span></p>
<p style="text-align: center;"><br /><a href="http://i51.tinypic.com/2lw7m84.jpg" target="_blank"><img src="http://i51.tinypic.com/2lw7m84.jpg" alt="initial screen" width="205" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">Behold the result:</span></span></p>
<p style="text-align: center;"><br /><a href="http://i56.tinypic.com/55ghfm.jpg" target="_blank"><img src="http://i56.tinypic.com/55ghfm.jpg" alt="initial screen" width="545" height="307" /></a><br />(click to enlarge)</p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">All right, sit back take a deep breath and relax. Let&rsquo;s look back at what we&rsquo;ve done in this short time, we&rsquo;ve created a database with relationships, build a data driven application, added a UI that allows us to view, edit and add data.<br /> All this, without writing any piece of code and that right there is the power of Microsoft Lightswitch.</span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">What we&rsquo;ve done here is barely scratching the surface of Lightswitch. You can dive into the code and extend it, write your own screen templates, add calculated fields, add data validation and so on. The possibilities are huge. Will this ever be used to create business size applications? I don&rsquo;t now, future will tell, but what I can tell you is that it will never replace a competent developer, applications the size of those that I deal with daily can never be designed through a graphical environment like Lightswitch. So have no fear fellow developers world-wide, our services will always be needed </span><span style="font-family: Wingdings; mso-ascii-font-family: Calibri; mso-ascii-theme-font: minor-latin; mso-hansi-font-family: Calibri; mso-hansi-theme-font: minor-latin; mso-char-type: symbol; mso-symbol-font-family: Wingdings;"><span style="mso-char-type: symbol; mso-symbol-font-family: Wingdings;">J</span></span><span style="font-family: Calibri;">.</span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">I hope you enjoyed this very basic explanation of Microsoft Lightswitch, please note that this is still beta software and as such does not represent the final product. As a final exercise, please try to add the city logic to the application yourself so our heroes can have cities to defend. You can find the source code, including the city logic, attached to this article.</span></span></p>
<p style="text-align: left;">&nbsp;</p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;">If you have any questions, please leave a comment! </span></span></p>
<p class="MsoNormal" style="margin: 0cm 0cm 10pt;"><span style="font-size: small;"><span style="font-family: Calibri;"><a href="http://cid-5a345bb15e973473.office.live.com/browse.aspx/Demos" target="_blank">Download source code</a></span></span></p>
<p style="text-align: center;"><span style="font-family: Times New Roman; font-size: small;"><a href="http://www.spikie.be/blog/page/Building-a-basic-Lightswitch-application-Page-2.aspx">&nbsp;&lt;-- Previous Page</a></span></p>]]></content>
      <post-name type="text"><![CDATA[Building a basic Lightswitch application - Page 3]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="551cce67-02f8-45dc-9399-d8ccb991b4e0" date-created="2011-07-13T20:10:01" date-modified="2013-09-04T19:47:30" approved="true" post-url="/blog/page/Building-a-main-menu-and-loading-screens-in-XNA.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a main menu and loading screens in XNA]]></title>
      <content type="text"><![CDATA[<div>There are probably many other ways to build menus and loading screens in XNA game development but this is how I currently do it.</div>
<div>For this guide you need:</div>
<ul>
<li>XNA 4.0</li>
<li>Visual Studio 2010 or express edition</li>
<li>C# and some XNA knowledge</li>
</ul>
<div>&nbsp;</div>
<div>My full project is linked at the end of this guide, this code is for demo purposes, feel free to use or adjust it as you see fit. If this guide helps you you can always help my reputation by mentioning me on your blog, Twitter or other social media.</div>
<div>All right, let's get things started! This guide builds a Windows game but also works for Windows Phone 7 and Xbox360 games, just replace the mouse code with controller or touch code.</div>
<div>In Visual Studio start a new XNA game by selecting File &gt; New &gt; Project. In the XNA templates select "Windows Game (4.0)" and name it XNAMenuLoadingDemo.</div>
<div><a href="http://i55.tinypic.com/29dw87b.jpg" target="_blank"><img style="display: block; float: none; margin-left: auto; margin-right: auto;" src="http://i55.tinypic.com/29dw87b.jpg" alt="" width="289" height="200" /></a></div>
<div><br />Once the project has loaded you have created a Windows game, if we run this now all we see is a blue screen (this is a good thing in this case). As you can see the mouse pointer doesn't work in the game, the menu we'll create in this guide uses the mouse so we will have to activate it first. This is done in the Initialize method by adding this line of code:</div>
<div>&nbsp;</div>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="rem">//enable the mousepointer</span></pre>
<pre><span class="lnum"> 2: </span>IsMouseVisible = <span class="kwrd">true</span>;</pre>
</div>
<p>Next step is adding some global variables that will contain textures. <br />Global variables are declared right after the opening bracket of the class, before the constructor. There should allready be 2 global variables in the game called &ldquo;graphics&rdquo; and &ldquo;spriteBatch&rdquo;, place the following code after these two:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">private Texture2D</span>  orb;</pre>
<pre><span class="lnum"> 2: </span><span class="kwrd">private Texture2D</span> startButton;</pre>
<pre class="alt"><span class="lnum"> 3: </span><span class="kwrd">private Texture2D</span> exitButton;</pre>
<pre><span class="lnum"> 4: </span><span class="kwrd">private Texture2D</span> pauseButton;</pre>
<pre class="alt"><span class="lnum"> 5: </span><span class="kwrd">private Texture2D</span> resumeButton;</pre>
<pre><span class="lnum"> 6: </span><span class="kwrd">private Texture2D</span> loadingScreen;</pre>
</div>
<p><span style="font-family: Arial;">As you may notice we declared five textures for buttons, that&rsquo;s because in XNA there&rsquo;s no such thing as a button. <br />So as a workaround we create images that look like buttons and make them <br />do something.</span></p>
<p>All right, next step is declaring some vectors. Vectors are often used in XNA for positioning elements because a Vector2 has two properties called X and Y. Add the following lines of code under the textures:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">private Vector2</span> orbPosition;</pre>
<pre><span class="lnum"> 2: </span><span class="kwrd">private Vector2</span> startButtonPosition;</pre>
<pre class="alt"><span class="lnum"> 3: </span><span class="kwrd">private Vector2</span> exitButtonPosition;</pre>
<pre><span class="lnum"> 4: </span><span class="kwrd">private Vector2</span> resumeButtonPosition;</pre>
</div>
<p>I deliberately only use vectors to position three of the five buttons because I want to show both ways of positioning an element in an XNA game.</p>
<p>Next up is some floats for the game:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">private</span> <span class="kwrd">const</span> <span class="kwrd">float</span> OrbWidth = 50f;</pre>
<pre><span class="lnum"> 2: </span><span class="kwrd">private</span> <span class="kwrd">const</span> <span class="kwrd">float</span> OrbHeight = 50f;</pre>
<pre class="alt"><span class="lnum"> 3: </span><span class="kwrd">private</span> <span class="kwrd">float</span> speed = 1.5f;</pre>
</div>
<p>The game that we&rsquo;re building won&rsquo;t be anything playable, it&rsquo;s just a red orb bouncing back and forth horizontally. But it will have a start menu, a loading screen and a pause button that are fully functional. The floats that we declared are contain the dimensions of the orb and the speed by which the orb moves back and forth.</p>
<p>We&rsquo;re almost there, just a few more variables and we can start making some magic happen. Add these variables:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">private Thread</span> backgroundThread;</pre>
<pre><span class="lnum"> 2: </span><span class="kwrd">private</span> <span class="kwrd">bool</span> isLoading = <span class="kwrd">false</span>;</pre>
<pre class="alt"><span class="lnum"> 3: </span><span class="kwrd">MouseState</span>  mouseState;</pre>
<pre><span class="lnum"> 4: </span><span class="kwrd">MouseState</span>  previousMouseState;</pre>
<pre>&nbsp;</pre>
</div>
<p>I will explain about these variables when we use them.</p>
<p>Now before we continue, let me explain something about XNA that you maybe already know. <br />XNA has 2 specific methods called Update() and Draw(). These two methods are called 60 times per second in Windows and Xbox360 games and 30 times per second in Windows Phone 7 games. All the game&rsquo;s logic should go in the Update() method while everything concerning what is showing on the screen should go in the Draw() method. So a game doesn&rsquo;t really have an implementation for menus and pausing, it&rsquo;s up to the developer to create something that will take care of that.</p>
<p>The method I&rsquo;m describing here uses game states, this is something that you can find in the game examples on <a href="http://create.msdn.com">http://create.msdn.com</a>&nbsp;&nbsp;</p>
<p>Game state isn&rsquo;t something that&rsquo;s build in to XNA, we have to build it ourselves. Best way to do this is by using an Enumerator. This code goes in the same place as the global variables we declared a minute ago.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">enum</span> GameState</pre>
<pre><span class="lnum"> 2: </span>        {</pre>
<pre class="alt"><span class="lnum"> 3: </span>            StartMenu,</pre>
<pre><span class="lnum"> 4: </span>            Loading,</pre>
<pre class="alt"><span class="lnum"> 5: </span>            Playing,</pre>
<pre><span class="lnum"> 6: </span>            Paused</pre>
<pre class="alt"><span class="lnum"> 7: </span>        }</pre>
</div>
<div class="csharpcode">&nbsp;</div>
<p><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-2.aspx" target="_top">Let's go on to the next page where we'll finally see something happen -&gt;</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a main menu and loading screens in XNA]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="5aae8f1f-9b7e-41e8-827f-dbc314b9609b" date-created="2011-07-14T14:24:24" date-modified="2013-09-04T19:49:15" approved="true" post-url="/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-2.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 2]]></title>
      <content type="text"><![CDATA[<p>All right, now we have our variables in place. In case you&rsquo;ve missed it, you can find page 1 <a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA.aspx">here</a>.</p>
<p>We&rsquo;ll start by building the bouncing orb, then adding in the start menu, the loading screen and the pause button.</p>
<p>Normally you would load all textures and content in the LoadContent() method, this method is called once when the game launches. This is all good when the game is very small and has no menu. We will build a LoadGame() method that does all the loading of game textures and at the end of this guide the method will be called when the player clicks start.</p>
<p>As said, the menu will be introduced later, for now create the LoadGame() method right under the Draw() method.</p>
<div class="csharpcode">
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">void</span> LoadGame()</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">//load the game images into the content pipeline</span></pre>
<pre><span class="lnum"> 4: </span>    orb = Content.Load&lt;Texture2D&gt;(<span class="str">@"orb"</span>);</pre>
<pre class="alt"><span class="lnum"> 5: </span>    </pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//set the position of the orb in the middle of the gamewindow</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    orbPosition = <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - (OrbWidth / 2),</pre>
<pre><span class="lnum"> 8: </span>                    (GraphicsDevice.Viewport.Height / 2) - (OrbHeight / 2));</pre>
<pre class="alt"><span class="lnum"> 9: </span>}</pre>
</div>
</div>
<p>Line number 4 loads an image into the content pipeline as a 2D texture. To do this, we need to add a texture to our project. Save this picture to your pc and remember it&rsquo;s location.</p>
<p><img style="display: block; float: none; margin-left: auto; margin-right: auto;" src="http://i53.tinypic.com/29nfomc.jpg" alt="" /></p>
<p>This is the orb that&rsquo;ll be moving back and forth. To use it, right-click the content project in your solution explorer, select Add &gt; existing file and select the image.</p>
<p>Line 7 and 8 set the position of the orb, initially this will be the middle of the gamescreen. This is done by taking the width and height from the screen and dividing it by two. Since this will place the upper left corner of the image in the middle we need to substract half the image width and height from the respective width and height.</p>
<p>Now we have a method that loads something in our content pipeline, now we need to call this method. For now we&rsquo;ll just use the Initialize() method for this. Change it so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Initialize()</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>     <span class="rem">//enable the mousepointer</span></pre>
<pre><span class="lnum"> 4: </span>     IsMouseVisible = <span class="kwrd">true</span>;</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>     LoadGame();</pre>
<pre class="alt"><span class="lnum"> 7: </span>}</pre>
</div>
<p>This will call the LoadGame() method as soon as the game starts. So now we have a method that loads a texture, we call the method when the game launches, all that&rsquo;s left is to draw the texture 60 times per second. To get this done, change the Draw() method so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Draw(<span class="kwrd">GameTime</span> gameTime)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    GraphicsDevice.Clear(<span class="kwrd">Color</span>.CornflowerBlue);</pre>
<pre><span class="lnum"> 4: </span>    spriteBatch.Begin();</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//draw the orb</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    spriteBatch.Draw(orb, orbPosition, <span class="kwrd">Color</span>.White);</pre>
<pre><span class="lnum"> 8: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 9: </span>    spriteBatch.End();</pre>
<pre><span class="lnum"> 10: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 11: </span>    <span class="kwrd">base</span>.Draw(gameTime);</pre>
<pre><span class="lnum"> 12: </span>}</pre>
</div>
<p>SpriteBatch is an XNA specific class that will take care of rendering everything on the screen. It has a Begin() and an End() method that need to be called, everything between those two methods will be rendered onscreen. It takes three parameters, a texture, a position vector and a color. Color.White says the spritebatch to render the texture in it&rsquo;s original color.</p>
<p>If we run the game now we see a red orb standing in the middle of the screen.</p>
<p><a href="http://i51.tinypic.com/8y7228.jpg" target="_blank"><img style="display: block; float: none; margin-left: auto; margin-right: auto;" src="http://i51.tinypic.com/8y7228.jpg" alt="" width="395" height="249" /></a></p>
<p>Now let&rsquo;s get that little red lazy bum moving! Moving thing around in a game is done in the Update() method. Change it so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Update(GameTime gameTime)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">// Allows the game to exit</span></pre>
<pre><span class="lnum"> 4: </span>    <span class="kwrd">if</span> (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)</pre>
<pre class="alt"><span class="lnum"> 5: </span>        <span class="kwrd">this</span>.Exit();</pre>
<pre><span class="lnum"> 6: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 7: </span>    <span class="rem">//move the orb</span></pre>
<pre><span class="lnum"> 8: </span>    orbPosition.X += speed;</pre>
<pre class="alt"><span class="lnum"> 9: </span>&nbsp;</pre>
<pre><span class="lnum"> 10: </span>    <span class="rem">//prevent out of bounds</span></pre>
<pre class="alt"><span class="lnum"> 11: </span>    <span class="kwrd">if</span> (orbPosition.X &gt; (GraphicsDevice.Viewport.Width - OrbWidth) || orbPosition.X &lt; 0)</pre>
<pre><span class="lnum"> 12: </span>    {</pre>
<pre class="alt"><span class="lnum"> 13: </span>        speed *= -1;</pre>
<pre><span class="lnum"> 14: </span>    } </pre>
<pre class="alt"><span class="lnum"> 15: </span>    </pre>
<pre><span class="lnum"> 16: </span>    <span class="kwrd">base</span>.Update(gameTime);</pre>
<pre class="alt"><span class="lnum"> 17: </span>}</pre>
</div>
<p>Line 8 increments the X value of the orb&rsquo;s position with the value of the speed variable 60 times every second, at that speed it shows a very fluent animation. The if construction on line 11 checks if the orb goes out of sight and prevents it by inverting the speed value so it makes the orb go the other way.</p>
<p>So our gameplay is finished now, on the next page we will finally introduce the start menu.</p>
<p><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-3.aspx" target="_top">Hurry on to page 3!</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 2]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="21a11d3d-b948-4c6e-b066-4bda193718ca" date-created="2011-07-14T15:11:36" date-modified="2013-09-04T19:49:38" approved="true" post-url="/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-3.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 3]]></title>
      <content type="text"><![CDATA[<ul>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA.aspx">Page 1</a></li>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA&ndash;Page-2.aspx">Page 2</a></li>
</ul>
<p>Finally the part why we&rsquo;re all here, adding a main menu in an XNA game.</p>
<p>First we need to remove the call to the LoadGame() method in the Initialize() method and set an initial game state. Change the Initialize method so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Initialize()</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">//enable the mousepointer</span></pre>
<pre><span class="lnum"> 4: </span>    IsMouseVisible = <span class="kwrd">true</span>;</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//set the position of the buttons</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    startButtonPosition = <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - 50, 200);</pre>
<pre><span class="lnum"> 8: </span>    exitButtonPosition = <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - 50, 250);</pre>
<pre class="alt"><span class="lnum"> 9: </span>&nbsp;</pre>
<pre><span class="lnum"> 10: </span>    <span class="rem">//set the gamestate to start menu</span></pre>
<pre class="alt"><span class="lnum"> 11: </span>    gameState = GameState.StartMenu;</pre>
<pre><span class="lnum"> 12: </span>    </pre>
<pre class="alt"><span class="lnum"> 13: </span>    <span class="kwrd">base</span>.Initialize();</pre>
<pre><span class="lnum"> 14: </span>}</pre>
</div>
<p>Next we need to load the textures for our two menu buttons, one button to start the game and one to exit the game. This is done in the LoadContent() method. Change it so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> LoadContent()</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">// Create a new SpriteBatch, which can be used to draw textures.</span></pre>
<pre><span class="lnum"> 4: </span>    spriteBatch = <span class="kwrd">new</span> <span class="kwrd">SpriteBatch</span>(GraphicsDevice);</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//load the buttonimages into the content pipeline</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    startButton = <span class="kwrd">Content</span>.Load&lt;<span class="kwrd">Texture2D</span>&gt;(<span class="str">@"start"</span>);</pre>
<pre><span class="lnum"> 8: </span>    exitButton = <span class="kwrd">Content</span>.Load&lt;<span class="kwrd">Texture2D</span>&gt;(<span class="str">@"exit"</span>);</pre>
<pre class="alt"><span class="lnum"> 9: </span>}</pre>
</div>
<p>Off course we need to have the button images in our Content project. Save them here and add them to the project.</p>
<p align="center"><img src="http://i54.tinypic.com/o0t73n.jpg" alt="" /></p>
<p align="center"><img src="http://i55.tinypic.com/w8xj86.jpg" alt="" /></p>
<p>Now we need to draw the buttons in the Draw() method and this is where the magic happens.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Draw(GameTime gameTime)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    GraphicsDevice.Clear(Color.CornflowerBlue);</pre>
<pre><span class="lnum"> 4: </span>    spriteBatch.Begin();</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//draw the start menu</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    <span class="kwrd">if</span> (gameState == GameState.StartMenu)</pre>
<pre><span class="lnum"> 8: </span>    {</pre>
<pre class="alt"><span class="lnum"> 9: </span>        spriteBatch.Draw(startButton, startButtonPosition, Color.White);</pre>
<pre><span class="lnum"> 10: </span>        spriteBatch.Draw(exitButton, exitButtonPosition, Color.White);</pre>
<pre class="alt"><span class="lnum"> 11: </span>    }</pre>
<pre><span class="lnum"> 12: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 13: </span>    <span class="rem">//draw the the game when playing</span></pre>
<pre><span class="lnum"> 14: </span>    <span class="kwrd">if</span> (gameState == GameState.Playing)</pre>
<pre class="alt"><span class="lnum"> 15: </span>    {</pre>
<pre><span class="lnum"> 16: </span>        <span class="rem">//orb</span></pre>
<pre class="alt"><span class="lnum"> 17: </span>        spriteBatch.Draw(orb, orbPosition, Color.White);</pre>
<pre><span class="lnum"> 18: </span>    }</pre>
<pre class="alt"><span class="lnum"> 19: </span>&nbsp;</pre>
<pre><span class="lnum"> 20: </span>    spriteBatch.End();</pre>
<pre class="alt"><span class="lnum"> 21: </span>    <span class="kwrd">base</span>.Draw(gameTime);</pre>
<pre><span class="lnum"> 22: </span>}</pre>
</div>
<p>By checking the game&rsquo;s state we can determine what to draw. The if construction on line 7 will be entered when the game launches because we specified that state in the Initialize() method, later when we click the start button the state will change to Playing and the if on line 14 will be executed.</p>
<p>If we launch the game now we&rsquo;ll see the menu but the buttons don&rsquo;t work yet. First we&rsquo;ll need to add a new method that&rsquo;ll handle the click events. Create this method:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">void</span> MouseClicked(<span class="kwrd">int</span> x, <span class="kwrd">int</span> y)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">//creates a rectangle of 10x10 around the place where the mouse was clicked</span></pre>
<pre><span class="lnum"> 4: </span>    Rectangle mouseClickRect = <span class="kwrd">new</span> Rectangle(x, y, 10, 10);</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//check the startmenu</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    <span class="kwrd">if</span> (gameState == GameState.StartMenu)</pre>
<pre><span class="lnum"> 8: </span>    {</pre>
<pre class="alt"><span class="lnum"> 9: </span>        Rectangle startButtonRect = <span class="kwrd">new</span> Rectangle((<span class="kwrd">int</span>)startButtonPosition.X,</pre>
<pre><span class="lnum"> 10: </span>                                    (<span class="kwrd">int</span>)startButtonPosition.Y, 100, 20);</pre>
<pre class="alt"><span class="lnum"> 11: </span>        Rectangle exitButtonRect = <span class="kwrd">new</span> Rectangle((<span class="kwrd">int</span>)exitButtonPosition.X, </pre>
<pre><span class="lnum"> 12: </span>                                    (<span class="kwrd">int</span>)exitButtonPosition.Y, 100, 20);</pre>
<pre class="alt"><span class="lnum"> 13: </span>&nbsp;</pre>
<pre><span class="lnum"> 14: </span>        <span class="kwrd">if</span> (mouseClickRect.Intersects(startButtonRect)) <span class="rem">//player clicked start button</span></pre>
<pre class="alt"><span class="lnum"> 15: </span>        {</pre>
<pre><span class="lnum"> 16: </span>            <span class="rem">//gameState = GameState.Loading;</span></pre>
<pre class="alt"><span class="lnum"> 17: </span>            gameState = GameState.Playing;</pre>
<pre><span class="lnum"> 18: </span>            isLoading = <span class="kwrd">true</span>;</pre>
<pre class="alt"><span class="lnum"> 19: </span>        }</pre>
<pre><span class="lnum"> 20: </span>        <span class="kwrd">else</span> <span class="kwrd">if</span> (mouseClickRect.Intersects(exitButtonRect)) <span class="rem">//player clicked exit button</span></pre>
<pre class="alt"><span class="lnum"> 21: </span>        {</pre>
<pre><span class="lnum"> 22: </span>            Exit();</pre>
<pre class="alt"><span class="lnum"> 23: </span>        }</pre>
<pre><span class="lnum"> 24: </span>    }</pre>
<pre class="alt"><span class="lnum"> 25: </span>}</pre>
</div>
<p>So what this does is putting a rectangle around the two buttons and putting a rectangle around the point where the mouse clicked. Then the method checks if those two rectangles intersect, if they do a button was clicked.</p>
<p>Next we need to update the Update() method again so we can check there if the mouse was clicked. Add this code right above base.Update(GameTime) in the Update() method</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="rem">//wait for mouseclick</span></pre>
<pre><span class="lnum"> 2: </span>mouseState = Mouse.GetState();</pre>
<pre class="alt"><span class="lnum"> 3: </span><span class="kwrd">if</span> (previousMouseState.LeftButton == ButtonState.Pressed &amp;&amp; </pre>
<pre><span class="lnum"> 4: </span>    mouseState.LeftButton == ButtonState.Released)</pre>
<pre class="alt"><span class="lnum"> 5: </span>{</pre>
<pre><span class="lnum"> 6: </span>    MouseClicked(mouseState.X, mouseState.Y);</pre>
<pre class="alt"><span class="lnum"> 7: </span>}</pre>
<pre><span class="lnum"> 8: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 9: </span>previousMouseState = mouseState;</pre>
<pre><span class="lnum"> 10: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 11: </span><span class="kwrd">if</span> (gameState == GameState.Playing &amp;&amp; isLoading)</pre>
<pre><span class="lnum"> 12: </span>{</pre>
<pre class="alt"><span class="lnum"> 13: </span>    LoadGame();</pre>
<pre><span class="lnum"> 14: </span>    isLoading = <span class="kwrd">false</span>;</pre>
<pre class="alt"><span class="lnum"> 15: </span>}</pre>
</div>
<p>The if construction on line 3 will be entered when the previous mouse state was pressed and the current is released. The if construction on line 11 will be entered when we need to load the orb texture. Before we can test this we need the previousMouseState to have an initial value. Add this code in the Initialize() method right above base.Initialize():</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="rem">//get the mouse state</span></pre>
<pre><span class="lnum"> 2: </span>mouseState = Mouse.GetState();</pre>
<pre class="alt"><span class="lnum"> 3: </span>previousMouseState = mouseState;</pre>
</div>
<p>When we launch the game and click the start button the orb will start moving and our implementation of a main menu is complete.</p>
<p><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-4.aspx" target="_top">On the next page we will introduce the loading screen, so let&rsquo;s get to it! &ndash;&gt;</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 3]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="fadc8d58-ffbd-455d-8293-f3b85424cc20" date-created="2011-07-15T11:12:53" date-modified="2013-09-04T19:50:01" approved="true" post-url="/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-4.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 4]]></title>
      <content type="text"><![CDATA[<ul>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA.aspx" target="_top">Page 1</a></li>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA&ndash;Page-2.aspx" target="_top">Page 2</a></li>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA&ndash;Page-3.aspx" target="_top">Page 3</a></li>
</ul>
<p>All right let&rsquo;s get some loading magic done! Since this is a very small project there won&rsquo;t be a lot of loading going on, to counter this we will have the loading method sleep for 3 seconds. To do this, change the LoadGame() method so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">void</span> LoadGame()</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">//load the game images into the content pipeline</span></pre>
<pre><span class="lnum"> 4: </span>    orb = Content.Load&lt;Texture2D&gt;(<span class="str">@"orb"</span>);</pre>
<pre class="alt"><span class="lnum"> 5: </span>    </pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//set the position of the orb in the middle of the gamewindow</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    orbPosition = <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - (OrbWidth / 2),</pre>
<pre><span class="lnum"> 8: </span>                     (GraphicsDevice.Viewport.Height / 2) - (OrbHeight / 2));</pre>
<pre class="alt"><span class="lnum"> 9: </span>&nbsp;</pre>
<pre><span class="lnum"> 10: </span>    <span class="rem">//since this will go to fast for this demo's purpose, wait for 3 seconds</span></pre>
<pre class="alt"><span class="lnum"> 11: </span>    Thread.Sleep(3000);</pre>
<pre><span class="lnum"> 12: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 13: </span>    <span class="rem">//start playing</span></pre>
<pre><span class="lnum"> 14: </span>    gameState = GameState.Playing;</pre>
<pre class="alt"><span class="lnum"> 15: </span>    isLoading = </pre>
<span style="color: #0000ff;">true</span>
<pre class="alt">;</pre>
<pre><span class="lnum"> 16: }</span></pre>
<pre>&nbsp;</pre>
<pre><span class="lnum">To be able to make Thread.Sleep work we&rsquo;ll need to add the System.Threading namespace, add the</span></pre>
<pre><span class="lnum">following line all the way at the top of your code:</span></pre>
<pre>&nbsp;</pre>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">using</span> System.Threading;</pre>
</div>
</div>
<div class="csharpcode">&nbsp;</div>
<div class="csharpcode"><span style="color: #606060;">Next we&rsquo;ll need some graphics for our loading screen, add this line of code in the LoadContent() method:</span></div>
<div class="csharpcode">&nbsp;</div>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="rem">//load the loading screen</span></pre>
<pre><span class="lnum"> 2: </span>loadingScreen = Content.Load&lt;Texture2D&gt;(<span class="str">@"loading"</span>);</pre>
</div>
<p><span style="color: #606060; font-family: Consolas;">As usual we need to add an image to the Content project for the loading screen.</span></p>
<p><img style="display: block; float: none; margin-left: auto; margin-right: auto;" src="http://i52.tinypic.com/2usft6o.jpg" alt="" /></p>
<p>This can also be done with text instead of an image, or with some animation like a progress bar or a message that says what is loading at that time.</p>
<p>Now the next part can be tricky, we need to show the loading screen 60 times per second while loading content into the pipeline, that&rsquo;s two actions at the same time so we need a second thread. The creation of the second thread will happen in the Update(GameTime gameTime) method when the game state equals loading and the boolean isLoading is false. If we don&rsquo;t use the boolean the game will initiate the second thread 60 times per second and start loading the same content over and over again until it crashes. To get all this done, change the Update(GameTime gameTime) method so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Update(GameTime gameTime)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">// Allows the game to exit</span></pre>
<pre><span class="lnum"> 4: </span>    <span class="kwrd">if</span> (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)</pre>
<pre class="alt"><span class="lnum"> 5: </span>        <span class="kwrd">this</span>.Exit();</pre>
<pre><span class="lnum"> 6: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 7: </span>    <span class="rem">//load the game when needed</span></pre>
<pre><span class="lnum"> 8: </span>    <span class="rem">//isLoading bool is to prevent the LoadGame method from being called 60 times a seconds</span></pre>
<pre class="alt"><span class="lnum"> 9: </span>    <span class="kwrd">if</span> (gameState == GameState.Loading &amp;&amp; !isLoading) </pre>
<pre><span class="lnum"> 10: </span>    {</pre>
<pre class="alt"><span class="lnum"> 11: </span>        <span class="rem">//set backgroundthread</span></pre>
<pre><span class="lnum"> 12: </span>        backgroundThread = <span class="kwrd">new</span> Thread(LoadGame);</pre>
<pre class="alt"><span class="lnum"> 13: </span>        isLoading = <span class="kwrd">true</span>;</pre>
<pre><span class="lnum"> 14: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 15: </span>        <span class="rem">//start backgroundthread</span></pre>
<pre><span class="lnum"> 16: </span>        backgroundThread.Start();</pre>
<pre class="alt"><span class="lnum"> 17: </span>    }</pre>
<pre><span class="lnum"> 18: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 19: </span>    <span class="rem">//move the orb if the game is in progress</span></pre>
<pre><span class="lnum"> 20: </span>    <span class="kwrd">if</span> (gameState == GameState.Playing)</pre>
<pre class="alt"><span class="lnum"> 21: </span>    {</pre>
<pre><span class="lnum"> 22: </span>        <span class="rem">//move the orb</span></pre>
<pre class="alt"><span class="lnum"> 23: </span>        orbPosition.X += speed;</pre>
<pre><span class="lnum"> 24: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 25: </span>        <span class="rem">//prevent out of bounds</span></pre>
<pre><span class="lnum"> 26: </span>        <span class="kwrd">if</span> (orbPosition.X &gt; (GraphicsDevice.Viewport.Width - OrbWidth) || orbPosition.X &lt; 0)</pre>
<pre class="alt"><span class="lnum"> 27: </span>        {</pre>
<pre><span class="lnum"> 28: </span>            speed *= -1;</pre>
<pre class="alt"><span class="lnum"> 29: </span>        } </pre>
<pre><span class="lnum"> 30: </span>    }</pre>
<pre class="alt"><span class="lnum"> 31: </span>&nbsp;</pre>
<pre><span class="lnum"> 32: </span>    <span class="rem">//wait for mouseclick</span></pre>
<pre class="alt"><span class="lnum"> 33: </span>    mouseState = Mouse.GetState();</pre>
<pre><span class="lnum"> 34: </span>    <span class="kwrd">if</span> (previousMouseState.LeftButton == ButtonState.Pressed &amp;&amp; </pre>
<pre class="alt"><span class="lnum"> 35: </span>        mouseState.LeftButton == ButtonState.Released)</pre>
<pre><span class="lnum"> 36: </span>    {</pre>
<pre class="alt"><span class="lnum"> 37: </span>        MouseClicked(mouseState.X, mouseState.Y);</pre>
<pre><span class="lnum"> 38: </span>    }</pre>
<pre class="alt"><span class="lnum"> 39: </span>&nbsp;</pre>
<pre><span class="lnum"> 40: </span>    previousMouseState = mouseState;</pre>
<pre class="alt"><span class="lnum"> 41: </span>&nbsp;</pre>
<pre><span class="lnum"> 42: </span>    <span class="kwrd">if</span> (gameState == GameState.Playing &amp;&amp; isLoading)</pre>
<pre class="alt"><span class="lnum"> 43: </span>    {</pre>
<pre><span class="lnum"> 44: </span>        LoadGame();</pre>
<pre class="alt"><span class="lnum"> 45: </span>        isLoading = <span class="kwrd">false</span>;</pre>
<pre><span class="lnum"> 46: </span>    }</pre>
<pre class="alt"><span class="lnum"> 47: </span>    <span class="kwrd">base</span>.Update(gameTime);</pre>
<pre><span class="lnum"> 48: </span>}</pre>
<pre>&nbsp;</pre>
</div>
<p>Line 12 declares a second thread, in it&rsquo;s constructor it expects a method that will run in that thread. We then set the isLoading boolean to true so we won&rsquo;t enter the if construction a second time and call the Start() method on the thread. At that time the LoadGame() method kicks in in the background while the main thread continues to call Update and Draw 60 times per second.</p>
<p>Next up is the Draw() method, place this code between spriteBatch.Begin() and spriteBatch.End()</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="rem">//show the loading screen when needed</span></pre>
<pre><span class="lnum"> 2: </span><span class="kwrd">if</span> (gameState == GameState.Loading)</pre>
<pre class="alt"><span class="lnum"> 3: </span>{</pre>
<pre><span class="lnum"> 4: </span>    spriteBatch.Draw(loadingScreen, <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - </pre>
<pre class="alt"><span class="lnum"> 5: </span>                       (loadingScreen.Width / 2), (GraphicsDevice.Viewport.Height / 2) - </pre>
<pre><span class="lnum"> 6: </span>                       (loadingScreen.Height / 2)), Color.YellowGreen);</pre>
<pre class="alt"><span class="lnum"> 7: </span>}</pre>
</div>
<p>Now one final step is needed, the game state needs to enter the loading state, this is done when the player clicked the start button. To do this, in the MouseClick() method change this line of code:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span>gameState = GameState.Playing;</pre>
</div>
<p>With this line of code:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span>gameState = GameState.Loading;</pre>
</div>
<p>If we run the game now and click the Start button the loading screen will show up for about 3 seconds and then the orb will start it&rsquo;s journey.</p>
<p>Okay, we&rsquo;re almost there, all that&rsquo;s left is the pause button which is pretty similar to the start menu.</p>
<p><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-5.aspx" target="_top">Head on to the next page to finish this guide! &ndash;&gt;</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 4]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="3d0999fd-c1b1-4f5a-b9c4-fc46de333a87" date-created="2011-07-15T13:09:38" date-modified="2013-09-04T19:51:57" approved="true" post-url="/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-5.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 5]]></title>
      <content type="text"><![CDATA[<ul>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA.aspx">Page 1</a></li>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-2.aspx">Page 2</a></li>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-3.aspx">Page 3</a></li>
<li><a href="http://www.spikie.be/blog/page/Building-a-main-menu-and-loading-screens-in-XNA-Page-4.aspx">Page 4</a></li>
</ul>
<p>In this final chapter we will add a pause and resume button to our game. Let&rsquo;s start off by adding the images to the content project.</p>
<p><img style="display: block; float: none; margin-left: auto; margin-right: auto;" src="http://i51.tinypic.com/2d0xvd.jpg" alt="" /></p>
<p>&nbsp;</p>
<p><img style="display: block; float: none; margin-left: auto; margin-right: auto;" src="http://i51.tinypic.com/2w6uw6f.jpg" alt="" /></p>
<p>These images can be loaded into the content pipeline from the LoadGame() method. Adjust it so it looks like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">void</span> LoadGame()</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">//load the game images into the content pipeline</span></pre>
<pre><span class="lnum"> 4: </span>    orb = Content.Load&lt;Texture2D&gt;(<span class="str">@"orb"</span>);</pre>
<pre class="alt"><span class="lnum"> 5: </span>    pauseButton = Content.Load&lt;Texture2D&gt;(<span class="str">@"pause"</span>);</pre>
<pre><span class="lnum"> 6: </span>    resumeButton = Content.Load&lt;Texture2D&gt;(<span class="str">@"resume"</span>);</pre>
<pre class="alt"><span class="lnum"> 7: </span>    resumeButtonPosition = <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - </pre>
<pre><span class="lnum"> 8: </span>                            (resumeButton.Width / 2),</pre>
<pre class="alt"><span class="lnum"> 9: </span>                            (GraphicsDevice.Viewport.Height / 2)-(resumeButton.Height / 2));</pre>
<pre><span class="lnum"> 10: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 11: </span>    <span class="rem">//set the position of the orb in the middle of the gamewindow</span></pre>
<pre><span class="lnum"> 12: </span>    orbPosition = <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - (OrbWidth / 2), </pre>
<pre class="alt"><span class="lnum"> 13: </span>                    (GraphicsDevice.Viewport.Height / 2) - (OrbHeight / 2));</pre>
<pre><span class="lnum"> 14: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 15: </span>    <span class="rem">//since this will go to fast for this demo's purpose, wait for 3 seconds</span></pre>
<pre><span class="lnum"> 16: </span>    Thread.Sleep(3000);</pre>
<pre class="alt"><span class="lnum"> 17: </span>&nbsp;</pre>
<pre><span class="lnum"> 18: </span>    <span class="rem">//start playing</span></pre>
<pre class="alt"><span class="lnum"> 19: </span>    gameState = GameState.Playing;</pre>
<pre><span class="lnum"> 20: </span>    isLoading = <span class="kwrd">false</span>;</pre>
<pre class="alt"><span class="lnum"> 21: </span>}</pre>
</div>
<p>Next is the Draw() method, make it look like this:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">protected</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Draw(GameTime gameTime)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    GraphicsDevice.Clear(Color.CornflowerBlue);</pre>
<pre><span class="lnum"> 4: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 5: </span>    spriteBatch.Begin();</pre>
<pre><span class="lnum"> 6: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 7: </span>    <span class="rem">//draw the start menu</span></pre>
<pre><span class="lnum"> 8: </span>    <span class="kwrd">if</span> (gameState == GameState.StartMenu)</pre>
<pre class="alt"><span class="lnum"> 9: </span>    {</pre>
<pre><span class="lnum"> 10: </span>        spriteBatch.Draw(startButton, startButtonPosition, Color.White);</pre>
<pre class="alt"><span class="lnum"> 11: </span>        spriteBatch.Draw(exitButton, exitButtonPosition, Color.White);</pre>
<pre><span class="lnum"> 12: </span>    }</pre>
<pre class="alt"><span class="lnum"> 13: </span>&nbsp;</pre>
<pre><span class="lnum"> 14: </span>    <span class="rem">//show the loading screen when needed</span></pre>
<pre class="alt"><span class="lnum"> 15: </span>    <span class="kwrd">if</span> (gameState == GameState.Loading)</pre>
<pre><span class="lnum"> 16: </span>    {</pre>
<pre class="alt"><span class="lnum"> 17: </span>        spriteBatch.Draw(loadingScreen, <span class="kwrd">new</span> Vector2((GraphicsDevice.Viewport.Width / 2) - </pre>
<pre><span class="lnum"> 18: </span>                        (loadingScreen.Width / 2), (GraphicsDevice.Viewport.Height / 2) - </pre>
<pre class="alt"><span class="lnum"> 19: </span>                        (loadingScreen.Height / 2)), Color.YellowGreen);</pre>
<pre><span class="lnum"> 20: </span>    }</pre>
<pre class="alt"><span class="lnum"> 21: </span>&nbsp;</pre>
<pre><span class="lnum"> 22: </span>    <span class="rem">//draw the the game when playing</span></pre>
<pre class="alt"><span class="lnum"> 23: </span>    <span class="kwrd">if</span> (gameState == GameState.Playing)</pre>
<pre><span class="lnum"> 24: </span>    {</pre>
<pre class="alt"><span class="lnum"> 25: </span>        <span class="rem">//orb</span></pre>
<pre><span class="lnum"> 26: </span>        spriteBatch.Draw(orb, orbPosition, Color.White);</pre>
<pre class="alt"><span class="lnum"> 27: </span>&nbsp;</pre>
<pre><span class="lnum"> 28: </span>        <span class="rem">//pause button</span></pre>
<pre class="alt"><span class="lnum"> 29: </span>        spriteBatch.Draw(pauseButton, <span class="kwrd">new</span> Vector2(0, 0), Color.White);</pre>
<pre><span class="lnum"> 30: </span>    }</pre>
<pre class="alt"><span class="lnum"> 31: </span>&nbsp;</pre>
<pre><span class="lnum"> 32: </span>    <span class="rem">//draw the pause screen</span></pre>
<pre class="alt"><span class="lnum"> 33: </span>    <span class="kwrd">if</span> (gameState == GameState.Paused)</pre>
<pre><span class="lnum"> 34: </span>    {</pre>
<pre class="alt"><span class="lnum"> 35: </span>        spriteBatch.Draw(resumeButton, resumeButtonPosition, Color.White);</pre>
<pre><span class="lnum"> 36: </span>    }</pre>
<pre class="alt"><span class="lnum"> 37: </span>&nbsp;</pre>
<pre><span class="lnum"> 38: </span>    spriteBatch.End();</pre>
<pre class="alt"><span class="lnum"> 39: </span>&nbsp;</pre>
<pre><span class="lnum"> 40: </span>    <span class="kwrd">base</span>.Draw(gameTime);</pre>
<pre class="alt"><span class="lnum"> 41: </span>}</pre>
</div>
<p>&nbsp;</p>
<p>The Update() method doesn&rsquo;t need any change because it already checks for mouse click events, so the only thing left is to adjust the MouseClick() method.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum"> 1: </span><span class="kwrd">void</span> MouseClicked(<span class="kwrd">int</span> x, <span class="kwrd">int</span> y)</pre>
<pre><span class="lnum"> 2: </span>{</pre>
<pre class="alt"><span class="lnum"> 3: </span>    <span class="rem">//creates a rectangle of 10x10 around the place where the mouse was clicked</span></pre>
<pre><span class="lnum"> 4: </span>    Rectangle mouseClickRect = <span class="kwrd">new</span> Rectangle(x, y, 10, 10);</pre>
<pre class="alt"><span class="lnum"> 5: </span>&nbsp;</pre>
<pre><span class="lnum"> 6: </span>    <span class="rem">//check the startmenu</span></pre>
<pre class="alt"><span class="lnum"> 7: </span>    <span class="kwrd">if</span> (gameState == GameState.StartMenu)</pre>
<pre><span class="lnum"> 8: </span>    {</pre>
<pre class="alt"><span class="lnum"> 9: </span>        Rectangle startButtonRect = <span class="kwrd">new</span> Rectangle((<span class="kwrd">int</span>)startButtonPosition.X, </pre>
<pre><span class="lnum"> 10: </span>                                    (<span class="kwrd">int</span>)startButtonPosition.Y, 100, 20);</pre>
<pre class="alt"><span class="lnum"> 11: </span>        Rectangle exitButtonRect = <span class="kwrd">new</span> Rectangle((<span class="kwrd">int</span>)exitButtonPosition.X, </pre>
<pre><span class="lnum"> 12: </span>                                    (<span class="kwrd">int</span>)exitButtonPosition.Y, 100, 20);</pre>
<pre class="alt"><span class="lnum"> 13: </span>&nbsp;</pre>
<pre><span class="lnum"> 14: </span>        <span class="kwrd">if</span> (mouseClickRect.Intersects(startButtonRect)) <span class="rem">//player clicked start button</span></pre>
<pre class="alt"><span class="lnum"> 15: </span>        {</pre>
<pre><span class="lnum"> 16: </span>            gameState = GameState.Loading;</pre>
<pre class="alt"><span class="lnum"> 17: </span>            isLoading = <span class="kwrd">false</span>;</pre>
<pre><span class="lnum"> 18: </span>        }</pre>
<pre class="alt"><span class="lnum"> 19: </span>        <span class="kwrd">else</span> <span class="kwrd">if</span> (mouseClickRect.Intersects(exitButtonRect)) <span class="rem">//player clicked exit button</span></pre>
<pre><span class="lnum"> 20: </span>        {</pre>
<pre class="alt"><span class="lnum"> 21: </span>            Exit();</pre>
<pre><span class="lnum"> 22: </span>        }</pre>
<pre class="alt"><span class="lnum"> 23: </span>    }</pre>
<pre><span class="lnum"> 24: </span>&nbsp;</pre>
<pre class="alt"><span class="lnum"> 25: </span>    <span class="rem">//check the pausebutton</span></pre>
<pre><span class="lnum"> 26: </span>    <span class="kwrd">if</span> (gameState == GameState.Playing)</pre>
<pre class="alt"><span class="lnum"> 27: </span>    {</pre>
<pre><span class="lnum"> 28: </span>        Rectangle pauseButtonRect = <span class="kwrd">new</span> Rectangle(0, 0, 70, 70);</pre>
<pre class="alt"><span class="lnum"> 29: </span>&nbsp;</pre>
<pre><span class="lnum"> 30: </span>        <span class="kwrd">if</span> (mouseClickRect.Intersects(pauseButtonRect))</pre>
<pre class="alt"><span class="lnum"> 31: </span>        {</pre>
<pre><span class="lnum"> 32: </span>            gameState = GameState.Paused;</pre>
<pre class="alt"><span class="lnum"> 33: </span>        }</pre>
<pre><span class="lnum"> 34: </span>    }</pre>
<pre class="alt"><span class="lnum"> 35: </span>&nbsp;</pre>
<pre><span class="lnum"> 36: </span>    <span class="rem">//check the resumebutton</span></pre>
<pre class="alt"><span class="lnum"> 37: </span>    <span class="kwrd">if</span> (gameState == GameState.Paused)</pre>
<pre><span class="lnum"> 38: </span>    {</pre>
<pre class="alt"><span class="lnum"> 39: </span>        Rectangle resumeButtonRect = <span class="kwrd">new</span> Rectangle((<span class="kwrd">int</span>)resumeButtonPosition.X, </pre>
<pre><span class="lnum"> 40: </span>                                                (<span class="kwrd">int</span>)resumeButtonPosition.Y, 100, 20);</pre>
<pre class="alt"><span class="lnum"> 41: </span>&nbsp;</pre>
<pre><span class="lnum"> 42: </span>        <span class="kwrd">if</span> (mouseClickRect.Intersects(resumeButtonRect))</pre>
<pre class="alt"><span class="lnum"> 43: </span>        {</pre>
<pre><span class="lnum"> 44: </span>            gameState = GameState.Playing;</pre>
<pre class="alt"><span class="lnum"> 45: </span>        }</pre>
<pre><span class="lnum"> 46: </span>    }</pre>
<pre class="alt"><span class="lnum"> 47: </span>}</pre>
</div>
<p>And that&rsquo;s about it, we&rsquo;ve just created a game that uses states to determine if it should pause, play or show the main menu. For my complete solution you can click the link below and feel free to post comments if you have any questions.</p>
<p>Thank you for reading!</p>
<p><a href="https://skydrive.live.com/#!/?cid=5a345bb15e973473&amp;sc=documents&amp;uc=1&amp;id=5A345BB15E973473%21250" target="_blank">Source Code</a></p>]]></content>
      <post-name type="text"><![CDATA[Building a main menu and loading screens in XNA–Page 5]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="3b9897a1-b9c7-48b7-be84-9382705f5b8a" date-created="2011-02-17T10:30:47" date-modified="2012-01-30T11:12:54" approved="true" post-url="/blog/page/Certification.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Certification]]></title>
      <content type="text"><![CDATA[<div style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: #ffffff; margin: 8px;">
<table style="border: 1px dashed #bbbbbb; cursor: default;" cellspacing="0" cellpadding="8">
<tbody>
<tr class="certsTableHeader"><th style="cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed;">Qualification</th><th style="cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed;">Version</th><th style="cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed;">Date of Certification</th></tr>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;"><img style="width: 100px; height: 52px;" src="https://www.mcpvirtualbusinesscard.com/images/logos/MCP.png" alt="Certification Logo Image" /></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">MCP 2.0 -- Certified Professional</td>
<td class="date" style="text-align: center;">12/11/2006</td>
</tr>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;"><img style="width: 100px; height: 52px;" src="https://www.mcpvirtualbusinesscard.com/images/logos/MCSA.png" alt="Certification Logo Image" /></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">Microsoft Windows Server 2003</td>
<td style="text-align: center;">4/20/2009</td>
</tr>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;"><img style="width: 100px; height: 52px;" src="https://www.mcpvirtualbusinesscard.com/images/logos/MCDST.png" alt="Certification Logo Image" /></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">Microsoft Windows XP</td>
<td class="date" style="text-align: center;">7/27/2007</td>
</tr>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;"><img style="width: 100px; height: 52px;" src="https://www.mcpvirtualbusinesscard.com/images/logos/MCITP.png" alt="Certification Logo Image" /></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">Enterprise Desktop Support Technician</td>
<td class="date" style="text-align: center;">7/14/2008</td>
</tr>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;"><img style="width: 100px; height: 52px;" src="https://www.mcpvirtualbusinesscard.com/images/logos/MCTS.png" alt="Certification Logo Image" /></td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">
<p>Microsoft Windows Vista, Configuration<br />Windows Server 2008 Active Directory, Configuration<br />Windows Server 2008 Network Infrastructure, Configuration<br />.NET Framework 4, Windows Applications<br />.NET Framework 4, Data Access<br />.NET Framework 4, WCF&nbsp;</p>
</td>
<td class="date" style="text-align: center;">7/14/2008</td>
</tr>
<tr>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">&nbsp;</td>
<td style="color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; cursor: text; border-width: 1px; border-color: #bbbbbb; border-style: dashed; margin: 8px;">
<p>MCPD - Microsoft Certified Professional Developer</p>
<ul>
<li>Windows Development</li>
<li>Windows Phone 7 Development</li>
</ul>
<p>&nbsp;</p>
</td>
<td class="date" style="text-align: center;">
<p>07/15/2011<br />01/30/2012</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>]]></content>
      <post-name type="text"><![CDATA[Certification]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="bc790c4d-9a82-4201-983b-3e78f23b9a52" date-created="2010-12-08T12:58:51" date-modified="2011-06-22T15:00:50" approved="true" post-url="/blog/page/Tutorials.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Tutorials]]></title>
      <content type="text"><![CDATA[<ul>
<li><a href="http://www.spikie.be/blog/page/Building-a-basic-Lightswitch-application.aspx">Building a basic LightSwitch application</a></li>
<li><a title="Using ASP.net roles &amp; memberships with MySQL" href="http://www.spikie.be/blog/page/Using-ASPNet-roles-membership-in-MySQL.aspx">Using ASP.net roles &amp; memberships with MySQL</a></li>
</ul>]]></content>
      <post-name type="text"><![CDATA[Tutorials]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
    <post id="c507f1d9-6211-4f27-bf61-8175bba61ef6" date-created="2010-12-08T13:17:35" date-modified="2010-12-08T13:17:35" approved="true" post-url="/blog/page/Using-ASPNet-roles-membership-in-MySQL.aspx" type="article" hasexcerpt="false" views="0" is-published="True">
      <title type="text"><![CDATA[Using ASP.Net roles & membership in MySQL]]></title>
      <content type="text"><![CDATA[<div class="entry">
<p>ASP.Net has great build-in features for user roles and user management.<br />These features work out of the box perfectly with SQL server and SQL server express.</p>
<p>If you don&rsquo;t have access to one of these database technologies you can use MySQL, this tutorial will show you how.</p>
<p>First of all, things you need:</p>
<ul>
<li>MySQL server (I use MySQL 4.1, since my host uses this one)</li>
<li>Visual Studio 2008 or Web Designer express</li>
<li>A MySQL server database</li>
<li>MySQL .net connector <a href="http://www.mysql.com/downloads/connector/net/6.2.html"><span style="color: #cc0000;">http://www.mysql.com/downloads/connector/net/6.2.html</span></a>&nbsp; (installer/windows version)</li>
<li>A user with full access and privileges to the DB</li>
</ul>
<p>Install the .Net connector on your asp.net test server (this can be your testmachine as well, as long as MySQL is running on it)</p>
<p>Once you got all of this set, start a new website in Visual Studio (File &gt; New &gt; Website)<br />Create the BIN folder in your solution (right click on your project &gt; Add ASP.Net folder &gt; Bin)</p>
<p>Right click the folder in your solution explorer &gt; Add existing item<br />Navigate to Mysql.data.dll and Mysql.web.dll (default in C:\Program Files\MySQL\MySQL Connector Net 6.2.3\Assemblies\)</p>
<p>In Visual Studio click the website menu &gt; ASP.NET configuration<br />This will open a webinterface where you can set your application settings</p>
<p>Click Provider configuration &gt;Select a different provider for each feature (advanced)</p>
<p>Select MySQLMembershipProvider&nbsp; and MySQLRoleProvider<br />Click Back<br />Close the browser for now</p>
<p>Navigate to your Machine.config file on your pc (C:\Windows\Microsoft.NET\Framework\v2.0.50727\CONFIG)<br />Search for</p>
<p><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">&lt;defaultProvider</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySQLMembershipProvider</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">providers</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">remove</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">name</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySQLMembershipProvider</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">/&gt;<br /></span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">&lt;add</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">name</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySQLMembershipProvider</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">type</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySql.Web.Security.MySQLMembershipProvider, MySql.Web, Version=6.2.3.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">connectionStringName</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">LocalMySqlServer</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">enablePasswordRetrieval</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">false</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">enablePasswordReset</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">true</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">requiresQuestionAndAnswer</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">false</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">applicationName</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">/</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">requiresUniqueEmail</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">false</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">passwordFormat</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">Clear</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">maxInvalidPasswordAttempts</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">5</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">minRequiredPasswordLength</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">3</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">minRequiredNonalphanumericCharacters</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">0</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">passwordAttemptWindow</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">10</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">passwordStrengthRegularExpression</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;&rdquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">/&gt;&lt;/</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">providers</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;&lt;/</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">membership</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;</span></span></p>
<p><code><span style="font-size: x-small;">Cut this from machine.config and paste it in web.config in your project after the &lt;system.web&gt; tag</span></code></p>
<p><code><span style="font-size: x-small;">Add autogenerateschema="true" so it looks like this:<br /></span></code><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">&lt;membership</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">defaultProvider</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySQLMembershipProvider</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">providers</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">remove</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">name</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySQLMembershipProvider</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">/&gt;<br />&lt;</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">add</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">name</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySQLMembershipProvider</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">autogenerateschema</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">true</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">type</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">MySql.Web.Security.MySQLMembershipProvider, MySql.Web, Version=6.2.3.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">connectionStringName</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">LocalMySqlServer</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">enablePasswordRetrieval</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">false</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">enablePasswordReset</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">true</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">requiresQuestionAndAnswer</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">false</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">applicationName</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">/</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">requiresUniqueEmail</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">false</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">passwordFormat</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">Clear</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">maxInvalidPasswordAttempts</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">5</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">minRequiredPasswordLength</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">3</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">minRequiredNonalphanumericCharacters</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">0</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">passwordAttemptWindow</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">10</span></span><span style="font-size: x-small;">&ldquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;"> </span></span><span style="color: #ff0000; font-size: x-small;"><span style="color: #ff0000; font-size: x-small;">passwordStrengthRegularExpression</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">=</span></span><span style="font-size: x-small;">&ldquo;&rdquo;</span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">/&gt;&lt;/</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">providers</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;&lt;/</span></span><span style="color: #a31515; font-size: x-small;"><span style="color: #a31515; font-size: x-small;">membership</span></span><span style="color: #0000ff; font-size: x-small;"><span style="color: #0000ff; font-size: x-small;">&gt;</span></span></p>
<p><span style="color: #ffffff;">Search for &lt;connectionstrings&nbsp; /&gt;</span></p>
<p><span style="color: #ffffff;">replace this with</span></p>
<p><span style="color: #0000ff; font-size: x-small;">&lt;connectionStrings&gt;<br />&lt;remove name=&rdquo;LocalMySqlServer&rdquo;/&gt;<br />&lt;add name=&rdquo;LocalMySqlServer&rdquo;<br />connectionString=&rdquo;Datasource=localhost;Database=users;uid=root;pwd=password;&rdquo;<br />providerName=&rdquo;MySql.Data.MySqlClient&rdquo;/&gt;<br />&lt;/connectionStrings&gt;</span></p>
<p>edit this piece of code to match your DB, user and password</p>
<p>Press F6 to see if everything builds.</p>
<p>Go to Website &gt; ASP.NET configuration &gt; Security</p>
<p>Now you can create users, roles, select windows or web authentication, etc.</p>
<p>If you use a tool like HeidiSQL or phpmyadmin to take a look at your Database, you&rsquo;ll see that Visual Studio filled it with a number of tables for users, roles, etc.</p>
<p>When first trying this I got this error when going to security in the config tool:</p>
<p>Unable to initialize provider. Missing or incorrect schema. (C:\Windows\Microsoft.NET\Framework\v2.0.50727\Config\machine.config line 145)</p>
<p>this was because my DB user in the connectionstring didn&rsquo;t have sufficient privileges on the DB.<br />If you get errors there, try changing the DB user in the connection string to your root user, if that works, change the privileges on your DB user.</p>
<p>Don&rsquo;t ever use your root account in a connectionstring!</p>
<p>If you liked this, or if you have questions, feel free to drop a comment!</p>
</div>]]></content>
      <post-name type="text"><![CDATA[Using ASP.Net roles & membership in MySQL]]></post-name>
      <authors>
        <author ref="admin" />
      </authors>
    </post>
  </posts>
</blog>
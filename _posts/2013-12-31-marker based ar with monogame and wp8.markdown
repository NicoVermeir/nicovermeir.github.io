---
layout: post
title: "marker based ar with monogame and wp8"
date: 2013-12-31 09:45:38 +0100
comments: true
published: true
categories: ["post"]
tags: ["Augmented Reality", ".Net", "MonoGame", "Devices", "WP8", "XNA"]
alias: ["/blog/post/2013/12/31/.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2013/12/31/.aspx
 - /blog/post/2013/12/31/.aspx
---
<p>Marker based Augmented Reality is really easy thanks to toolkits like SLAR. A bigger challenge is when you want to use those toolkits in a Monogame application. There’s a lot of information out there on how to do this in the classic Silverlight / XNA mashup we used to have in Windows Phone 7 but since XNA isn’t supported in WP8 and Monogame / Silverlight combinations aren’t possible I embarked on a journey to get this done.</p>  <h2>Credits</h2>  <p>Before I start with this post I would like to give credits to the three articles / demo apps that helped me create this post.</p>  <ul>   <li>&#160;<a href="http://developer.nokia.com/Community/Wiki/Creating_a_Lens_application_that_uses_HLSL_effects_for_filters" target="_blank">http://developer.nokia.com/Community/Wiki/Creating_a_Lens_application_that_uses_HLSL_effects_for_filters</a></li>    <li>&#160;<a href="http://developer.nokia.com/Community/Wiki/Real-time_camera_effects_on_Windows_Phone_7_and_8" target="_blank">http://developer.nokia.com/Community/Wiki/Real-time_camera_effects_on_Windows_Phone_7_and_8</a> </li>    <li>&#160;<a href="http://apeoholic.se/post/Augmented-Reality-demo-with-SilverlightXNA" target="_blank">http://apeoholic.se/post/Augmented-Reality-demo-with-SilverlightXNA</a></li> </ul>  <p>All of these articles contain code that can be found in my demo solution attached to this post.</p>  <h2>Displaying the phone’s camera feed</h2>  <p>In a XAML application it’s easy to get the camera feed displayed in the app, a videobrush attached to a Canvas or a Rectangle and done. In a Monogame application we’ll have to do a bit more work.</p>  <p>We’ll start with a blank Monogame Windows Phone 8 game.</p>  <p>Note: the current Monogame templates included in the installer are only suited for Visual Studio 2012. However, once the game’s created you can simply open the solution in Visual Studio 2013.</p>  <p><a href="http://i39.tinypic.com/2vl066a.jpg" target="_blank"><img src="http://i39.tinypic.com/2vl066a.jpg" width="522" height="361" /></a></p>  <p>First thing to do is enable the correct capability. In the WMAppManifest GUI, in the Capabilities tab, check the ID_CAP_ISV_CAMERA checkbox.</p>  <p>From here on out, everything we’ll be doing will be in the Game1.cs class. The GamePage files are just for initializing Monogame and rendering the game. Running the app at this point should just give you a nice blue background.</p>  <p>If the app shows it’s pretty blue background, it’s time to declare some private fields in the Game1 class.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1678ed89-0935-4f57-85ab-12540789da2f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">//camera preview</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000"> _photoDevice;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Texture2D</span><span style="background:#ffffff;color:#000000"> _previewTexture;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _newPreviewFrameAvailable;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _backBufferXCenter;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _backBufferYCenter;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _textureYCenter;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> _textureXCenter;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> _yScale;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> _xScale;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[] _previewData2;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[] _previewData1;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _isFocussing;</span></li> </ol> </div> </div> </div>  <p>Let’s go over these fields</p>  <ul>   <li> _photoDevice will be our access to the phone’s camera</li>    <li> _previewTexture will hold the frame currently being drawn, coming from the camera’s previewbuffer</li>    <li> _newPreviewFrameAvailable is a flag that will be set to true whenever a new frame is ready to be fetched and drawn</li>    <li> _backBufferXCenter and _backBufferYCenter: these 2 fields together form the middle point of the device’s screen, we need this to position the preview image in the middle of the screen</li>    <li> _textureYCenter and _textureXCenter: these 2 fields together form the middle point of the preview image.</li>    <li> _yScale and _xScale will contain the height and width scale so that we can draw the preview image full screen</li>    <li> _previewData1 and _previewData2 will hold the new and previous pixels from the camera’s preview buffer, we need to hold both to prevent one from being overwritten with a new frame while still being drawn</li>    <li> _isFocussing is a flag that prevents the focus function of the camera being called multiple times.</li> </ul>  <p>The next step is the Initialize method, note that this method needs to be overridden from the base Game class that Game1 inherits. The method itself gets called automatically at game’s start.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:62200a58-feac-4f74-965d-51f62c5562ce" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Initialize()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_spriteBatch = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SpriteBatch</span><span style="background:#ffffff;color:#000000">(GraphicsDevice);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Size</span><span style="background:#ffffff;color:#000000"> previewSize = </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000">.GetAvailablePreviewResolutions(</span><span style="background:#ffffff;color:#2b91af">CameraSensorLocation</span><span style="background:#ffffff;color:#000000">.Back)[0];</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Size</span><span style="background:#ffffff;color:#000000"> captureSize = </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000">.GetAvailableCaptureResolutions(</span><span style="background:#ffffff;color:#2b91af">CameraSensorLocation</span><span style="background:#ffffff;color:#000000">.Back)[0];</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">CreateTexture((</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)previewSize.Width, (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)previewSize.Height);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_previewData1 = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[_previewTexture.Width * _previewTexture.Height];</span></li> <li>    <span style="background:#ffffff;color:#000000">_previewData2 = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">[_previewTexture.Width * _previewTexture.Height];</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_photoDevice = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PhotoCaptureDevice</span><span style="background:#ffffff;color:#000000">.OpenAsync(</span><span style="background:#ffffff;color:#2b91af">CameraSensorLocation</span><span style="background:#ffffff;color:#000000">.Back, captureSize);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_photoDevice.PreviewFrameAvailable += photoDevice_PreviewFrameAvailable;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_backBufferXCenter = GraphicsDevice.Viewport.Width / 2;</span></li> <li>    <span style="background:#ffffff;color:#000000">_backBufferYCenter = GraphicsDevice.Viewport.Height / 2;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_textureXCenter = _previewTexture.Width / 2;</span></li> <li>    <span style="background:#ffffff;color:#000000">_textureYCenter = _previewTexture.Height / 2;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_yScale = (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)GraphicsDevice.Viewport.Width / _previewTexture.Height;</span></li> <li>    <span style="background:#ffffff;color:#000000">_xScale = (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)GraphicsDevice.Viewport.Height / _previewTexture.Width;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.Initialize();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>First we initialize the spritebatch, this class will be responsible for drawing the 2D textures, meaning in this case, the camera preview.</p>  <p>Next we get the preview size and capture size from the camera in the phone. We create a texture with the CreateTexture method (explained a bit lower) and declare the two arrays that will hold the current and previous frames.</p>  <p>The camera is launched asynchronously on line 13, hooking up the event handler for the PreviewFrameAvailable event on line 14.</p>  <p>Next, the center points for both the device’s screen and the preview texture are calculated, followed by calculating the scale.</p>  <p>Here’s the CreateTexture method</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fe4ad5d5-7025-4c1e-adfa-277b22d11c99" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CreateTexture(</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> textureWidth, </span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> textureHeight)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_previewTexture = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Texture2D</span><span style="background:#ffffff;color:#000000">(GraphicsDevice, textureWidth, textureHeight);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">[] data = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">[textureWidth * textureHeight];</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 0; i &lt; textureWidth * textureHeight; i++)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">data[i] = </span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">.White;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_previewTexture.SetData(data);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This method just created a white texture, the size of what we expect the preview frames to be.</p>  <p>Next up is the event handler for the PreviewFrameAvailable event</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c1e5a0c3-8dfd-40ff-b02f-8659ebf2e9f4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> photoDevice_PreviewFrameAvailable(</span><span style="background:#ffffff;color:#2b91af">ICameraCaptureDevice</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_newPreviewFrameAvailable = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This sets a flag to true, this flag will be checked in the Draw method to prevent synchronization problems between threads.</p>  <p>Almost time to show something on screen! Here’s the Draw method, note that this is also an overridden method. In Monogame Update and Draw are the game loop, they are called multiple times per second. Update is where you would update the world, check for collisions, … While Draw is where all the graphical drawing logic sits.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ba0b41e4-d289-4eba-8e9f-891aaf9c5293" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Draw(</span><span style="background:#ffffff;color:#2b91af">GameTime</span><span style="background:#ffffff;color:#000000"> gameTime)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_newPreviewFrameAvailable)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">GraphicsDevice.Clear(</span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">.CornflowerBlue);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// a new frame is available, get it from the previewbuffer</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_photoDevice.GetPreviewBufferArgb(_previewData2);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//camera uses RGB, Texture2D uses BGR, swap color channels</span></li> <li>        <span style="background:#ffffff;color:#000000">SwapRedBlueChannel(_previewData2);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> previewDataTemp = _previewData1;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_previewData1 = _previewData2;</span></li> <li>        <span style="background:#ffffff;color:#000000">_previewData2 = previewDataTemp;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Convert the pixel array to a texture</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_previewTexture.SetData(_previewData1);</span></li> <li>        <span style="background:#ffffff;color:#000000">_newPreviewFrameAvailable = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//draw the previewframe</span></li> <li>    <span style="background:#ffffff;color:#000000">_spriteBatch.Begin();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_spriteBatch.Draw(_previewTexture, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector2</span><span style="background:#ffffff;color:#000000">(_backBufferXCenter, _backBufferYCenter), </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">,</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Color</span><span style="background:#ffffff;color:#000000">.White,</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)</span><span style="background:#ffffff;color:#2b91af">Math</span><span style="background:#ffffff;color:#000000">.PI / 2.0f, </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector2</span><span style="background:#ffffff;color:#000000">(_textureXCenter, _textureYCenter),</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector2</span><span style="background:#ffffff;color:#000000">(_xScale, _yScale), </span><span style="background:#ffffff;color:#2b91af">SpriteEffects</span><span style="background:#ffffff;color:#000000">.None, 0.0f);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_spriteBatch.End();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.Draw(gameTime);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First thing we’ll do is check for the flag that is set in the PreviewFrameAvailable event. If that’s true we fetch the ARGB preview buffer from the device. That buffer is an integer array, we pass in one of our two integer arrays, it will get filled with the buffer’s data. A problem we’re having here is that the camera returns RGB values while Texture2D uses BGR values. SwapRedBlueChannel is a small method that swaps those channels. Feel free to comment that line out and see for yourself what it does, all blue colors will show up red on your phone’s screen and vice versa. This method is detailed a bit lower on this page.</p>  <p>The next part is swapping the current frame with the previous frame, this is done to prevent a frame that is currently drawn on screen to be overwritten by a new one. </p>  <p>The SetData method on Texture2D takes in an array and will use that data to create the texture’s image.</p>  <p>And finally, we clear the flag again to wait for the next available frame. We are now ready to draw the image on screen. The drawing is done using the spritebatch, all drawing should happen between spritebatch.Begin() and spritebatch.End().</p>  <p>The Draw method has several overloads. The overload we’re using here gives us the ability to rotate and scale the texture. We need this as Monogame on Windows Phone currently has no landscape support.</p>  <p>Let’s break down the parameters for the Draw method.</p>  <ul>   <li> _previewTexture: our Texture2D that got filled with the preview frame’s data, this is the texture that will get drawn on screen</li>    <li> new Vector2(_backBufferXCenter, _backBufferYCenter): The position where the texture will get drawn. By default Monogame uses the upper left corner of the texture to position it, in this overload of the Draw method we can change that upper left point to something else as you’ll see in a few parameters</li>    <li> null: we don’t need a source rectangle here, just pass in null</li>    <li> Color.White: Draw this texture in its original colors</li>    <li> (float)Math.PI / 2.0f: this is the rotation, it rotates the entire image 90 degrees, moving us from portrait to landscape mode</li>    <li> new Vector2(_textureXCenter, _textureYCenter): origin point, this moves the rotation and location point from the upper left corner of the texture to its center</li>    <li> new Vector2(_xScale, _yScale): scales the image to be fullscreen</li>    <li> SpriteEffects.None: no extra effects needed</li>    <li> 0.0f: default depth</li> </ul>  <p>With all this in place, run the game and you should see your camera image being drawn full screen inside a game. However, the image is not focusing. An image in focus is pretty important for marker detection I believe. Let’s implement that a screen tap focuses the camera.</p>  <h2>Focusing the camera</h2>  <p>First we need to enable the tap gesture in the game. In the Game1 constructor add this line.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8d8e8374-a3dc-48fe-85d0-9fc26fabfe69" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">TouchPanel</span><span style="background:#ffffff;color:#000000">.EnabledGestures = </span><span style="background:#ffffff;color:#2b91af">GestureType</span><span style="background:#ffffff;color:#000000">.Tap;</span></li> </ol> </div> </div> </div>  <p>The logic will go in the Update part of our gameloop, once again an overridden method.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:82b344fb-86be-40e4-827e-c264d935aad1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Update(</span><span style="background:#ffffff;color:#2b91af">GameTime</span><span style="background:#ffffff;color:#000000"> gameTime)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_photoDevice == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//if a touch event is available, focus the camera</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">TouchPanel</span><span style="background:#ffffff;color:#000000">.IsGestureAvailable)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">TouchPanel</span><span style="background:#ffffff;color:#000000">.ReadGesture().GestureType == </span><span style="background:#ffffff;color:#2b91af">GestureType</span><span style="background:#ffffff;color:#000000">.Tap &amp;&amp; !_isFocussing)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_isFocussing = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _photoDevice.FocusAsync();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_isFocussing = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.Update(gameTime);</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First we check if our camera is already initialized, we can’t focus something that doesn’t exist yet. If a gesture is available and it is a tap gesture we set the is focusing flag to true to prevent another focus call when one is in progress. The focusing itself is as easy as calling the asynchronously FocusAsync function on the camera. Reset the flag and done. The camera should now focus whenever you tap the screen in the game.</p>  <p>Now that we have our camera in place, it’s time for the fun stuff. The marker detection!</p>  <h2>Augmented Reality</h2>  <p>As mentioned in the beginning of this article, we’re going to use the SLAR toolkit. The problem is that the current released version of SLAR (released in May 2010) isn’t compatible with our Windows Phone 8 project. Luckily we can just pluck the code from its Codeplex page, recompile it and it just works. I took the lazy way out and just added the SLAR project to my solution. You’ll notice that SLAR depends on another library called Matrix3DEx that has the same compatibility issue, luckily for us that project also lives on Codeplex. Here are the links</p>  <ul>   <li>&#160;<a title="http://slartoolkit.codeplex.com/" href="http://slartoolkit.codeplex.com/" target="_blank">http://slartoolkit.codeplex.com/</a></li>    <li>&#160;<a title="http://matrix3dex.codeplex.com/" href="http://matrix3dex.codeplex.com/">http://matrix3dex.codeplex.com/</a></li> </ul>  <p>My solution currently looks like this</p>  <p><a href="http://i40.tinypic.com/2jbr7d1.jpg" target="_blank"><img src="http://i40.tinypic.com/2jbr7d1.jpg" width="137" height="261" /></a></p>  <p>Also make sure to copy the folders Common and CommonData to the folder where your solution lives or the project won’t compile. Don’t forget to add a reference to your game for the SLAR project.</p>  <p>Back to the code, in the Game1 class we’ll need some extra fields</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c8f112c5-f200-4aaa-b750-0c0f9bdd8d71" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GrayBufferMarkerDetector</span><span style="background:#ffffff;color:#000000"> _arDetector;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _isInitialized;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _isDetecting;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] _buffer;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DetectionResult</span><span style="background:#ffffff;color:#000000"> _markerResult;</span></li> </ol> </div> </div> </div>  <p>The first field is the detector, there are several kind of detectors in SLAR, we’re using the GrayBuffer one here. We need two flags to show that everything is initialized and if a detection is currently running. Last but not least we need a byte array that will store the frame that we’re currently scanning for markers. The detectionresult will hold the result of every detected marker so that we can use it to position our model.</p>  <p>Next we’ll initialize all the AR related bits, I’ve put this in a separate method that gets called from the existing Initialize method.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f2c5085a-c51c-48d7-962e-d13d6db45c77" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> InitializeAR()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//  Initialize the Detector</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_arDetector = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">GrayBufferMarkerDetector</span><span style="background:#ffffff;color:#000000">();</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Load the marker pattern. It has 16x16 segments and a width of 80 millimeters</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> marker = </span><span style="background:#ffffff;color:#2b91af">Marker</span><span style="background:#ffffff;color:#000000">.LoadFromResource(</span><span style="background:#ffffff;color:#a31515">&quot;data/Marker_SLAR_16x16segments_80width.pat&quot;</span><span style="background:#ffffff;color:#000000">, 16, 16, 80);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// The perspective projection has the near plane at 1 and the far plane at 4000</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_arDetector.Initialize((</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)_photoDevice.PreviewResolution.Width, (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000">)_photoDevice.PreviewResolution.Height, 1, 4000, marker);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_isInitialized = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>The way SLAR works is that it loads in a pattern(*.pat) file. That pattern gets searched for in every detect call. You can create your own patterns or use prebuild ones. I’m using one that comes with the SLAR samples. Make sure that the pattern is included with your solution and that its build action is set to Resource. Line 7 loads the pattern, line 10 initializes our detector, passing in the expected resolution, the near and far planes and the marker.</p>  <p>And now for the magical piece of code that does the actual detecting</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2fee9e95-34ed-445e-93b7-c580bb732dbc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> Detect()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_isDetecting || !_isInitialized)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Here is where we try to detect the marker</span></li> <li>    <span style="background:#ffffff;color:#000000">_isDetecting = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Update buffer size</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> pixelWidth = _photoDevice.PreviewResolution.Width;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> pixelHeight = _photoDevice.PreviewResolution.Height;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_buffer == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000"> || _buffer.Length != pixelWidth * pixelHeight)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_buffer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[System.</span><span style="background:#ffffff;color:#2b91af">Convert</span><span style="background:#ffffff;color:#000000">.ToInt32(pixelWidth * pixelHeight)];</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Grab snapshot for the marker detection</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_photoDevice.GetPreviewBufferY(_buffer);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Detect the markers</span></li> <li>        <span style="background:#ffffff;color:#000000">_arDetector.Threshold = 100;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> dr = _arDetector.DetectAllMarkers(_buffer, System.</span><span style="background:#ffffff;color:#2b91af">Convert</span><span style="background:#ffffff;color:#000000">.ToInt32(pixelWidth), System.</span><span style="background:#ffffff;color:#2b91af">Convert</span><span style="background:#ffffff;color:#000000">.ToInt32(pixelHeight));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Set the marker result if the marker is found</span></li> <li>        <span style="background:#ffffff;color:#000000">_markerResult = dr.HasResults ? dr[0] : </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">finally</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_isDetecting = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The Detect method will get called from a timer, more on that a bit lower in the article.</p>  <p>First we’ll check if it’s okay to do detection, a detection cannot be in progress and everything should be initialized. Then we’ll set the is detecting flag to true.</p>  <p>We’ll keep the width and height of the camera’s preview resolution in two variables and initialize the buffer if necessary. We fill the buffer with the luminance data from the camera by calling the GetPreviewBufferY method, this differs from the method we’re using to show the camera stream. The luminance data is sufficient for SLAR to do its detection. Then we pass in the buffer to the marker detector, together with the frame’s width and height. If a result is found we’ll keep it in the DetectionResult field, if not we set the field to null. As last part we clear the is detecting flag so we are ready to detect again.</p>  <p>Very easy to use, SLAR takes care of all the rest. All we need to do is call the Detect method. In the overridden Initialize method, add this.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b89e79bf-31ce-402b-af6b-91cb5df23589" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">InitializeAR();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">//marker detection sits on another counter than the update / draw mechanism to prevent excessive detection</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">Deployment</span><span style="background:#ffffff;color:#000000">.Current.Dispatcher.BeginInvoke(() =&gt;</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//Runt the detection separate from the update</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> dispatcherTimer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DispatcherTimer</span><span style="background:#ffffff;color:#000000"> { Interval = </span><span style="background:#ffffff;color:#2b91af">TimeSpan</span><span style="background:#ffffff;color:#000000">.FromMilliseconds(100) };</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">dispatcherTimer.Tick += (sender, e1) =&gt; Detect();</span></li> <li>    <span style="background:#ffffff;color:#000000">dispatcherTimer.Start();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">});</span></li> </ol> </div> </div> </div>  <p>The detection runs separately from the gameloop to prevent excessive calls to the detect method. I only want to detect every 100 milliseconds.</p>  <p>When you run the game now and point the camera to the marker, nothing happens. That’s perfectly normal. The marker is getting detected but we’re not doing anything with the detection results yet. Let’s add a 3D model to our game and position it on the marker.</p>  <h2>Adding the model</h2>  <p>For the 3D model I choose a model of the Tardis I found online (if you don’t know what the Tardis is, go out and buy all the Doctor Who dvd boxes you can find and lock yourself in your room for a few months. Thank me afterwards). </p>  <p>To use this in Monogame you’ll need to push it through either the XNA or the Monogame pipeline to convert it into an XNB file. I’m not going to detail how to do this here, lots of info out there. If you want a quick start, grab the XNB file from my demo project. </p>  <p>Add a folder called Content to your solution, add the XNB file in there and set its build action to Content. Next, we’ll once again add some fields to the Game1 class.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d2e37028-89db-4195-a653-170d31594d70" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000"> _modelPosition;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000"> _cameraPosition;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Model</span><span style="background:#ffffff;color:#000000"> _tardis;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000"> _aspectRatio;</span></li> </ol> </div> </div> </div>  <p>The names speak for themselves, we’ve got two vectors, one for the position of the Tardis, one for the position of the camera. We’ve got the Tardis model and a field that holds the aspect ratio.</p>  <p>In the Initialize method, right before the call to InitializeAR add these lines.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5ba17444-94a9-4ac1-9d05-d3b744f96814" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000">_aspectRatio = _graphics.GraphicsDevice.Viewport.AspectRatio;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">_modelPosition = </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">.Zero;</span></li> <li><span style="background:#ffffff;color:#000000">_cameraPosition = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">(0, 0, 50);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#000000">InitializeAR();</span></li> </ol> </div> </div> </div>  <p>These are just basic vectors that we’ll use to calculate the actual position on screen where we need to render our model.</p>  <p>Next, we’ll need to load the model into memory. This is done in the overridden LoadContent method in the Game1 class.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0642ef7a-5265-40fd-a6a2-c0466fc593e8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">protected</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">override</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> LoadContent()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_tardis = Content.Load&lt;</span><span style="background:#ffffff;color:#2b91af">Model</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#a31515">&quot;tardis&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">base</span><span style="background:#ffffff;color:#000000">.LoadContent();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>There’s no need to specify that the model lives in the Content folder as Monogame assumes that the project contains a folder called Content and that’s where it looks for XNB files.</p>  <p>Before we go into the draw logic of the model, there’s one problem that we’ll need to tackle. SLAR is using Matrix3D classes while Monogame has its own Matrix class. We’ll need a way to convert Matrix3D to Matrix. Here’s an extension method that does just that.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:49145083-6347-4f93-9231-ac3f97a7f992" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">MatrixConverter</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> Convert a Silverlight matrix into an Xna matrix</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;/summary&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;param name=&quot;matrix&quot;&gt;&lt;/param&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#808080">///</span><span style="background:#ffffff;color:#008000"> </span><span style="background:#ffffff;color:#808080">&lt;returns&gt;&lt;/returns&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000"> ToXnaMatrix(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000"> System.Windows.Media.Media3D.</span><span style="background:#ffffff;color:#2b91af">Matrix3D</span><span style="background:#ffffff;color:#000000"> matrix)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> m = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">(</span></li> <li>           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M11, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M12, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M13, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M14,</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M21, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M22, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M23, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M24,</span></li> <li>           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M31, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M32, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M33, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M34,</span></li> <li style="background: #f3f3f3">           <span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.OffsetX, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.OffsetY, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.OffsetZ, (</span><span style="background:#ffffff;color:#0000ff">float</span><span style="background:#ffffff;color:#000000">)matrix.M44);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> m;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Now, onto the Draw method. The position of the following code is really important. Monogame draws its stuff in the order that you feed it its instructions. Meaning that we first need to draw the camera feed, then the Tardis model. That way the model will be nicely overlaid over the image.</p>  <p>In the Draw method, after Spritebatch.End and before base.Draw add these lines</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:de390e34-7fe7-4148-b7c6-a07a3ec84c1e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_markerResult != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//a marker is detected, draw the Tardis model</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> result = _markerResult;</span></li> <li>    <span style="background:#ffffff;color:#000000">_graphics.GraphicsDevice.DepthStencilState = </span><span style="background:#ffffff;color:#2b91af">DepthStencilState</span><span style="background:#ffffff;color:#000000">.Default;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_graphics.GraphicsDevice.BlendState = </span><span style="background:#ffffff;color:#2b91af">BlendState</span><span style="background:#ffffff;color:#000000">.Opaque;</span></li> <li>    <span style="background:#ffffff;color:#000000">_graphics.GraphicsDevice.SamplerStates[0] = </span><span style="background:#ffffff;color:#2b91af">SamplerState</span><span style="background:#ffffff;color:#000000">.LinearWrap;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Copy any parent transforms.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">[] transforms = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">[_tardis.Bones.Count];</span></li> <li>    <span style="background:#ffffff;color:#000000">_tardis.CopyAbsoluteBoneTransformsTo(transforms);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Draw the model. A model can have multiple meshes, so loop.</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ModelMesh</span><span style="background:#ffffff;color:#000000"> mesh </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> _tardis.Meshes)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// This is where the mesh orientation is set, as well as our camera and projection.</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">BasicEffect</span><span style="background:#ffffff;color:#000000"> effect </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> mesh.Effects)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">effect.EnableDefaultLighting();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">effect.World = </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreateScale(0.1f) *</span></li> <li>                           <span style="background:#ffffff;color:#000000">(transforms[mesh.ParentBone.Index] * mesh.ParentBone.Transform *</span></li> <li style="background: #f3f3f3">                            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreateTranslation(_modelPosition) *</span></li> <li>                            <span style="background:#ffffff;color:#000000">result.Transformation.ToXnaMatrix());</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000">effect.View = </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreateLookAt(_cameraPosition, </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">.Zero, </span><span style="background:#ffffff;color:#2b91af">Vector3</span><span style="background:#ffffff;color:#000000">.Up);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">effect.Projection = </span><span style="background:#ffffff;color:#2b91af">Matrix</span><span style="background:#ffffff;color:#000000">.CreatePerspectiveFieldOfView(</span><span style="background:#ffffff;color:#2b91af">MathHelper</span><span style="background:#ffffff;color:#000000">.ToRadians(45.0f),</span></li> <li>                <span style="background:#ffffff;color:#000000">_aspectRatio, 1.0f, 10000f);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Draw the mesh, using the effects set above.</span></li> <li>        <span style="background:#ffffff;color:#000000">mesh.Draw();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Since we’re using a 3D model we can’t use the spritebatch to draw it. We set some properties onto the graphicsdevice first. Then we grab all transforms that are included in the model. The Tardis model I’m using is very simple, it’s just a box, so no transformations there. </p>  <p>We loop through all the meshes in the model, for each mesh we loop through its effects and that’s where we set the position. We use the detection result his transformation matrix to calculate the world for each effect and we draw each mesh.</p>  <p>Here’s the result:</p>  <p><a href="http://i40.tinypic.com/110i0d4.jpg" target="_blank"><img src="http://i40.tinypic.com/110i0d4.jpg" /></a></p>  <h2>Conclusion</h2>  <p>The end result might not seem like much, but that’s because my 3D monogame skills are very lacking <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-bottom-style: none; border-right-style: none; border-left-style: none" alt="Glimlach" src="http://www.spikie.be/blog/images/wlEmoticon-smile_29.png" /> but just consider what we’ve done here. We’ve added a camera stream into a game, we’ve used that same stream to detect a certain pattern and we’ve positioned a game element onto that pattern. From here I’ll leave the rest to your imagination.</p>  <p>The project can be downloaded from my <a href="http://sdrv.ms/1eSy0so" target="_blank">Skydrive</a>.</p>
{% include imported_disclaimer.html %}

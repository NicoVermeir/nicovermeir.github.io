---
layout: post
title: "longlistselector with bindable selecteditem"
date: 2013-08-30 11:05:00 +0200
comments: true
published: true
categories: ["post"]
tags: [".Net", "WP8", "XAML"]
alias: ["/blog/post/2013/08/30/.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2013/08/30/.aspx
 - /blog/post/2013/08/30/.aspx
---
<p>In Windows Phone 8 Microsoft wants us to use the LongListSelector instead of the ListBox. But it seems they forgot about something, the SelectedItem property of the LongListSelector isn’t bindable. There are multiple work-arounds for this like event to command in XAML or setting the viewmodel property from the SelectionChanged event. That last one breaks your entire MVVM setup since the code behind of the view is now directly setting properties on the viewmodel.</p>  <p>Today I once again ran into this problem and decided to extend the LongListSelector to allow SelectedItem binding (note: I haven’t searched for an existing extended LongListSelector so it might as well exist somewhere else, this is just my attempt at it).</p>  <p>Create either a Windows Phone class library or a new class in a WP8 project, I called it ExtendedSelector and have it derive from LongListSelector, you’ll need to add a using statement for the Microsoft.Phone.Controls namespace.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:93eb1bf2-4782-4a28-a282-d3d18e356b9b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ExtendedSelector</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">LongListSelector</span></li> </ol> </div> </div> </div>  <p>First we’ll need a dependency property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4a70594c-fa09-4e7f-9993-560a3fee895a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> SelectedItemProperty =</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span><span style="background:#ffffff;color:#a31515">&quot;SelectedItem&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ExtendedSelector</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">)));</span></li> </ol> </div> </div> </div>  <p>and the property that is set through the DP</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8d01e3db-82bc-4aa8-9439-1c6d78fdb775" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> SelectedItem</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> GetValue(SelectedItemProperty); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(SelectedItemProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Notice the “new” keyword on line 1? LongListSelector already has a SelectedItem property of type object, by using the new keyword we make the ExtendedSelector use our version of the property instead of the one from its base class</p>  <p>So now we have a property that can be bound to an object on our viewmodel, all there’s left to do now is set the actual selected item to the property. We do this by handling the SelectionChanged event, the event handler is hooked up in the constructor.</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:95a62aa7-8451-484f-9a5c-48aba1f566d8" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ExtendedSelector()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">SelectionChanged += (sender, args) =&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000">SelectedItem = args.AddedItems[0];</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">};</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div> </p>  <p>And that’s it, we now have a LongListSelector with a bindable SelectedItem property</p>  <h2>Multi-select</h2>  <p>Let’s take it a step further, we want to enable multi-selection of items in our ExtendedSelector.</p>  <p>Start by adding another dependency property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8bb3424b-70c2-4953-98e2-30cd213c3d57" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> SelectionModeProperty =</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span><span style="background:#ffffff;color:#a31515">&quot;SelectionMode&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ExtendedSelector</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000"> SelectionMode</span></li> <li><span style="background:#ffffff;color:#000000"> {</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">) GetValue(SelectionModeProperty); }</span></li> <li>     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(SelectionModeProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> }</span></li> </ol> </div> </div> </div>  <p>SelectionMode is an enum containing three types of modes</p>  <ul>   <li>Single</li>    <li>Multiple</li>    <li>Extended</li> </ul>  <p>I only need single and multiple, so I’m not going to do anything with Extended. Change the constructor of the ExtendedSelector to this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bd6dcd76-5547-41e8-a73c-36f6fa33e1a9" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ExtendedSelector()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">SelectionMode = </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">.Single;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">SelectionChanged += (sender, args) =&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000">(SelectionMode == </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">.Single)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">SelectedItem = args.AddedItems[0];</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (SelectionMode == </span><span style="background:#ffffff;color:#2b91af">SelectionMode</span><span style="background:#ffffff;color:#000000">.Multiple)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (SelectedItem == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">SelectedItem = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> item </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> args.AddedItems)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">((</span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;)SelectedItem).Add(item);                   </span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> removedItem </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> args.RemovedItems)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (((</span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;) SelectedItem).Contains(removedItem))</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000">((</span><span style="background:#ffffff;color:#2b91af">List</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000">&gt;) SelectedItem).Remove(removedItem);</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">}</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>When the class is instantiated we default the SelectionMode to Single, when the property is set from Xaml the setter fires after the constructor, so this is a safe place to put that. Next in the event handler we check for the SelectionMode, if it’s set to Single, nothing changes. When set to Multiple we check if SelectedItem already contains items, if it does add the newly selected item to the list, if it doesn’t we’ll instantiate SelectedItem first as a List&lt;object&gt;. If there are any deselected items we remove them from the list.</p>  <p>And that’s it. A problem easily solved. I’m just hoping that the product team will actually include this functionality in the next SDK update so this post becomes obsolete.</p>  <h2>Conclusion</h2>  <p>This post is a quick fix for the LongListSelector so it supports binding to SelectedItem. If you want the complete class, grab it on <a href="https://gist.github.com/NicoVermeir/6387875" target="_blank">GitHub</a></p>  <h2>Update</h2>  <p>Scott Lovegrove pointed out that the Windows Phone toolkit (<a href="http://phone.codeplex.com/">http://phone.codeplex.com/</a> ) has a LongListMultiSelector, allowing for multiple item selection. It still doesn't have a bindable SelectedItem property but it should be pretty easy to make one like I did with the normal LongListSelector it his post.</p>
{% include imported_disclaimer.html %}

---
layout: post
title: "wp8 as bluetooth start button"
date: 2014-02-25 11:09:31 +0100
comments: true
published: true
categories: ["post"]
tags: [".Net", "Devices", "Bluetooth", "MVVM Light", "WP8", "WPF", "XAML", "Windows programming"]
alias: ["/blog/post/2014/02/25/.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2014/02/25/.aspx
 - /blog/post/2014/02/25/.aspx
---
<p>If you’ve ever used applications like the <a href="http://www.windowsphone.com/nl-be/store/app/office-remote/01f53e5a-7870-49cb-8afc-d6fab6d7a3cd" target="_blank">Office Remote</a> that seem to take over your computer you’ll know that it can provide quite the “magic” experience. As with all magic technologies this one is quite simple as well. All we need is a computer with Bluetooth that runs a small app with a Bluetooth listener and a Windows Phone app that connects to that listener app via Bluetooth. For this demo app I’m going to make the Windows Phone app act like the Start button on a Windows machine.</p>  <h2>Simulating the Windows key</h2>  <p>The listener application is a small WPF app that has only one button. That button will act like the Start button. To interact with the operating system and simulate a keyboard press we’ll need to import user32.dll and hook into its keybd_event. We’ll want to send ctrl + esc to Windows (acts the same as the Windows key)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aac32f4c-1a42-471f-9925-3caf80e140d3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#008000">//source: http://www.codeproject.com/Questions/46731/Open-Start-Menu</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ShowStartMenu()</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// key down event:</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> keyControl = 0x11;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> keyEscape = 0x1B;</span></li> <li>    <span style="background:#ffffff;color:#000000">keybd_event(keyControl, 0, 0, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">keybd_event(keyEscape, 0, 0, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// key up event:</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">const</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">uint</span><span style="background:#ffffff;color:#000000"> keyeventfKeyup = 0x02;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">keybd_event(keyControl, 0, keyeventfKeyup, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li>    <span style="background:#ffffff;color:#000000">keybd_event(keyEscape, 0, keyeventfKeyup, </span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000">.Zero);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">[</span><span style="background:#ffffff;color:#2b91af">DllImport</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;user32.dll&quot;</span><span style="background:#ffffff;color:#000000">)]</span></li> <li><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">extern</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> keybd_event(</span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> bVk, </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000"> bScan, </span><span style="background:#ffffff;color:#0000ff">uint</span><span style="background:#ffffff;color:#000000"> dwFlags,</span></li> <li style="background: #f3f3f3">   <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">UIntPtr</span><span style="background:#ffffff;color:#000000"> dwExtraInfo);</span></li> </ol> </div> </div> </div>  <p>In the event handler of the button we call ShowStartMenu() and behold: a wild software Windows key appears!</p>  <h2>Building the Bluetooth listener</h2>  <p>Adding Bluetooth support to a .NET application isn’t the easiest thing to do. Luckily for us there are libraries out there that take out the hassle. For this project I used Peter Foot’s 32feet.NET library available through NuGet</p>  <h2><font color="#333333">Install-Package 32feet.NET </font></h2>  <p>A small note on this package as found on the <a href="http://inthehand.com/content/32feet.aspx" target="_blank">32feet.NET product page</a></p>  <p><em>“Bluetooth support requires a device with the Microsoft or Widcomm Bluetooth stack”</em></p>  <p>Luckily for me, my device uses the Microsoft BT stack, so I’m good to go. Now on to the code, we’ll need to start a BT listener and once connected read data from a networkstream. If we receive a certain message we’ll execute the ShowStartMenu() method.</p>  <p>First some fields</p>  <p>   <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:27ddb6dc-c233-448e-b621-e9f32c4cfb24" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">BluetoothListener</span><span style="background:#ffffff;color:#000000"> _listener;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#008000">//unique service identifier</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Guid</span><span style="background:#ffffff;color:#000000"> _service = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Guid</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#a31515">&quot;{7A51FDC2-FDDF-4c9b-AFFC-98BCD91BF93B}&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> _connected;</span></li> </ol> </div> </div> </div> </p>  <p>BluetoothListener is a class we get from 32feet.NET. The GUID is a reference to the service this app is providing, our Windows Phone app will need the same GUID to be able to connect to this service. And the third field is a boolean to keep track of having a connected client or not.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bc54f749-c1af-4f08-973a-22c01cbca107" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnLoaded(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">RoutedEventArgs</span><span style="background:#ffffff;color:#000000"> routedEventArgs)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">BluetoothRadio</span><span style="background:#ffffff;color:#000000"> br = </span><span style="background:#ffffff;color:#2b91af">BluetoothRadio</span><span style="background:#ffffff;color:#000000">.PrimaryRadio;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (br == </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;No supported Bluetooth radio/stack found.&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (br.Mode != </span><span style="background:#ffffff;color:#2b91af">RadioMode</span><span style="background:#ffffff;color:#000000">.Discoverable)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBoxResult</span><span style="background:#ffffff;color:#000000"> rslt = </span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Make BluetoothRadio Discoverable?&quot;</span><span style="background:#ffffff;color:#000000">, </span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth Remote Listener&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">MessageBoxButton</span><span style="background:#ffffff;color:#000000">.YesNo);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (rslt == </span><span style="background:#ffffff;color:#2b91af">MessageBoxResult</span><span style="background:#ffffff;color:#000000">.Yes)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">br.Mode = </span><span style="background:#ffffff;color:#2b91af">RadioMode</span><span style="background:#ffffff;color:#000000">.Discoverable;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">_listener = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">BluetoothListener</span><span style="background:#ffffff;color:#000000">(_service);</span></li> <li>    <span style="background:#ffffff;color:#000000">_listener.Start();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">System.Threading.</span><span style="background:#ffffff;color:#2b91af">Thread</span><span style="background:#ffffff;color:#000000"> t = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> System.Threading.</span><span style="background:#ffffff;color:#2b91af">Thread</span><span style="background:#ffffff;color:#000000">(ListenLoop);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">t.Start();</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In the OnLoaded event from the MainWindow we’ll first check if there’s a BT radio found that works on the MS or Widcomm stack. If that’s found, and made discoverable, we’ll start the listener with the service GUID specified in the field. Once the listener is started we fire up a second thread that will contain a loop to connect a client and read data from the stream.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:63a5866d-9b23-471c-87f3-233d5d61b774" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ListenLoop()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[] buffer = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">byte</span><span style="background:#ffffff;color:#000000">[1024];</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">while</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">BluetoothClient</span><span style="background:#ffffff;color:#000000"> bc;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Stream</span><span style="background:#ffffff;color:#000000"> ns;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">bc = _listener.AcceptBluetoothClient();</span></li> <li>            <span style="background:#ffffff;color:#000000">ns = bc.GetStream();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">_connected = </span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">break</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//keep connection open</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">while</span><span style="background:#ffffff;color:#000000"> (_connected)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> received = ns.Read(buffer, 0, buffer.Length);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (received &gt; 0)</span></li> <li>                <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> data = </span><span style="background:#ffffff;color:#2b91af">Encoding</span><span style="background:#ffffff;color:#000000">.UTF8.GetString(buffer);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">string</span><span style="background:#ffffff;color:#000000"> command = data.Substring(0, data.IndexOf(</span><span style="background:#ffffff;color:#a31515">&quot;&#92;0&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">StringComparison</span><span style="background:#ffffff;color:#000000">.Ordinal));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (command == </span><span style="background:#ffffff;color:#a31515">&quot;Start&quot;</span><span style="background:#ffffff;color:#000000">)</span></li> <li>                    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                        <span style="background:#ffffff;color:#000000">ShowStartMenu();</span></li> <li>                    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">}</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">{</span></li> <li>                    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//connection lost</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">_connected = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>                <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000">_connected = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">break</span><span style="background:#ffffff;color:#000000">;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">bc.Close();</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>This is the code for the loop that runs in the second thread. First we declare a buffer of 1KB, more than enough for this sample. Next we start an infinite loop, in that loop we declare a BluetoothClient and a Stream. Once a client connects through the AcceptBluetoothClient method we fetch a stream and set the connected flag to true. As long as we’re connected we read data from the stream into the buffer, once we receive actual data we’ll decode it from a byte array (the buffer) into a string (the original message). In this sample the message will be 5 bytes but the buffer can hold 1024 bytes. It will fill up the remaining bytes with “\0” so we’ll need to chop that of with a Substring. If the received string is “Start” we’ll flip to the Start screen. If we read from the stream but the number of received bytes is zero, we’ve lost the connection to the client.</p>  <p>Fire up the WPF app, make sure the button flips you to the Start screen and let’s get started on the WP8 app!</p>  <h2>Windows Phone Client</h2>  <p>The Windows Phone app consists of two pages. The MainPage is for selecting a Bluetooth peer to connect to and the ConnectedPage has the same button as the WPF application. The app uses MVVM Light, everything happens in the MainViewModel. Both the MainPage and ConnectedPage use MainViewModel as their datacontext. For navigation I’ve added the always helpful Cimbalino NuGet package and registered their NavigationService in SimpleIoc through the ViewModelLocator</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:702884b4-6a06-4d3b-934a-313b82356ad6" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>In the MainViewModel I have declared three properties</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4b0c6b36-05d2-4ccf-807d-6edd4cc9624f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000">&gt; _peers;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000"> _selectedPeer;</span></li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ICommand</span><span style="background:#ffffff;color:#000000"> _goToStartCommand;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ICommand</span><span style="background:#ffffff;color:#000000"> GoToStartCommand</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _goToStartCommand ?? (_goToStartCommand = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">(SendCommand)); }</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000">&gt; Peers</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _peers; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_peers == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_peers = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; Peers);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000"> SelectedPeer</span></li> <li><span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPeer; }</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPeer == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">_selectedPeer = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedPeer);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">ConnectToDevice();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The PeerInformation class is something we get from the Windows Phone Bluetooth API. We have an observablecollection that will hold all peers that are known for your Windows Phone device, we also have a property for the selected peer and a command that will fire a message into the NetworkStream.</p>  <p>We’ll also need some fields</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:747ca8f5-b845-41ad-b12f-93f3c5749f72" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StreamSocket</span><span style="background:#ffffff;color:#000000"> _socket;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataWriter</span><span style="background:#ffffff;color:#000000"> _dataWriter;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> </ol> </div> </div> </div>  <p>The socket will hold the connection between the phone app and the WPF app. The DataWriter can write data into the stream. The NavigationService is the one from the Cimbalino toolkit.</p>  <p>Here’s the constructor for the MainViewModel</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a72785c7-165f-4cfb-a5a9-bddb91262de1" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (IsInDesignModeStatic) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (Microsoft.Devices.</span><span style="background:#ffffff;color:#2b91af">Environment</span><span style="background:#ffffff;color:#000000">.DeviceType == Microsoft.Devices.</span><span style="background:#ffffff;color:#2b91af">DeviceType</span><span style="background:#ffffff;color:#000000">.Emulator)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth not available in the emulator&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">RefreshPairedDevicesList();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>The NavigationService is injected via SimpleIoc. First we check if the current device is the Windows Phone emulator, the emulator doesn’t support Bluetooth so we need an actual device to test this on.</p>  <p>The RefreshPairedDevicesList looks like this (all using the Windows Phone Bluetooth APIs)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:069dec99-7618-4f78-a096-b6ef38bb8ec3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> RefreshPairedDevicesList()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Search for all paired devices</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">PeerFinder</span><span style="background:#ffffff;color:#000000">.AlternateIdentities[</span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth:Paired&quot;</span><span style="background:#ffffff;color:#000000">] = </span><span style="background:#ffffff;color:#a31515">&quot;&quot;</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> peers = </span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PeerFinder</span><span style="background:#ffffff;color:#000000">.FindAllPeersAsync();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000">Peers = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ObservableCollection</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">PeerInformation</span><span style="background:#ffffff;color:#000000">&gt;(peers);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000"> ex)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> ((</span><span style="background:#ffffff;color:#0000ff">uint</span><span style="background:#ffffff;color:#000000">)ex.HResult == 0x8007048F)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(</span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth is off, enable it?&quot;</span><span style="background:#ffffff;color:#000000">, </span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;Bluetooth Off&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">MessageBoxButton</span><span style="background:#ffffff;color:#000000">.OKCancel) == </span><span style="background:#ffffff;color:#2b91af">MessageBoxResult</span><span style="background:#ffffff;color:#000000">.OK)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ConnectionSettingsTask</span><span style="background:#ffffff;color:#000000"> connectionSettingsTask = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ConnectionSettingsTask</span></li> <li>                <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                    <span style="background:#ffffff;color:#000000">ConnectionSettingsType = </span><span style="background:#ffffff;color:#2b91af">ConnectionSettingsType</span><span style="background:#ffffff;color:#000000">.Bluetooth</span></li> <li>                <span style="background:#ffffff;color:#000000">};</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000">connectionSettingsTask.Show();</span></li> <li>                <span style="background:#ffffff;color:#000000">RefreshPairedDevicesList();</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(ex.Message);</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First we’ll look for all paired devices for our phone, those get pushed into the observablecollection. If that fails with result 0x8007048F that means that Bluetooth is disabled on the device, in that case we use the ConnectionSettingsTask to redirect the user to the Bluetooth settings page in WP8.</p>  <p>After the list of peers is build, the user will be able to select one (I’ll discuss the pages in a minute). When a peer is selected we open up the Bluetooth connection</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:44430bc5-c651-4edd-9c30-442c0fafaf32" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ConnectToDevice()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_socket != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Disposing the socket with close it and release all resources associated with the socket</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socket.Dispose();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">try</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">_socket = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">StreamSocket</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">//connect to the service with specified GUID</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _socket.ConnectAsync(SelectedPeer.HostName, </span><span style="background:#ffffff;color:#a31515">&quot;{7A51FDC2-FDDF-4c9b-AFFC-98BCD91BF93B}&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Connection was successful</span></li> <li>        <span style="background:#ffffff;color:#000000">_dataWriter = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DataWriter</span><span style="background:#ffffff;color:#000000">(_socket.OutputStream);</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#a31515">&quot;/ConnectedPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">catch</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">Exception</span><span style="background:#ffffff;color:#000000"> ex)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">MessageBox</span><span style="background:#ffffff;color:#000000">.Show(ex.Message);</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_socket.Dispose();</span></li> <li>        <span style="background:#ffffff;color:#000000">_socket = </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>The ConnectAsync method takes in the hostname of the peer and the same GUID we used in the WPF application to start the service. Once the connection is made we take the OutputStream and use it to initialize the DataWriter and we navigate to the ConnectedPage.</p>  <p>Let’s have a quick look at the MainPage xaml.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:1eb9a172-c459-4b67-91aa-b5f9c8cf98e3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Peers}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">TextBlock</span><span style="background:#ffffff;color:#ff0000"> Margin</span><span style="background:#ffffff;color:#0000ff">=&quot;12, 0, 0, 12&quot;</span></li> <li>                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Style</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneTextTitle2Style}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">                      <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Text</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> DisplayName}</span><span style="background:#ffffff;color:#0000ff">&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">DataTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector.ItemTemplate</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">behaviors</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">SelectedItemBehavior</span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPeer</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot; /&gt;</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Behaviors</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">LongListSelector</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>The MainPage consists of a LongListSelector with an ItemsSource bound to the observableCollection on the MainViewModel. as a DataContext we show the displaynames of all available peers.</p>  <p><strong><u>NOTE</u></strong>: LongListSelector does not support SelectedItem binding. I’ve added a behavior to this project that gives us just that. For more information on the behavior see my <a href="http://www.spikie.be/blog/post/2014/01/10/.aspx" target="_blank">blogpost from a while ago</a>.</p>  <p>The ConnectedPage only has a button with a command bound to the GoToStartCommand on MainViewModel. Once that command is fired we send a string “Start” on to the stream.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:331e0c30-be4b-4eca-9413-c7664580d00a" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> SendCommand()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_dataWriter.WriteString(</span><span style="background:#ffffff;color:#a31515">&quot;Start&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataWriter.StoreAsync();</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> _dataWriter.FlushAsync();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>And that’s it! The message gets written into the DataWriter, stored in the stream and the stream gets flushed. In the WPF app the string gets read into the buffer as a byte array, gets converted back into a string and the Start screen appears!</p>  <h2>Wrap-up</h2>  <p>In this post I’ve discussed how to connect your Windows Phone device to another bluetooth enabled device and use a service running there. </p>  <ul>   <li><a href="http://1drv.ms/1c3H7Wt" target="_blank">WPF app on OneDrive</a></li>    <li><a href="http://1drv.ms/1c3GXhE" target="_blank">WP8 app on OneDrive</a></li> </ul>  <p>Happy coding!</p>
{% include imported_disclaimer.html %}

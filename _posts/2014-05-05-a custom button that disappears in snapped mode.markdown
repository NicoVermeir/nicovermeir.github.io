---
layout: post
title: "a custom button that disappears in snapped mode"
date: 2014-05-05 18:15:10 +0200
comments: true
published: true
categories: ["post"]
tags: [".Net", "WinRT", "Windows 8", "XAML"]
alias: ["/blog/post/2014/05/05/.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2014/05/05/.aspx
 - /blog/post/2014/05/05/.aspx
---
<p>I’m currently working on a Windows 8.1 app that has quite some buttons in the app bar. The buttons are not positioned next to each other in one row and are not all the same size. This means that I can’t use the new CommandBar to auto-hide some buttons whenever the app gets snapped to the side. That means that it’s time for a custom button.</p>  <p>Actually, I have two solutions to this problem. One that puts the hide/show functionality in the button and one that puts it in the page where you use the appbar.</p>  <h2>The one with functionality in the button</h2>  <p>Create a new class and let it derive from Button.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:c54dcc28-d80a-437e-990c-c10e832d8166" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Button</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> HideOnSnapProperty = </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;HideOnSnap&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> HideOnSnap</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">) GetValue(HideOnSnapProperty); }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(HideOnSnapProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> CustomAppBarButton()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">HideOnSnap = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.SizeChanged += CurrentOnSizeChanged;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> CurrentOnSizeChanged(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">WindowSizeChangedEventArgs</span><span style="background:#ffffff;color:#000000"> windowSizeChangedEventArgs)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (!HideOnSnap)</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> size = </span><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.Bounds;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (size.Width &lt;= size.Height)</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Collapsed;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>        <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Visible;</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>First thing we need is a dependency property so we can specify whether or not we want to hide a button in snapped view. From the constructor we subscribe to the SizeChanged event of the current window. Whenever that event fires every button will check if it needs to hide. If HideOnSnap is enabled, the buttons will check if the app is currently snapped by checking if the width of the window is smaller than the height.</p>  <p>To use this control, and let the button hide on snap you can use something like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:adaa285f-b211-4de5-8b2d-fdf1d95ae56b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType1</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button1&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;False&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType1</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button2&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> </ol> </div> </div> </div>  <p>This works peachy, but if you have an appbar with multiple of these buttons and run on a slower system you might experience some delay when opening up the appbar for the first time. All buttons are getting created and are attaching the event handler so depending on the amount of buttons it might take some time.</p>  <p>If you experience the delay, option 2 might work better</p>  <h2>The one where the page handles it</h2>  <p>This option also needs a custom button class but it’s a much smaller one</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:397bd231-9735-48ee-ab30-b09790358291" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">Button</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">readonly</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000"> HideOnSnapProperty = </span><span style="background:#ffffff;color:#2b91af">DependencyProperty</span><span style="background:#ffffff;color:#000000">.Register(</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#a31515">&quot;HideOnSnap&quot;</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">typeof</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000">), </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PropertyMetadata</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">default</span><span style="background:#ffffff;color:#000000">(</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">)));</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000"> HideOnSnap</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">bool</span><span style="background:#ffffff;color:#000000">) GetValue(HideOnSnapProperty); }</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000"> { SetValue(HideOnSnapProperty, </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">); }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> CustomAppBarButton()</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">HideOnSnap = </span><span style="background:#ffffff;color:#0000ff">false</span><span style="background:#ffffff;color:#000000">;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>No event handling in this class, just a dependency property to specify whether or not it needs to hide. The actual hiding and showing of the buttons happens in the page itself.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3564e600-79f6-4124-9c95-2d75f558e2ff" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainPage()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">InitializeComponent();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">SizeChanged += OnSizeChanged;</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">async</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSizeChanged(</span><span style="background:#ffffff;color:#0000ff">object</span><span style="background:#ffffff;color:#000000"> sender, </span><span style="background:#ffffff;color:#2b91af">SizeChangedEventArgs</span><span style="background:#ffffff;color:#000000"> sizeChangedEventArgs)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> size = </span><span style="background:#ffffff;color:#2b91af">Window</span><span style="background:#ffffff;color:#000000">.Current.Bounds;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> dispatcher = Windows.UI.Core.</span><span style="background:#ffffff;color:#2b91af">CoreWindow</span><span style="background:#ffffff;color:#000000">.GetForCurrentThread().Dispatcher;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (size.Width &lt;= size.Height)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> dispatcher.RunAsync(Windows.UI.Core.</span><span style="background:#ffffff;color:#2b91af">CoreDispatcherPriority</span><span style="background:#ffffff;color:#000000">.Normal, HideAllHideableButtons);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">await</span><span style="background:#ffffff;color:#000000"> dispatcher.RunAsync(Windows.UI.Core.</span><span style="background:#ffffff;color:#2b91af">CoreDispatcherPriority</span><span style="background:#ffffff;color:#000000">.Normal, ShowAllHideableButtons);</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We register for the SizeChanged event of the page (event comes from the FrameworkElement class, a page in Windows 8.1 derives from that class). The rest of the code is very similar from the code in the buttons. A difference is that we need to use the dispatcher here to marshall the hiding / showing of the buttons to the UI thread.</p>  <p>Here’s the code to hide all hideable buttons (note that you have to name your appbar, mine is called AppBarBottom</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fbb43471-737d-4b20-8f84-2fab7f6b8b9b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> HideAllHideableButtons()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> buttons = AppBarBottom.FindDescendantsByType&lt;</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButtonType2</span><span style="background:#ffffff;color:#000000">&gt;().Where(b =&gt; b.HideOnSnap);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> appBarButton </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> buttons)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">appBarButton.Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Collapsed;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>We’re looking for all controls on the page that are of type CustomAppBarButton and that have HideOnSnap set to true (don’t worry about the FindDescendantsByType function, that’s an extension method, I’ll come back to it in a minute).</p>  <p>Every button that we found, we set to collapsed and voila, buttons are hidden when snapped. Getting them to show up again is very (very) similar</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f841209d-968b-4c8f-834f-8f6181147bb3" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> ShowAllHideableButtons()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> buttons = </span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">.FindDescendantsByType&lt;</span><span style="background:#ffffff;color:#2b91af">CustomAppBarButton</span><span style="background:#ffffff;color:#000000">&gt;().Where(b =&gt; b.HideOnSnap);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">var</span><span style="background:#ffffff;color:#000000"> appBarButton </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> buttons)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">appBarButton.Visibility = </span><span style="background:#ffffff;color:#2b91af">Visibility</span><span style="background:#ffffff;color:#000000">.Visible;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As for the FindDescendantsByType&lt;T&gt; extension method:</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:96e3f4b8-b641-4451-a6ea-311128a72c3f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">static</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">IEnumerable</span><span style="background:#ffffff;color:#000000">&lt;T&gt; FindDescendantsByType&lt;T&gt;(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">DependencyObject</span><span style="background:#ffffff;color:#000000"> depObj) </span><span style="background:#ffffff;color:#0000ff">where</span><span style="background:#ffffff;color:#000000"> T : </span><span style="background:#ffffff;color:#2b91af">DependencyObject</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (depObj != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000">)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">for</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#0000ff">int</span><span style="background:#ffffff;color:#000000"> i = 0; i &lt; </span><span style="background:#ffffff;color:#2b91af">VisualTreeHelper</span><span style="background:#ffffff;color:#000000">.GetChildrenCount(depObj); i++)</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">{</span></li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">DependencyObject</span><span style="background:#ffffff;color:#000000"> child = </span><span style="background:#ffffff;color:#2b91af">VisualTreeHelper</span><span style="background:#ffffff;color:#000000">.GetChild(depObj, i);</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (child != </span><span style="background:#ffffff;color:#0000ff">null</span><span style="background:#ffffff;color:#000000"> &amp;&amp; child </span><span style="background:#ffffff;color:#0000ff">is</span><span style="background:#ffffff;color:#000000"> T)</span></li> <li>            <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">yield</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> (T)child;</span></li> <li>            <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">foreach</span><span style="background:#ffffff;color:#000000"> (T childOfChild </span><span style="background:#ffffff;color:#0000ff">in</span><span style="background:#ffffff;color:#000000"> FindDescendantsByType&lt;T&gt;(child))</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">{</span></li> <li>                <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">yield</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> childOfChild;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000">}</span></li> <li>        <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>this will look through the visual tree in search for elements of the specified type (I think I found this method on SO somewhere, forgot the exact link but this is not my code).</p>  <p>Usage is exactly the same as with the first type of button.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a2c9d6ef-a305-47a4-bbda-f7135d8dfc5e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType2</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button1&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;False&quot; /&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">local</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">CustomAppBarButtonType2</span><span style="background:#ffffff;color:#ff0000"> Content</span><span style="background:#ffffff;color:#0000ff">=&quot;Button2&quot;</span><span style="background:#ffffff;color:#ff0000"> HideOnSnap</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot; /&gt;</span></li> </ol> </div> </div> </div>              <h2>Conclusion</h2>  <p>In this post I’ve discussed two ways of creating a custom button that can hide itself when the application gets snapped to the side, allowing for a quick way to create an adaptable application bar.</p>  <p>You can find a demo application using both ways of working on my <a href="http://1drv.ms/1mvkni9" target="_blank">OneDrive</a> (Top appbar uses first type, bottom appbar uses second type).</p>
{% include imported_disclaimer.html %}

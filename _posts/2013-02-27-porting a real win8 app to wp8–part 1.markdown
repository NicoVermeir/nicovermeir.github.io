---
layout: post
title: "porting a real win8 app to wp8â€“part 1"
date: 2013-02-27 13:23:00 +0100
comments: true
published: true
categories: ["post"]
tags: [".Net", "Devices", "Metro", "MVVM Light", "PCL", "Windows 8", "WinRT", "WP8"]
alias: ["/blog/post/2013/02/27/Porting-a-real-win8-app-to-WP8-part-1.aspx", "/blog/post/2013/02/27/porting-a-real-win8-app-to-wp8-part-1.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2013/02/27/Porting-a-real-win8-app-to-WP8-part-1.aspx
 - /blog/post/2013/02/27/porting-a-real-win8-app-to-wp8-part-1.aspx
---
<p>A few weeks ago the first version of my Windows 8 app (finally) hit the store <a href="http://apps.microsoft.com/windows/app/comic-cloud/b44fe28d-9754-4c98-bbca-3242c73b568a" target="_blank">(download it here)</a>.&nbsp; From the start I wanted to port this application to Windows Phone 8 as well but I didn&rsquo;t keep that in mind when developing the app. Some time ago, the portable HttpClient was released in a beta version and to me that was the perfect time to see how useful the portable class libraries (PCL) really are.</p>
<p>Most of the information available on the internet on sharing code between Windows Store and Windows Phone apps have those really small basic projects, good stuff to get started, but I want to port an entire, finished project to another platform. Perfect content for some blog posts so I&rsquo;ll be documenting my progress here on my blog, hopefully it will be to some use.</p>
<h2>The app</h2>
<p>The app is called Comic Cloud and is a continuation of my very first Windows Phone 7 app ever. It allows users to search for anything related to comic books (volumes, issues, artists, characters, locations, &hellip;) and provides a whole bunch of information on the topic. The data comes from a community driven website (think Wikipedia for comics) called ComicVine. They have a great REST API with great documentation so that was perfect. On the other hand, and this is new in the Windows 8 version, users can start tracking their own collection of comic books and keep track of which issues in their collection are already read. This data is saved on Azure by using the awesome Azure Mobile Services, authentication happens with the Microsoft Account (single sign-on). So researching and collection are the two keywords of the application. Since the API is REST based, I make extensive use of the HttpClient class to make the API calls.</p>
<h2>Architecture</h2>
<p>As for architecture, all libraries are Windows Store class libraries and then off course there&rsquo;s the app itself, written in C# and XAML. This image shows the projects and their dependencies.</p>
<p><img src="http://i47.tinypic.com/6qfdk7.jpg" alt="" /></p>
<p>(The app was called ComicDB in its begin stages, the namespaces stayed but the app title was changed to Comic Cloud)</p>
<p>The solution exists of five projects, first there&rsquo;s the app itself using MVVM Light, win8nl for winRT behaviors (written by Joost van Schaik), MarkedUp for analytics, Callisto for settings fly-out, the Live SDK for the User class and the Telerik RAD controls for their controls (obviously).</p>
<p>The Model project contains all classes, there&rsquo;s the ComicVine classes (thank God for paste JSON as class&hellip;) and some classes for RSS feeds and links.</p>
<p>Since I want to limit the amount of data stored in my WAMS database, I only save the userID and the link to the ComicVine API for each item. For that I needed a second version of some classes, that&rsquo;s what the DTO project is for.</p>
<p>The framework is a project that I can reuse in other projects without changing anything, all classes that are app independent. Things like the RestClient (providing generic CRUD functions), the GroupInfoList for grouped gridviews, navigationservice to navigate between pages and so on. The ComicVineHelper is an extension method that changes the casing of some object to be compatible with the way the ComicVine API works. All these classes are implementing interfaces, so that will be a big plus when I start porting.</p>
<p>The SDKBroker takes all the different services I use and puts them together in one big SDK that&rsquo;s easy to use from the app.</p>
<h2>The idea</h2>
<p>So the idea was to take all those libraries, put them in PCL libraries and reference them from both the Windows Store app and the Windows Phone app. Next to that I wanted to use the portable version of MVVM Light to share my viewmodels over both projects as well. Turns out that, as usual, a good idea is stopped by technical limitations.</p>
<h2>The problem</h2>
<p>The problem is the difference between Windows 8 and Windows Phone, they don&rsquo;t share their entire codebase. Meaning I can&rsquo;t reuse all my code in a PCL. Also the Azure Mobile Services SDK has no portable version, so same problem there.</p>
<p>The solution is abstractions, create an interface for every class that isn&rsquo;t compatible with the PCL projects and implement them in a platform specific library. The PCLs I&rsquo;m using only target .net 4.5, winRT and WP8 so a lot of problems are already taken care of by not selecting WP7.X compatibility.</p>
<h2>The road so far</h2>
<p>I wanted to start out by replacing MVVM Light with the PCL version. This turned out to be easier said than done, the initial project was started from the MVVM Light template so I threw out the references to MVVM Light and added the PCL version through NuGet. Visual Studio went quite mad and started throwing all sorts of weird build errors, I eventually found out that the win8nl library also includes the MVVM Light assemblies and those conflicted with the PCL versions. But I needed the win8nl assembly for the eventtocommand behaviors in WinRT so that posed a big problem. Luckily there&rsquo;s the winRTBehaviors assembly that contains the logic to do behaviors but it doesn&rsquo;t include the actual eventtocommand one. The solution was to go to the Codeplex site of win8nl and copy the behavior classes from there and put them in my framework project. One problem solved.</p>
<p>The next step was to add a PCL for the Framework and SDKBroker projects, the Model was already a PCL so that one could stay as it was. The PCL libs got named ComicDB.Framework and ComicDB.SDKBroker, they contain a combination of interfaces and classes. Everything that couldn&rsquo;t be made portable was abstracted into an interface and implemented in platform specific libraries called ComicDB.Framework.WinRT and ComicDB.SDKBroker.WinRT. The classes that needed abstraction were the NavigationService, Network helper, WAMS service class and Service helper. Thanks to the new portable HttpClient assembly I could copy my RestClient class to a PCL without any adjustments.</p>
<p>With some tinkering I got the project to build and run again and I saw that it was good. The time had come to move my ViewModels over to a PCL. I added a new PCL project called ComicDB.ViewModel (same namespace as my VMs already had) and added the portable MVVM Light version. The ViewModelLocator can&rsquo;t be moved since it needs to register all the correct interface implementations into the IOC container, so I&rsquo;ll have a separate Locator class for Win8 and WP8. As I started moving ViewModels I quickly ran into a navigational problem, my viewmodels have navigation logic and the pages they are navigating to aren&rsquo;t known in the PCL. To solve this I&rsquo;ve created an interface for every page and set that as navigational target, I don&rsquo;t know if this will work but I&rsquo;ll find out soon enough and put it in part 2 if this diary.</p>
<p>Navigational problem solved, on to the next one. Two of my viewmodels could show toast notifications, I use the notifications helper classes from MSDN to get this done but the notification classes aren&rsquo;t portable (and they really don&rsquo;t need to be since Windows Phone doesn&rsquo;t support in-app toasts, the C4F toolkit fixes that luckily) so I created an IMessageAPI interface that has a PopToast() method. In FrameWork.WinRT it shows a build-in toast just like the app used to do.</p>
<p>Hey remember that we have to do everything async now and that we can call the Dispatcher to execute something on the UI thread? Not happening in a PCL&hellip; MVVM Light contains a DispatcherHelper that checks if an action needs to be executed on the UI thread and actually executes it there when needed, except in the PCL version. So IDispatcher was born.</p>
<p>With that done I got my project to build again and to run but it&rsquo;s currently still using the old viewmodels, I expect a whole bunch of new problems when I try to change it to the PCL versions, but that will be for part 2.</p>
<h2>What&rsquo;s next</h2>
<p>In part 2 I hope to make the app use the PCL version of the viewmodels and I&rsquo;ll start working on the Windows Phone project.</p>
<h2>Conclusion</h2>
<p>PCL projects sound very good in theory but in reality they are a great PITA to work with. Portable HttpClient and portable MVVM Light make them useful but you&rsquo;ll have to right loads of extra code, abstractions and helper classes to get to something that looks like build once run on two platforms. I could&rsquo;ve given up and just rebuild everything in a separate solution for WP8 but I want to see how far I can take this and document it along the way.</p>
<p>That said, I have no idea when part 2 will be live, that depends on when I can gather the courage to reference the viewmodel project <img class="wlEmoticon wlEmoticon-smile" style="border-style: none;" src="http://www.spikie.be/blog/images/wlEmoticon-smile_14.png" alt="Smile" /></p>
{% include imported_disclaimer.html %}

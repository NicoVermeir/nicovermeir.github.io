---
layout: post
title: "binding a dynamic pivot in windows phone 7"
date: 2011-12-13 13:30:47 +0100
comments: true
published: true
categories: ["post"]
tags: [".Net", "WP7", "XAML", "Binding", "Silverlight"]
alias: ["/blog/post/2011/12/13/Binding-a-dynamic-Pivot-in-Windows-Phone-7.aspx", "/blog/post/2011/12/13/binding-a-dynamic-pivot-in-windows-phone-7.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2011/12/13/Binding-a-dynamic-Pivot-in-Windows-Phone-7.aspx
 - /blog/post/2011/12/13/binding-a-dynamic-pivot-in-windows-phone-7.aspx
---
<p>I’m currently working on a Windows Phone 7 application that needs a dynamic Pivot. For every item in a list there should be a pivot item. Besides that, every dynamic pivot item should have a listbox that is bound to another list. I found very little information on these topics so I decided to write it down myself.</p>  <p>Both the header binding and the listbox binding are done from the same class. The class is called DemoClass and contains a string Name that will be bound to the header of the pivot item and a list of strings called Result that will be bound to the pivot item’s body. Here’s the code for the class:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a752fbcf-a38f-43c0-ba48-25fe2f4710a0" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System.Collections.ObjectModel;</li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="color:#0000ff">namespace</span> BindingDynamicPivotDemo</li> <li style="background: #f3f3f3">{</li> <li>    <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">DemoClass</span></li> <li style="background: #f3f3f3">    {</li> <li>        <span style="color:#0000ff">public</span> <span style="color:#0000ff">string</span> Name { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#0000ff">string</span>&gt; Result { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> DemoClass()</li> <li>        {</li> <li style="background: #f3f3f3">            Result = <span style="color:#0000ff">new</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#0000ff">string</span>&gt;();</li> <li>        }</li> <li style="background: #f3f3f3">    }</li> <li>}</li> </ol> </div> </div> </div>  <p>I used ObservableCollection here instead of List because ObservableCollection already implements INotifyPropertyChanged and takes care of notifying all it’s subscribers when it changes. It’s perfectly possible to use a IList&lt;string&gt; instead of the ObservableCollection but then the DemoClass needs to implement INotifyPropertyChanged. In the constructor of the class the collection gets initialized.</p>  <p>Next thing I needed was a viewmodel to bind to my xaml page. The viewmodel declares a collection of DemoClass instances and fills those instances with dummy data.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b3ec391b-8961-4e21-84dc-3bf3aba31418" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">using</span> System.Collections.ObjectModel;</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BindingDynamicPivotDemo</li> <li>{</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">MainViewModel</span></li> <li>    {</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#2b91af">DemoClass</span>&gt; PivotItems { <span style="color:#0000ff">get</span>; <span style="color:#0000ff">set</span>; }</li> <li>        </li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> MainViewModel()</li> <li>        {</li> <li style="background: #f3f3f3">            PivotItems = <span style="color:#0000ff">new</span> <span style="color:#2b91af">ObservableCollection</span>&lt;<span style="color:#2b91af">DemoClass</span>&gt;();</li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="color:#008000">//load pivot headers</span></li> <li>            LoadData();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="color:#008000">//load random dummy data for the pivot body</span></li> <li style="background: #f3f3f3">            FillLists();</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> LoadData()</li> <li style="background: #f3f3f3">        {</li> <li>            <span style="color:#008000">//pivot headers</span></li> <li style="background: #f3f3f3">            <span style="color:#0000ff">for</span> (<span style="color:#0000ff">int</span> i = 1; i &lt;= 10; i++)</li> <li>            {</li> <li style="background: #f3f3f3">                <span style="color:#2b91af">DemoClass</span> newClass = <span style="color:#0000ff">new</span> <span style="color:#2b91af">DemoClass</span> {Name = <span style="color:#a31515">&quot;pivotItem &quot;</span> + i};</li> <li>&nbsp;</li> <li style="background: #f3f3f3">                PivotItems.Add(newClass);</li> <li>            }</li> <li style="background: #f3f3f3">        }</li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="color:#0000ff">public</span> <span style="color:#0000ff">void</span> FillLists()</li> <li>        {</li> <li style="background: #f3f3f3">            <span style="color:#2b91af">Random</span> rnd = <span style="color:#0000ff">new</span> <span style="color:#2b91af">Random</span>();</li> <li>&nbsp;</li> <li style="background: #f3f3f3">            <span style="color:#008000">//fill each list with dummy data, this will be shown in the pivot body</span></li> <li>            <span style="color:#0000ff">foreach</span> (<span style="color:#2b91af">DemoClass</span> pivotItem <span style="color:#0000ff">in</span> PivotItems)</li> <li style="background: #f3f3f3">            {</li> <li>                pivotItem.Result.Clear();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>                <span style="color:#0000ff">for</span> (<span style="color:#0000ff">int</span> j = 0; j &lt; 10; j++)</li> <li style="background: #f3f3f3">                {</li> <li>                    pivotItem.Result.Add(<span style="color:#a31515">&quot;item &quot;</span> + rnd.Next(0, 1000));</li> <li style="background: #f3f3f3">                }</li> <li>            }</li> <li style="background: #f3f3f3">        }</li> <li>    }</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>I am again using an ObservableCollection for the same reason as I did in the DemoClass. LoadData() creates 10 instances of DemoClass and adds them to the PivotItems collection. FillLists() will fill the Result collection of every DemoClass instance with random dummy data.</p>  <p>Next step is to let the view know where it needs to look for its data. This can be done from xaml or from code behind. MVVM Light takes the xaml approach while the default Visual Studio projects do it from code behind, since this is a default project I followed the code behind approach. This is how my MainPage.xaml.cs looks liks.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0af1932a-6a1d-496c-99a9-c0f316cc2a17" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">using</span> System.Windows;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">using</span> Microsoft.Phone.Controls;</li> <li>&nbsp;</li> <li style="background: #f3f3f3"><span style="color:#0000ff">namespace</span> BindingDynamicPivotDemo</li> <li>{</li> <li style="background: #f3f3f3">    <span style="color:#0000ff">public</span> <span style="color:#0000ff">partial</span> <span style="color:#0000ff">class</span> <span style="color:#2b91af">MainPage</span> : <span style="color:#2b91af">PhoneApplicationPage</span></li> <li>    {</li> <li style="background: #f3f3f3">        <span style="color:#008000">// Constructor</span></li> <li>        <span style="color:#0000ff">public</span> MainPage()</li> <li style="background: #f3f3f3">        {</li> <li>            InitializeComponent();</li> <li style="background: #f3f3f3">&nbsp;</li> <li>            <span style="color:#008000">// Set the data context of the listbox control to the sample data</span></li> <li style="background: #f3f3f3">            DataContext = <span style="color:#2b91af">App</span>.ViewModel;</li> <li>        }</li> <li style="background: #f3f3f3">&nbsp;</li> <li>        <span style="color:#0000ff">private</span> <span style="color:#0000ff">void</span> Button_Click(<span style="color:#0000ff">object</span> sender, <span style="color:#2b91af">RoutedEventArgs</span> e)</li> <li style="background: #f3f3f3">        {</li> <li>            <span style="color:#2b91af">App</span>.ViewModel.FillLists();</li> <li style="background: #f3f3f3">        }</li> <li>    }</li> <li style="background: #f3f3f3">}</li> </ol> </div> </div> </div>  <p>Instantiation of the ViewModel occurs in App.xaml.cs and is auto-generated code. The Button_Click method is an event handler for a button, obviously. It will call a method on the ViewModel that regenerates new random dummy data for the pivot body. This shows how an ObservableCollection gives a powerful auto-updating binding while keeping the DemoClass nice and clean.</p>  <p>Now let’s take a look at the xaml and specifically at the bindings. This is the MainPage.xaml.</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ea9dba85-96b0-4c9a-a9da-757e9a78504b" class="wlWriterEditableSmartContent"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Grid</span><span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;LayoutRoot&quot;</span><span style="color:#ff0000"> Background</span><span style="color:#0000ff">=&quot;Transparent&quot;&gt;</span></li> <li style="background: #f3f3f3">        <span style="color:#a31515"></span><span style="color:#008000">&lt;!--Pivot Control--&gt;</span></li> <li>        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot</span><span style="color:#ff0000"> x</span><span style="color:#0000ff">:</span><span style="color:#ff0000">Name</span><span style="color:#0000ff">=&quot;PivotPlatform&quot;</span><span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0,0,8,77&quot;</span><span style="color:#ff0000"> Title</span><span style="color:#0000ff">=&quot;BindingDynamicPivotDemo&quot;</span><span style="color:#ff0000"> ItemsSource</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> PivotItems}</span><span style="color:#0000ff">&quot; &gt;</span></li> <li style="background: #f3f3f3">            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.HeaderTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span><span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> Name}</span><span style="color:#0000ff">&quot;/&gt;</span></li> <li>                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.HeaderTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">ListBox</span><span style="color:#ff0000"> ItemsSource</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding</span><span style="color:#ff0000"> Result}</span><span style="color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">                        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">ListBox.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">TextBlock</span><span style="color:#ff0000"> TextWrapping</span><span style="color:#0000ff">=&quot;Wrap&quot;</span><span style="color:#ff0000"> Text</span><span style="color:#0000ff">=&quot;{</span><span style="color:#a31515">Binding}</span><span style="color:#0000ff">&quot; /&gt;</span></li> <li>                            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">ListBox.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>                    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">ListBox</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">                <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">DataTemplate</span><span style="color:#0000ff">&gt;</span></li> <li>            <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot.ItemTemplate</span><span style="color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">controls</span><span style="color:#0000ff">:</span><span style="color:#a31515">Pivot</span><span style="color:#0000ff">&gt;</span></li> <li>        <span style="color:#a31515"></span><span style="color:#0000ff">&lt;</span><span style="color:#a31515">Button</span><span style="color:#ff0000"> Content</span><span style="color:#0000ff">=&quot;Randomize&quot;</span><span style="color:#ff0000"> HorizontalAlignment</span><span style="color:#0000ff">=&quot;Right&quot;</span><span style="color:#ff0000"> VerticalAlignment</span><span style="color:#0000ff">=&quot;Bottom&quot;</span><span style="color:#ff0000"> Margin</span><span style="color:#0000ff">=&quot;0,0,0,4&quot;</span><span style="color:#ff0000"> Click</span><span style="color:#0000ff">=&quot;Button_Click&quot;/&gt;</span></li> <li style="background: #f3f3f3">    <span style="color:#a31515"></span><span style="color:#0000ff">&lt;/</span><span style="color:#a31515">Grid</span><span style="color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>I only pasted the layoutRoot grid here because all the xml namespaces are the default ones from a WP7 project. So for starters I’ve bound the Pivot’s ItemsSource to the PivotItems collection. Then I declare two templates, the header template is the title of the pivot item, by binding it to name it will use the Name property from the DemoClass. Since the Pivot’s ItemsSource is bound to PivotItems, the textblock in the header template is now bound to PivotItems.Name. The itemtemplate is what makes up the pivot’s body, it contains a listbox that is bound to PivotItems.Result. Underneath the pivot is a button that triggers the event handler in MainPage.xaml.cs.</p>  <p>When this is executed you’ll see an automatically generated pivot bound to dummy data, every time the button is clicked new data will be generated and shown in the pivot immediately thanks to the ObservableCollection.</p>  <p><a href="http://www.spikie.be/blog/images/screen.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="screen" border="0" alt="screen" src="http://www.spikie.be/blog/images/screen_thumb.png" width="148" height="244" /></a></p>  <p>The source of this project can be found <a href="https://skydrive.live.com/redir.aspx?cid=5a345bb15e973473&amp;resid=5A345BB15E973473!471&amp;parid=5A345BB15E973473!250" target="_blank">here</a>.</p>  <h3>Conclusion</h3>  <p>In this small article I explained how you can databind a pivot so that it’s items are automatically generated and bound to other properties. It’s not hard to do but it took me some time to figure out so I hope I’ve helped someone by writing down my findings.</p>
{% include imported_disclaimer.html %}

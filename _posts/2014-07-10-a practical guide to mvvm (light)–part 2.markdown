---
layout: post
title: "a practical guide to mvvm (light)–part 2"
date: 2014-07-10 14:34:24 +0200
comments: true
published: true
categories: ["post"]
tags: [".Net", "Binding", "MVVM Light", "Metro", "Silverlight", "WP7", "WP8", "WPF", "WinRT", "Windows 8", "XAML"]
alias: ["/blog/post/2014/07/10/.aspx"]
author: Nico Vermeir
redirect_from:
 - /blog/post/2014/07/10/.aspx
 - /blog/post/2014/07/10/.aspx
---
<p><a href="http://www.spikie.be/blog/post/2014/06/30/.aspx" target="_blank">A practical guide to MVVM (Light) – Part 1</a></p>  <p>In part 1 I’ve shown you how to setup a new Windows Phone project with MVVM Light, how to hookup everything and we’ve seen what databinding is and how it works. In this part we’re going to build on that same project, delving a bit deeper into MVVM in a practical way.</p>  <h2>Intro</h2>  <p>In part 2 we’ll have a look at how to navigate from a list page, like the one we’ve created in part 1, to a detail page. We’ll need to inform the viewmodel on what item was clicked so that it can fetch more detailed information from the datastore. We’ll also have a look at value converters, a feature not really MVVM related but one that’s really important so I’m including it here anyway.</p>  <h2>Navigation</h2>  <p>There are a few ways to get navigation done in a Windows Phone app. You can use a NavigationService class for example. A class that can get injected via SimpleIoc and that has a .Navigate function, the <a href="http://cimbalino.org/" target="_blank">Cimbalino Toolkit</a> has one build-in for example. One other way to do navigation without delving into code-behind code in the view is by using Behaviors and Actions in XAML. Don’t worry, you don’t need to remember the exact syntax as long as you have Blend. </p>  <p>Open up the MainPage.xaml of our Part 1 project in Blend and have a look at the Assets Tab. (Quick tip: if you want to open a certain page in Blend, right-click it in Visual Studio and select “Open in Blend”, this also works for opening a page from Blend in Visual Studio).</p>  <p><a href="http://i60.tinypic.com/107nyfs.jpg" target="_blank"><img src="http://i60.tinypic.com/107nyfs.jpg" width="226" height="232" /></a></p>  <p>In the Behaviors section you’ll find a bunch of Actions and Behaviors. An interesting one here is the NavigateToPageAction, drag and drop that one onto the ListBox. You’ll notice that the Action has attached itself to the ListBox if you have a look at the Objects &amp; Timeline pane.</p>  <p><a href="http://i62.tinypic.com/15wl4xf.jpg" target="_blank"><img src="http://i62.tinypic.com/15wl4xf.jpg" width="256" height="53" /></a></p>  <p>Before we can navigate we need to create a new page, add a page called DetailPage.xaml to the View folder of the project. Creating the page can be done from either Blend or Visual Studio. After creating the DetailPage, go back to MainPage in Blend and select the NavigateToPageAction that’s attached to the Listbox in the Objects &amp; Timeline pane. Go to the properties.</p>  <p><a href="http://i59.tinypic.com/166ix50.jpg" target="_blank"><img src="http://i59.tinypic.com/166ix50.jpg" width="170" height="266" /></a></p>  <p>You’ll see here that the action contains a trigger. There we can select what event from the Listbox will trigger the action, set this to SelectionChanged. In the dropdown for TargetPage you should see MainPage and DetailPage (and any other pages you might have created), set it to DetailPage and run the app. Click on an item and you’ll see that the app navigates to the detailpage. This is what the action looks like in XAML.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8191f465-e10c-4e52-aefd-a333eb653a76" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PersonTemplate}</span><span style="background:#ffffff;color:#0000ff">&quot;</span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#ff0000"> EventName</span><span style="background:#ffffff;color:#0000ff">=&quot;SelectionChanged&quot;&gt;</span></li> <li style="background: #f3f3f3">            <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ec</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">NavigateToPageAction</span><span style="background:#ffffff;color:#ff0000"> TargetPage</span><span style="background:#ffffff;color:#0000ff">=&quot;/View/DetailPage.xaml&quot; /&gt;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <h2>Loading detailed data for clicked item</h2>  <p>When we select an item we navigate to a detail page. It would be nice to effectively show all the details. When using a ListBox this is pretty easy. We can just define a property on the viewmodel and bind the ListBox’s SelectedItem property to the property on the viewmodel. The property could look something like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d9c25d1c-c936-4e74-b1df-e5c5a7a8dfb7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPerson; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPerson == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">_selectedPerson = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">; </span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedPerson);</span></li> <li>        <span style="background:#ffffff;color:#000000">LoadDetails();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>The binding on the ListBox would look like this</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b30ed17a-0bb7-4939-81de-0b136f75670f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PersonTemplate}</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> SelectedItem</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectedPerson</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li style="background: #f3f3f3">                               <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=TwoWay}&quot;&gt;</span></li> </ol> </div> </div> </div>  <p>Notice that we have to specify that this is a two-way binding. If we don’t, the property will not get updated from the view. Databinding by default is OneWay, from the viewmodel to the view.</p>  <p>While this is a valid way of working, it has some issues.</p>  <ul>   <li> LongListSelector doesn’t support binding to SelectedItem (I described workarounds for this <a href="http://www.spikie.be/blog/post/2013/08/30/.aspx" target="_blank">here</a> and <a href="http://www.spikie.be/blog/post/2014/01/10/.aspx" target="_blank">here</a>)</li>    <li> The DetailPage needs to have MainViewModel as datacontext, which is possible and allowed but often this means that a viewmodel turns into a superclass that handles the datacontext for every view.</li> </ul>  <p>On to the next possibility we go!</p>  <h2>EventToCommand</h2>  <p>The way of passing the selecteditem from the view to the viewmodel and to the next viewmodel I’m about to describe takes a bit more setup than the previous part. However, while it is a bit more work, it’s my preferred way of working. To me this feels like the “MVVM way” but use whatever feels most comfortable for you.</p>  <p>Go into Blend and delete the NavigateToPageAction that is still attached to the ListBox. Go back to the Assets pane, to the list of Behaviors. You’ll find that in the list is an EventToCommand behavior. This allows us to hook up events fired by controls in the view to trigger certain actions on the viewmodel. Drag &amp; drop the EventToCommand onto the ListBox.</p>  <p>Before specifying the target command for the behavior, we’ll have to add one to the viewmodel first. Windows Phone has an interface called ICommand that we can use for binding. MVVM Light comes with two implementations of ICommand called RelayCommand and RelayCommand&lt;T&gt;. We’re going to use the generic version RelayCommand&lt;T&gt; because this way we can get the event arguments into our viewmodel.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d6b78795-2a8a-481f-b19d-bb9ef2a4cca7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; _selectionChangedCommand;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt; SelectionChangedCommand</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectionChangedCommand ??</span></li> <li style="background: #f3f3f3">               <span style="background:#ffffff;color:#000000">(_selectionChangedCommand = </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">RelayCommand</span><span style="background:#ffffff;color:#000000">&lt;</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000">&gt;(OnSelectionChanged));</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>When using the generic version of RelayCommand we specify the type of T as the type of eventargs we’re expecting. Note that this can also be a string that’s passed in as commandparameter for example when binding to a button’s command property.</p>  <p>SIDENOTE – the ?? operator: If you’ve never seen the ?? operator before, it checks if whatever’s on its leftside is not null, if it is it executes whatever’s on its rightside. In this case the rightside will only get executed the very first time the command is called, that’s when the private field is instantiated.</p>  <p>the parameter passed into the RelayCommand&lt;T&gt; constructor is the action that we’ll be executing when the command is called.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:54f93d22-0f05-49ba-a049-251755e60fb7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">throw</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> System.</span><span style="background:#ffffff;color:#00008b">NotImplementedException</span><span style="background:#ffffff;color:#000000">();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>We’ll complete this in a minute, just leave it like this to make the application compile.</p>  <p>Bind the EventToCommand Command property to the RelayCommand either through Blend or in XAML. Make sure to check the PassEventArgsToCommand checkbox when going via Blend. This is what the XAML should look like.</p>    <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:36e77443-4ea3-4504-997a-bbb6dea6dbd4" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#ff0000"> ItemTemplate</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PersonTemplate}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#ff0000">ItemsSource</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Persons}</span><span style="background:#ffffff;color:#0000ff">&quot;&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#ff0000"> EventName</span><span style="background:#ffffff;color:#0000ff">=&quot;SelectionChanged&quot;&gt;</span></li> <li>            <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">Command</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventToCommand</span><span style="background:#ffffff;color:#ff0000"> PassEventArgsToCommand</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span><span style="background:#ffffff;color:#ff0000"> Command</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> SelectionChangedCommand</span><span style="background:#ffffff;color:#0000ff">,</span><span style="background:#ffffff;color:#ff0000"> Mode</span><span style="background:#ffffff;color:#0000ff">=OneWay}&quot;/&gt;</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">EventTrigger</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li>    <span style="background:#ffffff;color:#0000ff"></span><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">i</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">Interaction.Triggers</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#0000ff">&lt;/</span><span style="background:#ffffff;color:#a31515">ListBox</span><span style="background:#ffffff;color:#0000ff">&gt;</span></li> </ol> </div> </div> </div>  <p>No more SelectedItem binding. If we place a breakpoint in the OnSelectionChanged method and check the parameter you should see the selected item in there.</p>  <p><a href="http://i58.tinypic.com/21a05fc.jpg" target="_blank"><img src="http://i58.tinypic.com/21a05fc.jpg" width="609" height="117" /></a></p>  <p>So far, we’re using the controls their events, using a behavior to pass the eventhandler to a command on our ViewModel. No code behind required, clean MVVM setup. The next step is to navigate to another page and pass the selected item to another viewmodel. Let’s start by navigating.</p>  <h2>Navigating via the ViewModel</h2>  <p>I’ve mentioned before that navigating from within the viewmodel can be done by using a NavigationService. It’s time to do just that. A NavigationService is not included in Windows Phone so we’ll either need to write one or use an existing one. I’m going to do the latter and use an existing one.</p>  <p>Use either NuGet or the Package manager console to add the Cimbalino Windows Phone toolkit to the project</p>  <p><strong><font size="2">Install-Package Cimbalino.Phone.Toolkit </font></strong></p>  <p>Now it’s time to revisit the ViewModelLocator. Remember SimpleIoc? We used the ViewModelLocator to register services and use constructor injection to inject those services into our viewmodels. First add a using statement to the ViewModelLocator</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e19cf7d0-1167-477b-ad14-f08a5c93b2a0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">using</span><span style="background:#ffffff;color:#000000"> Cimbalino.Phone.Toolkit.Services;</span></li> </ol> </div> </div> </div>  <p>Next, register the NavigationService in SimpleIoc. (line 14)</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e9a72927-5b9d-405c-acfd-b85c4f395190" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> ViewModelLocator()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.SetLocatorProvider(() =&gt; </span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default);</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (</span><span style="background:#ffffff;color:#2b91af">ViewModelBase</span><span style="background:#ffffff;color:#000000">.IsInDesignModeStatic)</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create design time view services and models</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DesignDataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">else</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#008000">// Create run time view services and models</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">DataService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000">, </span><span style="background:#ffffff;color:#2b91af">NavigationService</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">MainViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Back to the MainViewModel, we add a new parameter to its constructor.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fbe57458-5455-4552-86a5-258620a38e55" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> _navigationService;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> MainViewModel(</span><span style="background:#ffffff;color:#2b91af">IDataService</span><span style="background:#ffffff;color:#000000"> dataService, </span><span style="background:#ffffff;color:#2b91af">INavigationService</span><span style="background:#ffffff;color:#000000"> navigationService)</span></li> <li><span style="background:#ffffff;color:#000000"> {</span></li> <li style="background: #f3f3f3">     <span style="background:#ffffff;color:#000000">_navigationService = navigationService;</span></li> </ol> </div> </div> </div>  <p>Using the NavigationService is pretty easy.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:50aadc50-9cec-48a5-9be1-108e60d6bc4b" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#a31515">&quot;/View/DetailPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Do be careful with the path to the page, it’s a string so no intellisense. If the page is in a folder make sure to start with “/”. Run the app, click an item. The app should navigate to the DetailPage, just like we had before. Time to add the PersonViewModel. Add a class named PersonViewModel and make it inherit ViewModelBase, that’s enough for now.</p>  <p>Every new viewmodel in an MVVM Light application needs to be added to the ViewModelLocator. We need to register the viewmodel in SimpleIoc and create a property to allow databinding. First register the viewmodel in the ViewModelLocator’s constructor</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:e1b6c83d-75f3-44fa-8158-cb3d3f17d868" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> </ol> </div> </div> </div>  <p>Next is the property</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:aa25ae06-c874-419a-a9ae-d4592ba8a985" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000"> Person</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">ServiceLocator</span><span style="background:#ffffff;color:#000000">.Current.GetInstance&lt;</span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000">&gt;();</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Now we can set the DetailPage’s datacontext to the PersonViewModel by adding this to the opening tag of the page.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7726923c-efd0-47c2-bb33-a7fe612ad472" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Person</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li style="background: #f3f3f3">                     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> </ol> </div> </div> </div>  <p>For your reference, here’s the complete tag</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fcd2b402-05c4-408b-979f-ef0960c20621" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 500px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">&lt;</span><span style="background:#ffffff;color:#a31515">phone</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#a31515">PhoneApplicationPage</span><span style="background:#ffffff;color:#ff0000"> x</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Class</span><span style="background:#ffffff;color:#0000ff">=&quot;MvvmDemo.View.DetailPage&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">x</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">d</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">phone</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">xmlns</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">=&quot;clr-namespace:Microsoft.Phone.Shell;assembly=Microsoft.Phone&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">DataContext</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">Binding</span><span style="background:#ffffff;color:#ff0000"> Person</span><span style="background:#ffffff;color:#0000ff">,</span></li> <li>                     <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#ff0000"> Source</span><span style="background:#ffffff;color:#0000ff">={</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> Locator}}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">FontFamily</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontFamilyNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">FontSize</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneFontSizeNormal}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">Foreground</span><span style="background:#ffffff;color:#0000ff">=&quot;{</span><span style="background:#ffffff;color:#a31515">StaticResource</span><span style="background:#ffffff;color:#ff0000"> PhoneForegroundBrush}</span><span style="background:#ffffff;color:#0000ff">&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">Orientation</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">SupportedOrientations</span><span style="background:#ffffff;color:#0000ff">=&quot;Portrait&quot;</span></li> <li><span style="background:#ffffff;color:#ff0000">shell</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">SystemTray.IsVisible</span><span style="background:#ffffff;color:#0000ff">=&quot;True&quot;</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#ff0000">mc</span><span style="background:#ffffff;color:#0000ff">:</span><span style="background:#ffffff;color:#ff0000">Ignorable</span><span style="background:#ffffff;color:#0000ff">=&quot;d&quot;&gt;</span></li> </ol> </div> </div> </div>  <h2>Messaging</h2>  <p>Now that we have two viewmodels, we need to setup a form of communication between them. Luckily for us, MVVM Light has something in place for this called the Messenger. The Messenger is a class that receives and delivers messages. One viewmodel subscribes for a certain message, the other viewmodel sends a message and the messenger makes sure it gets delivered nicely. The messenger can take any type and send it as a message, we could for example send an entire person, or the ID of a person and send it as an integer. But in a bigger app this could get complicated, imagine if 5 viewmodels start listening for integers but one is expecting the id of a product, another one expects the id of a person while a third one expects a result of some sorts. It would be a lot of work to get the subscribe / unsubscribe just right. That’s why I advice you to make it a habit to encapsulate the data in a special message class. Like for example to send our selected person over to the PersonViewModel.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4fa49ccd-61ca-4c26-a431-157177c5d4b7" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">class</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PersonSelectedMessage</span><span style="background:#ffffff;color:#000000"> : </span><span style="background:#ffffff;color:#2b91af">MessageBase</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#2b91af">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson { </span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000">; </span><span style="background:#ffffff;color:#0000ff">set</span><span style="background:#ffffff;color:#000000">; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> PersonSelectedMessage(</span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> selectedPerson)</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">SelectedPerson = selectedPerson;</span></li> <li>    <span style="background:#ffffff;color:#000000">}</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>As you can see, this is a really simple class with only one purpose: encapsulate a Person instance. The MessageBase baseclass is an MVVM Light class that contains some info about the sender and the target but I use this mainly to make the classes easier to recognize as MVVM Light messages. I also place all those message classes in a Messages folder in my project.</p>  <p>Let’s subscribe to this type of message from the PersonViewModel. First add a Person property to the PersonViewModel that we can bind to.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:dbef3bf0-af25-44b7-a3a6-591aafdd137c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> _selectedPerson;</span></li> <li style="background: #f3f3f3">&nbsp;</li> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000"> SelectedPerson</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">get</span><span style="background:#ffffff;color:#000000"> { </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000"> _selectedPerson; }</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">set</span></li> <li>    <span style="background:#ffffff;color:#000000">{</span></li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#0000ff">if</span><span style="background:#ffffff;color:#000000"> (_selectedPerson == </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">) </span><span style="background:#ffffff;color:#0000ff">return</span><span style="background:#ffffff;color:#000000">;</span></li> <li>&nbsp;</li> <li style="background: #f3f3f3">        <span style="background:#ffffff;color:#000000">_selectedPerson = </span><span style="background:#ffffff;color:#0000ff">value</span><span style="background:#ffffff;color:#000000">;</span></li> <li>        <span style="background:#ffffff;color:#000000">RaisePropertyChanged(() =&gt; SelectedPerson);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">}</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>Then add this in the PersonViewModel constructor.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:04c9e306-bda1-4307-881b-e50b291e728f" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">public</span><span style="background:#ffffff;color:#000000"> PersonViewModel()</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonSelectedMessage</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">this</span><span style="background:#ffffff;color:#000000">, msg =&gt;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">{</span></li> <li>        <span style="background:#ffffff;color:#000000">SelectedPerson = msg.SelectedPerson;</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000">});</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>    <p>This registers our current instance of PersonViewModel to receive messages of the PersonSelectedMessage type. We will send this message from the MainViewModel in the OnSelectionChanged method that fires when selecting a person in the ListBox.</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d1845304-213b-4a8b-b08e-8933ab29a8d0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#0000ff">private</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#0000ff">void</span><span style="background:#ffffff;color:#000000"> OnSelectionChanged(</span><span style="background:#ffffff;color:#2b91af">SelectionChangedEventArgs</span><span style="background:#ffffff;color:#000000"> args)</span></li> <li style="background: #f3f3f3"><span style="background:#ffffff;color:#000000">{</span></li> <li>    <span style="background:#ffffff;color:#000000">_navigationService.NavigateTo(</span><span style="background:#ffffff;color:#a31515">&quot;/View/DetailPage.xaml&quot;</span><span style="background:#ffffff;color:#000000">);</span></li> <li style="background: #f3f3f3">    <span style="background:#ffffff;color:#000000"></span><span style="background:#ffffff;color:#2b91af">Messenger</span><span style="background:#ffffff;color:#000000">.Default.Send(</span><span style="background:#ffffff;color:#0000ff">new</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">PersonSelectedMessage</span><span style="background:#ffffff;color:#000000">(args.AddedItems[0] </span><span style="background:#ffffff;color:#0000ff">as</span><span style="background:#ffffff;color:#000000"> </span><span style="background:#ffffff;color:#2b91af">Person</span><span style="background:#ffffff;color:#000000">));</span></li> <li><span style="background:#ffffff;color:#000000">}</span></li> </ol> </div> </div> </div>  <p>If you set a breakpoint in the action that fires when a message arrives and try to select a person the first time it will probably fail. This is because the message departs before the PersonViewModel has had a chance to initialize and register for the message, it will be sent but it will never arrive. If you hit the back key back to the MainPage and select another person it will arrive because the PersonViewModel instance already exists and is listening to the message. The quickest (and easiest) way to fix this is to make sure that PersonViewModel is initialized when the app launches. We can use an overload of SimpleIoc’s register method for this. </p>  <p>In the ViewModelLocator, add true as a parameter to the registration</p>  <div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:70983159-37fd-430b-8633-e3eabe341dbc" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> <div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> <div style="background: #000080; color: #fff; font-family: Verdana, Tahoma, Arial, sans-serif; font-weight: bold; padding: 2px 5px">Code Snippet</div> <div style="background: #ddd; max-height: 300px; overflow: auto"> <ol start="1" style="background: #ffffff; margin: 0 0 0 2em; padding: 0 0 0 5px;"> <li><span style="background:#ffffff;color:#2b91af">SimpleIoc</span><span style="background:#ffffff;color:#000000">.Default.Register&lt;</span><span style="background:#ffffff;color:#2b91af">PersonViewModel</span><span style="background:#ffffff;color:#000000">&gt;(</span><span style="background:#ffffff;color:#0000ff">true</span><span style="background:#ffffff;color:#000000">);</span></li> </ol> </div> </div> </div>  <p>This will initialize the class at the moment of registration and it will register itself as a subscriber for the PersonSelectedMessage. After binding the page title to SelectedPerson.Name and running the app this is the result:</p>  <p><a href="http://i59.tinypic.com/23rpg0w.jpg" target="_blank"><img src="http://i59.tinypic.com/23rpg0w.jpg" width="181" height="302" /></a></p>  <p>If this was a real application you would use the action of the messenger to fetch the detailed information of the selected item. DataBinding takes care of displaying the data on screen.</p>  <h2>Conclusion</h2>  <p>In this second part of my practical guide to MVVM Light I’ve discusses the way I usually work to select an item from a list, navigate to a detail page and fetch / show detailed information.</p>  <p>Some more MVVM related articles:</p>  <ul>   <li>&#160;<a href="http://www.spikie.be/blog/post/2013/04/12/10-things-you-might-have-missed-about-MVVM-Light.aspx">10 things you might have missed about MVVM Light</a></li>    <li>&#160;<a href="http://www.spikie.be/blog/post/2013/10/17/.aspx">ViewModelBackstack for when you navigate to the same page</a></li>    <li>&#160;<a href="http://www.galasoft.ch/mvvm/" target="_blank">MVVM Light Toolkit</a></li>    <li>&#160;<a href="http://pluralsight.com/training/Courses/TableOfContents/mvvm-light-toolkit-fundamentals" target="_blank">MVVM Light Toolkit fundamentals (Pluralsight)</a></li> </ul>  <p>Some more in depth IOC/DI articles:</p>  <ul>   <li>&#160;<a href="http://www.codeproject.com/Articles/615139/An-Absolute-Beginners-Tutorial-on-Dependency-Inver" target="_blank">An Absolute Beginner's Tutorial on Dependency Inversion Principle, Inversion of Control and Dependency Injection</a></li>    <li>&#160;<a href="http://www.kenneth-truyers.net/2013/05/12/the-n-layer-myth-and-basic-dependency-injection/" target="_blank">The N-layer myth and basic Dependency Injection</a></li>    <li>&#160;<a href="http://www.codeproject.com/Articles/29271/Design-pattern-Inversion-of-control-and-Dependency" target="_blank">Design pattern – Inversion of control and Dependency injection</a></li>    <li>&#160;<a href="http://martinfowler.com/articles/injection.html" target="_blank">Inversion of Control Containers and the Dependency Injection pattern</a></li>    <li>&#160;<a href="http://devlicio.us/blogs/billy_mccafferty/archive/2009/11/09/dependency-injection-101.aspx" target="_blank">Dependency Injection 101</a> </li> </ul>  <p>Feel free to ping me on Twitter (@NicoVermeir) should you have any questions.</p>  <p>The code for this second part can be found on <a href="http://1drv.ms/1oJKvsa" target="_blank">OneDrive</a>.</p>
{% include imported_disclaimer.html %}
